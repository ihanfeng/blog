{"Asset":{"it84i67wcv63bb8r":{"_id":"it84i67wcv63bb8r","source":"themes\\light\\source\\fancybox\\blank.gif","mtime":1386142378000},"qrbn6v9ueqmkpw0i":{"_id":"qrbn6v9ueqmkpw0i","source":"themes\\light\\source\\fancybox\\fancybox_loading.gif","mtime":1386142378000},"sw05bq80jfk2jiq7":{"_id":"sw05bq80jfk2jiq7","source":"themes\\light\\source\\fancybox\\fancybox_loading@2x.gif","mtime":1386142378000},"x634s99hclip8ify":{"_id":"x634s99hclip8ify","source":"themes\\light\\source\\fancybox\\fancybox_overlay.png","mtime":1386142378000},"avresasrxi8um5it":{"_id":"avresasrxi8um5it","source":"themes\\light\\source\\fancybox\\fancybox_sprite.png","mtime":1386142378000},"99p8wvyx4o59ehu1":{"_id":"99p8wvyx4o59ehu1","source":"themes\\light\\source\\fancybox\\fancybox_sprite@2x.png","mtime":1386142378000},"uvap8xtzxpc033y4":{"_id":"uvap8xtzxpc033y4","source":"themes\\light\\source\\fancybox\\jquery.fancybox.css","mtime":1386142378000},"mn1iwv87vk0xdxpv":{"_id":"mn1iwv87vk0xdxpv","source":"themes\\light\\source\\fancybox\\jquery.fancybox.pack.js","mtime":1386142378000},"9of6xj8a2zz89a2h":{"_id":"9of6xj8a2zz89a2h","source":"themes\\light\\source\\js\\gallery.js","mtime":1386142378000},"gcjrkooonzh0wu73":{"_id":"gcjrkooonzh0wu73","source":"themes\\light\\source\\js\\jquery.imagesloaded.min.js","mtime":1386142378000},"0l7p8xe51s05i2hr":{"_id":"0l7p8xe51s05i2hr","source":"themes\\light\\source\\css\\style.styl","mtime":1386142378000},"m6ch9uan1d1l3kph":{"_id":"m6ch9uan1d1l3kph","source":"themes\\light\\source\\css\\font\\fontawesome-webfont.eot","mtime":1386142379000},"9jtdxkmer7f3mx06":{"_id":"9jtdxkmer7f3mx06","source":"themes\\light\\source\\css\\font\\fontawesome-webfont.svg","mtime":1386142379000},"fx8nf2sr1bah5ofp":{"_id":"fx8nf2sr1bah5ofp","source":"themes\\light\\source\\css\\font\\fontawesome-webfont.ttf","mtime":1386142379000},"0kufmey0z4v76e1z":{"_id":"0kufmey0z4v76e1z","source":"themes\\light\\source\\css\\font\\fontawesome-webfont.woff","mtime":1386142378000},"bohmx16jrnse1xae":{"_id":"bohmx16jrnse1xae","source":"source\\favicon.ico","mtime":1386205877000},"1o8uktb55u1vkngt":{"_id":"1o8uktb55u1vkngt","source":"source\\img\\left-turquoise2x.png","mtime":1386148105000},"lgr29l872h3pgkjo":{"_id":"lgr29l872h3pgkjo","source":"source\\img\\markdown-biaoti.jpg","mtime":1386208387000},"ru2k8eam423tvrxb":{"_id":"ru2k8eam423tvrxb","source":"source\\img\\markdown-liebiao.jpg","mtime":1386208756000},"qcyso4pwl8gdl296":{"_id":"qcyso4pwl8gdl296","source":"source\\img\\markdown-yinyong.jpg","mtime":1386209240000},"r26g0lf1sx8j5zfl":{"_id":"r26g0lf1sx8j5zfl","source":"themes\\light\\source\\css\\_partial\\article.styl","mtime":1386211046000},"l8lxv399cttmofef":{"_id":"l8lxv399cttmofef","source":"source\\新建文本文档.txt","mtime":1386224400000},"7uqs1g1m7fhaq6ed":{"_id":"7uqs1g1m7fhaq6ed","source":"source\\CNAME","mtime":1386224417000},"vqttvffbz56fccw2":{"_id":"vqttvffbz56fccw2","source":"themes\\light\\source\\sound\\harlem-shake.mp3","mtime":1386228577000},"aifl7xpnb3xh9lm8":{"_id":"aifl7xpnb3xh9lm8","source":"themes\\light\\source\\css\\harlem-shake-style.css","mtime":1386228532000},"lwbv3zpjoep9xeot":{"_id":"lwbv3zpjoep9xeot","source":"source\\img\\free_software_licenses.png","mtime":1386232731000},"v2zqhrfzivkjkz9i":{"_id":"v2zqhrfzivkjkz9i","source":"source\\img\\2013\\12\\free_software_licenses.png","mtime":1386232731000},"spr6wil29gl2akkq":{"_id":"spr6wil29gl2akkq","source":"source\\img\\2013\\12\\markdown-liebiao.jpg","mtime":1386208756000},"2l67enthzq301m1p":{"_id":"2l67enthzq301m1p","source":"source\\img\\2013\\12\\markdown-yinyong.jpg","mtime":1386209240000},"clx5bwon0gqq92pa":{"_id":"clx5bwon0gqq92pa","source":"source\\img\\2013\\12\\markdown-biaoti.jpg","mtime":1386208387000},"3tsjn52mlwjmzznx":{"_id":"3tsjn52mlwjmzznx","source":"source\\about\\bg.png","mtime":1386296222000},"wg2oxzwdlgkbf9sa":{"_id":"wg2oxzwdlgkbf9sa","source":"source\\about\\style_home.css","mtime":1386296228000},"o7g8aqmzxyhsvx7d":{"_id":"o7g8aqmzxyhsvx7d","source":"source\\img\\bg.png","mtime":1386296222000},"xuuemaxjoagcpsbm":{"_id":"xuuemaxjoagcpsbm","source":"source\\img\\2013\\12\\springside4-module-mvn-install.jpg","mtime":1386383751000},"v8d8fcnbi7m1p0px":{"_id":"v8d8fcnbi7m1p0px","source":"source\\img\\2013\\12\\springside4-example-import.jpg","mtime":1386385205000},"mchif14mtr88bt8i":{"_id":"mchif14mtr88bt8i","source":"source\\img\\2013\\12\\springside4-quickstart-demo.jpg","mtime":1386385653000},"4n3n9ql21t2o0oiw":{"_id":"4n3n9ql21t2o0oiw","source":"source\\img\\2013\\12\\springside4-quickstart-demo2.jpg","mtime":1386385715000},"dpsd77mhy2gsmzed":{"_id":"dpsd77mhy2gsmzed","source":"source\\img\\2013\\12\\spring3-jiagoutu.jpg","mtime":1386552046000},"xdzl2j98tvta4z1j":{"_id":"xdzl2j98tvta4z1j","source":"source\\img\\2013\\12\\spring3-yingyongchangjing.jpg","mtime":1386552605000},"h1iprrvpq0o986pi":{"_id":"h1iprrvpq0o986pi","source":"source\\img\\2013\\12\\spring3-chuangtongyingyong.jpg","mtime":1386553093000},"d47opd8b02mqjko6":{"_id":"d47opd8b02mqjko6","source":"source\\img\\2013\\12\\spring3-iocyingyong.jpg","mtime":1386553176000},"li33s1mb3an8zd7s":{"_id":"li33s1mb3an8zd7s","source":"source\\img\\2013\\12\\spring3-hello-jar.jpg","mtime":1386554899000},"bwl9wnokqxgbyiv6":{"_id":"bwl9wnokqxgbyiv6","source":"source\\img\\2013\\12\\spring3-iocrongqi.jpg","mtime":1386556480000},"tsefy5ufchpfbmhe":{"_id":"tsefy5ufchpfbmhe","source":"source\\img\\2013\\12\\spring3-di-shilihua.jpg","mtime":1386567842000},"k5d5nbs8ure0ei8z":{"_id":"k5d5nbs8ure0ei8z","source":"source\\img\\2013\\12\\spring3-di-canshuleixing.jpg","mtime":1386568193000},"l4ikr5basxcxc1op":{"_id":"l4ikr5basxcxc1op","source":"source\\img\\2013\\12\\spring3-di-xiandingm.jpg","mtime":1386568271000},"clt6mx5g2l3zeapo":{"_id":"clt6mx5g2l3zeapo","source":"source\\img\\2013\\12\\spring3-canshuming.jpg","mtime":1386568505000},"vnui6mv78nk9nqg3":{"_id":"vnui6mv78nk9nqg3","source":"source\\img\\2013\\12\\spring3-di-setter1.jpg","mtime":1386569600000},"3fbzd4pj9lftlt67":{"_id":"3fbzd4pj9lftlt67","source":"source\\img\\2013\\12\\spring3-di-setter2.jpg","mtime":1386569669000},"sspaut4x51fm1zjg":{"_id":"sspaut4x51fm1zjg","source":"source\\img\\2013\\12\\spring3-aop-logutils.jpg","mtime":1386574599000},"5ozvuddkpxnk4p0c":{"_id":"5ozvuddkpxnk4p0c","source":"source\\img\\2013\\12\\spring3-aop-playservice.jpg","mtime":1386574673000},"08si8k5yf1kpx1fo":{"_id":"08si8k5yf1kpx1fo","source":"source\\img\\2013\\12\\spring3-aop-playservice2.jpg","mtime":1386574763000},"txdjcuvnlfefrfed":{"_id":"txdjcuvnlfefrfed","source":"source\\img\\2013\\12\\spring-aop-playservice.jpg","mtime":1386575698000},"lc48kp1pfjn9h11w":{"_id":"lc48kp1pfjn9h11w","source":"source\\img\\2013\\12\\spring3-aop-logaspect.jpg","mtime":1386575746000},"oafpqku5eti3bgox":{"_id":"oafpqku5eti3bgox","source":"source\\img\\2013\\12\\spring3-aop-hengqiedian.jgp.JPG","mtime":1386576004000},"1aj8ic3ib6mfgdot":{"_id":"1aj8ic3ib6mfgdot","source":"source\\img\\2013\\12\\spring3-aop-zhifu1.jpg","mtime":1386576075000},"5px07sw69in74g0e":{"_id":"5px07sw69in74g0e","source":"source\\img\\2013\\12\\spring3-aop-zhifu2.jpg","mtime":1386576111000},"ce42b9sm5dx97xjy":{"_id":"ce42b9sm5dx97xjy","source":"source\\img\\2013\\12\\spring3-aop-hengqiedian.jgp","mtime":1386576004000},"66awuju0ayeyvx3w":{"_id":"66awuju0ayeyvx3w","source":"source\\img\\2013\\12\\spring3-aop-gainian.jpg","mtime":1386576913000},"iliuy0jqvy3o8n69":{"_id":"iliuy0jqvy3o8n69","source":"source\\img\\2013\\12\\spring3-aop-tongzhi.jpg","mtime":1386577109000},"sh4ief4v90057gf4":{"_id":"sh4ief4v90057gf4","source":"source\\img\\2013\\12\\spring3-aop-guocheng.jpg","mtime":1386579747000},"mtolfdtsy8cowigy":{"_id":"mtolfdtsy8cowigy","source":"source\\img\\2013\\12\\spring-jdbc-duibi.jpg","mtime":1386639935000},"cdnsht59fok7ri5l":{"_id":"cdnsht59fok7ri5l","source":"source\\img\\2013\\12\\spring3-jdbc-jiagou.jpg","mtime":1386640290000},"6ehwsuv9e57v17c0":{"_id":"6ehwsuv9e57v17c0","source":"source\\img\\2013\\12\\spring3-jdbc-mubanlei.jpg","mtime":1386640666000},"e4hwohd3gz9788s8":{"_id":"e4hwohd3gz9788s8","source":"source\\img\\2013\\12\\win764-install-oracle1.jpg","mtime":1386663141000},"gzkmfs6nxodmikn9":{"_id":"gzkmfs6nxodmikn9","source":"source\\img\\2013\\12\\win764-install-oracle2.jpg","mtime":1386663257000},"bx018dj6f0hjjynd":{"_id":"bx018dj6f0hjjynd","source":"source\\img\\2013\\12\\win764-install-oracle3.jpg","mtime":1386663517000},"2eahu011c0p7bvlx":{"_id":"2eahu011c0p7bvlx","source":"source\\img\\2013\\12\\win764-install-oracle4.jpg","mtime":1386663544000},"7nn95zvw10tocm36":{"_id":"7nn95zvw10tocm36","source":"source\\img\\2013\\12\\win764-install-oracle5.jpg","mtime":1386663681000},"px2ko0eqo3677jhy":{"_id":"px2ko0eqo3677jhy","source":"source\\img\\2013\\12\\win764-install-oracle6.jpg","mtime":1386663757000},"jbyb7j3czyyqzrni":{"_id":"jbyb7j3czyyqzrni","source":"source\\img\\2013\\12\\win764-install-oracle7.jpg","mtime":1386663803000},"bx1rm04jlhnlkpth":{"_id":"bx1rm04jlhnlkpth","source":"source\\img\\2013\\12\\win764-install-oracle8.jpg","mtime":1386663839000},"rdlz3wzxvkbq6dty":{"_id":"rdlz3wzxvkbq6dty","source":"source\\img\\2013\\12\\win764-install-oracle9.jpg","mtime":1386665943000},"voi4kpvahza8ip1n":{"_id":"voi4kpvahza8ip1n","source":"source\\img\\2013\\12\\win764-install-oracle10.jpg","mtime":1386666083000},"3sg46yq7d31jsegj":{"_id":"3sg46yq7d31jsegj","source":"source\\img\\2013\\12\\win764-install-oracle11.jpg","mtime":1386666158000},"d4kqr1xwn5gvla1n":{"_id":"d4kqr1xwn5gvla1n","source":"source\\img\\2013\\12\\php5-pic1.jpg","mtime":1386737817000},"t0al3oddykg6gx1o":{"_id":"t0al3oddykg6gx1o","source":"source\\img\\2013\\12\\php5-pic2.jpg","mtime":1386737963000}},"Cache":{"2fwtllram8ht6kyh":{"_id":"2fwtllram8ht6kyh","content":"title: Hello World\ndate: 2013-12-04 15:32:58\ncategories: 未分类\ntags: Test\n---\n\nWelcome to [Hexo](http://zespia.tw/hexo)! This is your very first post. Check [documentation](http://zespia.tw/hexo/docs) to learn how to use.","mtime":1386208974000,"source":"_posts/hello-world.md"},"ljapcrlmp3cw7o2d":{"_id":"ljapcrlmp3cw7o2d","content":"title: 新博客，新起点\ndate: 2013-12-04 16:08:11\ncategories: hexo\ntags: [hexo搭建,github托管]\n---\n\n这是新博客，使用[Hexo](http://zespia.tw/hexo/)搭建，托管于github，欢迎使用。此前博文托管香港PHP主机，厌倦wordpress的千篇一律，速度实在无法忍受，无奈一段时间没有使用博客。也曾在GitHub上使用Octopress搭建，部署的效率实在不敢恭维。直到至今偶然发现hexo这一惊天动地的开源作品，欣喜若狂，开始折腾。\n\n<!-- more -->\n\n","mtime":1386213673000,"source":"_posts/first.md"},"cyn4cfe60eflxooh":{"_id":"cyn4cfe60eflxooh","content":"title: About Me\ndate: 2013年12月6日\ncategories: \n---\n##**轨迹**\n\n小朱，男，`80年代末`出生于海峡西岸妈祖故里-`福建莆田`，现居`福建福州`，从事码农工作。\n`2011`年，毕业于`武汉软件工程职业学院软件技术`专业，一年(2011-2012)`创业`经历，一年(2013-至今)`码农`经验。\n\n##**技能**\n- 掌握`JAVA EE`基础，掌握`面向对象`编程思想\n- 掌握`jsp`、`servlet`、`javabean`、`jdbc`等web开发技术\n- 熟练运用`Struts`、`hibernate`、`spring`、`springMVC`、`mybatis`框架\n- 掌握`mysql`、`mssql`、`oracle`数据库基础\n- 熟练`HTML`、`javascript`、`css`、`jquery`的运用\n- 熟练使用`Maven`、`svn`、`git`等管理工具\n- 熟悉`tomcat`服务器部署及配置\n- `Linux`平台安装开发及部署\n\n##**项目**\n\n**JAVA企业级应用**：[产品数据配型管理(2013.7-2013.11)]()\n\n##**联系我**\n[BLOG](http://zhujunwang.cn) [Google+](https://plus.google.com/100185806262651734769/) [GitHub](https://github.com/zhdevelop) [Git @ OSC](http://git.oschina.net/zhdevelop) [Twitter](https://twitter.com/zhdevelop) [E-Mail](mailto:zhdevelop@gmail.com)\n\n","mtime":1386299795000,"source":"about/index.md"},"8zdxom47r43k9cz9":{"_id":"8zdxom47r43k9cz9","content":"title: Hexo教程一：Hexo简介\ndate: 2013-12-05 10:20:50\ncategories: hexo\ntags: [hexo,github博客]\n---\n##**什么是Hexo**\n\n[hexo](http://zespia.tw/hexo/zh-CN/)是一个基于Node.js的静态博客程序，可以方便的生成静态网页托管在github和Heroku上。作者是来自台湾的[@tommy351](https://github.com/tommy351/hexo)。引用@tommy351的话，hexo：\n\n\n> A fast, simple & powerful blog framework, powered by Node.js.\n  快速、简单且功能强大的 Node.js 博客框架。\n\n<!-- more -->\n我们可以使用hexo创建自己的博客，托管到github或其他任何地方服务器上，可以绑定自己的域名，然后使用markdown写文章。 \n\n##**为什么要使用Hexo**\n\n引用作者原话：\n\n> 可思议的快速 ─ 只要一眨眼静态文件即生成完成\n  支持 Markdown\n  仅需一道指令即可部署到 GitHub Pages 和 Heroku\n  已移植 Octopress 插件\n  高扩展性、自订性\n  兼容于 Windows, Mac & Linux\n\n**优点：**\n- 易用，部署简单，使用过程只需要4个命令`hexo new` `hexo generate` `hexo server` `hexo deploy`或 `hexo n` `hexo g` `hexo s` `hexo d`\n- 轻量级。文件少、小、易于理解，方便用户自定义。\n- 用户多。通过google能解决大多数问题解决方案。\n\n##**Hexo使用群体**\n\n这是一个免费开源的博客程序，任何人都可以使用和修改。因为hexo的使用涉及到较多的知识点，诸如github、git、markdown、node.js等技术，博客的主题、框架、插件可以自定义安装和设置。更确切说本程序适合有计算机编程基础和喜欢无尽折腾的人使用。当然也欢迎其他群体使用，因为你尝试后会发现原来使用起来如此的简单。\n\n##**参考文献：**\n[Zipperary's Blog](http://zipperary.com/2013/05/28/hexo-guide-1/)\n","mtime":1386215492000,"source":"_posts/hexo-guid-one.md"},"yw4jen2j2b5b9m32":{"_id":"yw4jen2j2b5b9m32","content":"title: Markdown学习指南\ndate: 2013-12-05 09:32:24\ncategories: markdown\ntags: [markdown指南]\n---\n##**1、Markdown介绍**\n\nMarkdown是一种轻量级标记语言，允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XTHML文档。\n\n**优点：**\n\n- 纯文本，所以兼容性极强，可以用所有文本编辑器打开。\n- 让你专注于文字而不是排版。\n- 格式转换方便，Markdown 的文本你可以轻松转换为 html、电子书等。\n- Markdown 的标记语法有极好的可读性。\n\n<!-- more -->\n\n##**2、Markdown简明语法**\n\n###**基本符号**\n- `*`,`-`,`+` 3个符号效果都一样，这3个符号被称为 Markdown符号\n- 空白行表示另起一个段落\n- ` ` ` 是表示inline代码，`tab`是用来标记 代码段，分别对应html的`code`，`pre`标签\n\n###**换行**\n- 单一段落(`<p>`)用一个空白行\n- 连续两个空格 会变成一个 <br>\n- 连续3个符号，然后是空行，表示 hr横线\n\n###**标题**\n在Markdown中，只需要在文本前面加上 `# `即可。同理、你还可以增加二级标题、三级标题、四级标题、五级标题和六级标题，总共六级，只需要增加  `#`即可，标题字号相应降低。\n\n\t# 这是一级标题\n\t## 这是二级标题\n\n\n注：# 和「一级标题」之间建议保留一个字符的空格，这是最标准的 Markdown 写法。\n<img src=\"/img/markdown-biaoti.jpg\"/>\n\n###**引用**\n\n在我们写作的时候经常需要引用他人的文字，这个时候引用这个格式就很有必要了，在Markdown中，你只需要在你希望引用的文字前面加上 > 就好了，例如：\n\n> 大风起兮云飞扬，壮士去兮不复返！\n\n注：> 和文本之间要保留一个字符的空格。\n\n![](/img/markdown-yinyong.jpg)\n\n###**列表**\n\n列表格式也很常用，在Markdown中，你只需要在文字前面加上 `-`即可。\n\n\n\t- 文本1\n\t- 文本2\n\t- 文本3\n\n\n如果你希望有序列表，也可以在文字前面加上 `1. 2. 3.`就可以了，例如：\n\n\t1. 文本1\n\t2. 文本2\n\t3. 文本3\n\n\n注：`-`、`1.`和文本之间要保留一个字符的空格。\n\n<img src=\"/img/markdown-liebiao.jpg\"/>\n\n\n###**链接**\n\n在 Markdown 中，插入链接不需要其他按钮，你只需要使用 `[显示文本](链接地址)` 这样的语法即可，例如：\n\n[Hello World](http://zhdevelop.github.io)\n\n###**插入图片**\n\n和插入链接类似，你只需要使用 `![](图片链接地址)` 这样的语法即可，例如：\n\n\t![](/img/markdown-liebiao.jpg) (推荐)\n\n或者\n\n\t<img src=\"/img/markdown-liebiao.jpg\"/>\n\n###**粗体和斜体**\n\nMarkdown 的粗体和斜体也非常简单，用两个 `*` 包含一段文本就是粗体的语法，用一个 `*` 包含一段文本就是斜体的语法。\n\n\t*大风起兮云飞扬，**壮士**去兮不复返！*\n\n*大风起兮云飞扬，**壮士**去兮不复返！*\n\n###**特殊符号**\n- 用` \\ `来转义，表示文本中的markdown符号\n- 可以在文本种直接使用html标签，但是要注意在使用的时候，前后加上空行\n- 文本前后各加一个符号，表示斜体\n\n\n##**参考文献：**\n1.[鲁塔弗：markdown 简明语法](http://lutaf.com/markdown-simple-usage.htm)\n2.[图灵社区：怎样使用Markdown](http://www.ituring.com.cn/article/23)\n3.[简书：献给写作者的 Markdown 新手指南](http://jianshu.io/p/q81RER)\n4.[官方文档(中文版)：Markdown 语法说明](http://wowubuntu.com/markdown/#p)\n\n##**编辑器推荐:**\n- [简书](http://jianshu.io/)\n- []MaDe (Chrome插件)](https://chrome.google.com/webstore/detail/made/oknndfeeopgpibecfjljjfanledpbkog)\n\n\n","mtime":1386213223000,"source":"_posts/markdown-guid.md"},"mktnvm6ctcfsquhw":{"_id":"mktnvm6ctcfsquhw","content":"title: Hexo教程二：Hexo博客搭建\ndate: 2013-12-05 11:53:24\ncategories: hexo\ntags: [hexo,hexo搭建]\n---\n\n##**1、安装Git**\n\nwindows下推荐安装[msysgit](http://msysgit.github.io/)，安装步骤详情Google。\n\n##**2、安装Node.js**\n\n官网：[http://nodejs.org/](http://nodejs.org/)\n\n下载直接安装即可，不懂的自行google。\n\n<!-- more -->\n##**3、安装hexo**\n\n利用`npm`命令即可安装。 任意位置右键选择`git bash`，输入如下命令：\n\n\tnpm install -g hexo \n\n##**4、创建hexo文件夹**\n\nhexo安装完成后，在E盘建立文件夹，命名为blog，然后执行命令。\n\n\thexo init \n\nHexo会自动在目标文件夹建立网站所需的所有文件。\n\n##**5、本地查看**\n\n现在我们已经在本地搭建完Hexo博客，执行以下命令即可在本地查看。\n\n\thexo generate //生成博客文件\n\n\thexo server // 启动服务\n\n\n在浏览器输入`localhost:4000`即可查看。\n\n\n##**6、注册Github和创建repository**\n\n没有`Github`账号的请自行注册，我已经有账号，所有就不在注册。 在自己Github主页右下角，创建一个新的repository。比如我的Github账号是`zhdevelop`，那么我应该创建的repository名字应该是`zhdevelop.github.io`。\n\n\n##**7、部署**\n\n编辑`_config.yml`。\n\n\t# Deployment\n\t## Docs: http://zespia.tw/hexo/docs/deploy.html\n\tdeploy:\n  \ttype: github\n  \trepository: https://github.com/zhdevelop/zhdevelop.github.io.git\n  \tbranch: master\n\n执行以下指令完成部署。\n\n\thexo generate\n\thexo deploy\n\n\n注意： 每次修改本地文件后，需要`hex generate`才能保存。每次使用命令都必须在自己创建的文件夹目录下，如e:\\blog\n\n这样我们的博客就已经搭建完毕了。直接访问`http://zhdevelop.github.io/` 即可。\n\n##**8、tips**\n\nhexo现在支持更加简单的命令格式了，比如：\n\n\thexo g == hexo generate\n\thexo d == hexo deploy\n\thexo s == hexo server\n\thexo n == hexo new\n\n\n\n","mtime":1386217814000,"source":"_posts/hexo-guid-two.md"},"2ebz7yymg4pwv9k4":{"_id":"2ebz7yymg4pwv9k4","content":"title: Hexo教程三：Hexo配置\ndate: 2013-12-05 12:31:03\ncategories: hexo\ntags: [hexo,hexo配置]\n---\n前面的章节，我们学会了搭建hexo博客站点。现在我们来进入配置环节。\n\nhexo的配置文件有2个。\n\n- `_config.yml` 整站配置\n- `themes\\light_config.yml` 主题配置\n\n<!-- more -->\n\n###**1、整站配置文件 _config.yml**\n\n{%codeblock lang:yaml %}\n# Hexo Configuration\n## Docs: http://zespia.tw/hexo/docs/configure.html\n## Source: https://github.com/tommy351/hexo/\n\n# Site\n#站点名字\ntitle: Hello World\n#站点副标题\nsubtitle: Code如痴如醉，关注移动互联网，关注电子商务\n#站点描述\ndescription: JAVA码农、工作学习笔记、各种IT狂\n#作者\nauthor: hanfeng\n#邮箱\nemail: zhdevelop@gmail.com\n#语言\nlanguage: zh-CN\n\n# URL 绑定域名配置\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://zhdevelop.github.io/\nroot: /\npermalink: :year/:month/:day/:title/\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\n\n# Writing 文章布局、写作格式定义，默认即可\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\nauto_spacing: false # Add spaces between asian characters and western characters\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nmax_open_file: 100\nmulti_thread: true\nfilename_case: 0\nrender_drafts: false\nhighlight:\n  enable: true\n  line_number: true\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Archives\n## 2: Enable pagination\n## 1: Disable pagination\n## 0: Fully Disable\narchive: 2\ncategory: 2\ntag: 2\n\n# Server\n## Hexo uses Connect as a server\n## You can customize the logger format as defined in\n## http://www.senchalabs.org/connect/logger.html\nport: 4000\nlogger: false\nlogger_format:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: MMM D YYYY\ntime_format: H:mm:ss\n\n# Pagination 每页显示文章数，可以自定义，我将10改成了5\n## Set per_page to 0 to disable pagination\nper_page: 5\npagination_dir: page\n\n# Disqus Disqus插件，我们会替换成“多说”，不修改\ndisqus_shortname:\n\n# Extensions 配置站点所用主题和插件\n## Plugins: https://github.com/tommy351/hexo/wiki/Plugins\n## Themes: https://github.com/tommy351/hexo/wiki/Themes\ntheme: light\nexclude_generator:\n\n# Deployment 站点部署到github要配置\n## Docs: http://zespia.tw/hexo/docs/deploy.html\ndeploy:\n  type: github\n  repository: https://github.com/zhdevelop/zhdevelop.github.io.git\n  branch: master\n\n#RSS插件 添加sitemap\n  plugins:\n\t- hexo-generator-feed\n\t- hexo-generator-sitemap\n\n{%endcodeblock%}\n\n###**2、主题配置文件 light_config.yml**\n\n{%codeblock lang:yaml %}\n#站点右上角导航栏\nmenu:\n  Home: /\n  Archives: /archives\n  About: /about\n\n#站点右边栏\nwidgets:\n- search\n- category\n- tagcloud\n- weibo\n- blogroll\n\n\nexcerpt_link: 阅读全文\n\n#右边栏要显示twitter展示的话，需要在此设置\ntwitter:\n  username: zhdevelop\n  show_replies: false\n  tweet_count: 5\n\n#SNS分享，身在天朝，当然用“百度分享”\naddthis:\n  enable: true\n  pubid:\n  facebook: true\n  twitter: true\n  google: true\n  pinterest: false\n\n#图片效果，默认\nfancybox: true\n\n#要使用google_analytics进行统计的话，这里需要配置ID\ngoogle_analytics: UA-41331600-2\n#生成RSS，需要配置路径\nrss: /atom.xml\n\ncomment_provider: facebook\n# Facebook comment\nfacebook:\n  appid: 123456789012345\n  comment_count: 5\n  comment_width: 840\n  comment_colorscheme: light\n  {%endcodeblock%}\n\n###**参考文献：**\n[zipperary's Blog](http://zipperary.com/2013/05/29/hexo-guide-3/)","mtime":1386222264000,"source":"_posts/hexo-guid-three.md"},"39rs44hijn7j1rzm":{"_id":"39rs44hijn7j1rzm","content":"title:  Hexo教程四：Hexo优化\ndate: 2013-12-05 12:59:37\ncategories: hexo\ntags: [hexo,hexo优化]\n---\n##**添加“多说”评论**\n\nhexo默认使用国外比较流行的disqus，不过，按照“因地制宜”的原则，我们修改为国内用的多又好用的“多说”评论系统。步骤非常简单:\n\n在多说进行注册，获得通用代码。\n\n将通用代码粘贴到`themes\\light\\layout\\_partial\\comment.ejs`里面，如下：\n\n{%codeblock lang:yaml %}\n<% if ( page.comments){ %>\n<section id=\"comment\">\n通用代码\n</section>\n<% } %>\n{%endcodeblock%}\n\n<!-- more -->\n\n##**添加“百度分享”**\n\n到[百度分享](http://share.baidu.com/code)获得代码，在`themes/light/layout/_partial/article.ejs`中，将`<%-partial('post/share')%>`删掉，替换为百度分享的代码。\n\n##**添加小图标**\n在themes/light/layout/_partial/head.ejs里将`<link href=\"<%- config.root %>favicon.png\" rel=\"icon\">`替换为`<link href=\"<%- config.root %>favicon.ico\" rel=\"icon\" type=\"image/x-ico\">`。将favicon.ico图标文件放在source目录下。制作图标的网站，[http://www.faviconer.com](http://www.faviconer.com)。\n\n##**添加分类、标签云widget**\n很简单，在`themes/light/_config.yml`中，添加如下：\n{%codeblock lang:yaml %}\n\twidgets:\n\t- category\n\t- tagcloud\n{%endcodeblock%}\n\n##**添加友情链接widget**\n在`themes/light/layout/_widge`t中新建名为`blogroll.ejs`的文件，编辑内容如下：\n{%codeblock lang:html %}\n<div class=\"widget tag\">\n<h3 class=\"title\">友情链接</h3>\n<ul class=\"entry\">\n<li><a href=\"http://zipperary.com/\" title=\"Zippera's Blog\">Zippera</a></li>\n</ul>\n</div>\n{%endcodeblock%}\n在`themes/light/_config.yml`中，添加如下：\n{%codeblock lang:yaml %}\nwidgets:\n- blogroll\n{%endcodeblock%}\n\n##**生成post时默认生成categories配置项**\n\n在`scaffolds/post.md`中，添加一行`categories:`。同理可应用在`page.md`和`photo.md`。\n\n##**添加新浪微博widget(微博秀)**\n\n去新浪微博开放平台设置和生成微博秀代码。\n在`themes/light/layout/_widget`中新建名为`weibo.ejs`的文件，将刚才的代码直接保存到这里。\n在`themes/light/_config.yml`中，添加如下：\n{%codeblock lang:yaml %}\nwidgets:\n- weibo\n{%endcodeblock%}\n\n##**导航栏添加“关于”**\n\thexo new page \"about\"\n到`source/about/index.md`编辑内容。\n在`themes/light/_config.yml`中，添加如下：\n{%codeblock lang:yaml %}\nmenu:\n  关于: /about\n{%endcodeblock%}\n\n##**主页文章显示摘要**\n编辑md文件的时候，在要作为摘要的文字后面添加`<!--more-->`即可。","mtime":1386220732000,"source":"_posts/hexo-guide-four.md"},"cgd8tmhfaz3x7xy6":{"_id":"cgd8tmhfaz3x7xy6","content":"title: Hexo教程一：Hexo简介\ndate: 2013-12-05 10:20:50\ncategories: hexo\ntags: [hexo,github博客]\n---\n##**什么是Hexo**\n\n[hexo](http://zespia.tw/hexo/zh-CN/)是一个基于Node.js的静态博客程序，可以方便的生成静态网页托管在github和Heroku上。作者是来自台湾的[@tommy351](https://github.com/tommy351/hexo)。引用@tommy351的话，hexo：\n\n\n> A fast, simple & powerful blog framework, powered by Node.js.\n  快速、简单且功能强大的 Node.js 博客框架。\n\n<!-- more -->\n我们可以使用hexo创建自己的博客，托管到github或其他任何地方服务器上，可以绑定自己的域名，然后使用markdown写文章。 \n\n##**为什么要使用Hexo**\n\n引用作者原话：\n\n> 可思议的快速 ─ 只要一眨眼静态文件即生成完成\n  支持 Markdown\n  仅需一道指令即可部署到 GitHub Pages 和 Heroku\n  已移植 Octopress 插件\n  高扩展性、自订性\n  兼容于 Windows, Mac & Linux\n\n**优点：**\n- 易用，部署简单，使用过程只需要4个命令`hexo new` `hexo generate` `hexo server` `hexo deploy`或 `hexo n` `hexo g` `hexo s` `hexo d`\n- 轻量级。文件少、小、易于理解，方便用户自定义。\n- 用户多。通过google能解决大多数问题解决方案。\n\n##**Hexo使用群体**\n\n这是一个免费开源的博客程序，任何人都可以使用和修改。因为hexo的使用涉及到较多的知识点，诸如github、git、markdown、node.js等技术，博客的主题、框架、插件可以自定义安装和设置。更确切说本程序适合有计算机编程基础和喜欢无尽折腾的人使用。当然也欢迎其他群体使用，因为你尝试后会发现原来使用起来如此的简单。\n\n##**参考文献：**\n[Zipperary's Blog](http://zipperary.com/2013/05/28/hexo-guide-1/)\n","mtime":1386215492000,"source":"_posts/hexo-guide-one.md"},"3gcvxmgto43967kl":{"_id":"3gcvxmgto43967kl","content":"title: Hexo教程三：Hexo配置\ndate: 2013-12-05 12:31:03\ncategories: hexo\ntags: [hexo,hexo配置]\n---\n前面的章节，我们学会了搭建hexo博客站点。现在我们来进入配置环节。\n\nhexo的配置文件有2个。\n\n- `_config.yml` 整站配置\n- `themes\\light_config.yml` 主题配置\n\n<!-- more -->\n\n###**1、整站配置文件 _config.yml**\n\n{%codeblock lang:yaml %}\n# Hexo Configuration\n## Docs: http://zespia.tw/hexo/docs/configure.html\n## Source: https://github.com/tommy351/hexo/\n\n# Site\n#站点名字\ntitle: Hello World\n#站点副标题\nsubtitle: Code如痴如醉，关注移动互联网，关注电子商务\n#站点描述\ndescription: JAVA码农、工作学习笔记、各种IT狂\n#作者\nauthor: hanfeng\n#邮箱\nemail: zhdevelop@gmail.com\n#语言\nlanguage: zh-CN\n\n# URL 绑定域名配置\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://zhdevelop.github.io/\nroot: /\npermalink: :year/:month/:day/:title/\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\n\n# Writing 文章布局、写作格式定义，默认即可\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\nauto_spacing: false # Add spaces between asian characters and western characters\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nmax_open_file: 100\nmulti_thread: true\nfilename_case: 0\nrender_drafts: false\nhighlight:\n  enable: true\n  line_number: true\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Archives\n## 2: Enable pagination\n## 1: Disable pagination\n## 0: Fully Disable\narchive: 2\ncategory: 2\ntag: 2\n\n# Server\n## Hexo uses Connect as a server\n## You can customize the logger format as defined in\n## http://www.senchalabs.org/connect/logger.html\nport: 4000\nlogger: false\nlogger_format:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: MMM D YYYY\ntime_format: H:mm:ss\n\n# Pagination 每页显示文章数，可以自定义，我将10改成了5\n## Set per_page to 0 to disable pagination\nper_page: 5\npagination_dir: page\n\n# Disqus Disqus插件，我们会替换成“多说”，不修改\ndisqus_shortname:\n\n# Extensions 配置站点所用主题和插件\n## Plugins: https://github.com/tommy351/hexo/wiki/Plugins\n## Themes: https://github.com/tommy351/hexo/wiki/Themes\ntheme: light\nexclude_generator:\n\n# Deployment 站点部署到github要配置\n## Docs: http://zespia.tw/hexo/docs/deploy.html\ndeploy:\n  type: github\n  repository: https://github.com/zhdevelop/zhdevelop.github.io.git\n  branch: master\n\n#RSS插件 添加sitemap\n  plugins:\n\t- hexo-generator-feed\n\t- hexo-generator-sitemap\n\n{%endcodeblock%}\n\n###**2、主题配置文件 light_config.yml**\n\n{%codeblock lang:yaml %}\n#站点右上角导航栏\nmenu:\n  Home: /\n  Archives: /archives\n  About: /about\n\n#站点右边栏\nwidgets:\n- search\n- category\n- tagcloud\n- weibo\n- blogroll\n\n\nexcerpt_link: 阅读全文\n\n#右边栏要显示twitter展示的话，需要在此设置\ntwitter:\n  username: zhdevelop\n  show_replies: false\n  tweet_count: 5\n\n#SNS分享，身在天朝，当然用“百度分享”\naddthis:\n  enable: true\n  pubid:\n  facebook: true\n  twitter: true\n  google: true\n  pinterest: false\n\n#图片效果，默认\nfancybox: true\n\n#要使用google_analytics进行统计的话，这里需要配置ID\ngoogle_analytics: UA-41331600-2\n#生成RSS，需要配置路径\nrss: /atom.xml\n\ncomment_provider: facebook\n# Facebook comment\nfacebook:\n  appid: 123456789012345\n  comment_count: 5\n  comment_width: 840\n  comment_colorscheme: light\n  {%endcodeblock%}\n\n###**参考文献：**\n[zipperary's Blog](http://zipperary.com/2013/05/29/hexo-guide-3/)","mtime":1386219533000,"source":"_posts/hexo-guide-three.md"},"8y4ujtk1mghbs5vy":{"_id":"8y4ujtk1mghbs5vy","content":"title: Hexo教程二：Hexo博客搭建\ndate: 2013-12-05 11:53:24\ncategories: hexo\ntags: [hexo,hexo搭建]\n---\n\n##**1、安装Git**\n\nwindows下推荐安装[msysgit](http://msysgit.github.io/)，安装步骤详情Google。\n\n##**2、安装Node.js**\n\n官网：[http://nodejs.org/](http://nodejs.org/)\n\n下载直接安装即可，不懂的自行google。\n\n<!-- more -->\n##**3、安装hexo**\n\n利用`npm`命令即可安装。 任意位置右键选择`git bash`，输入如下命令：\n\n\tnpm install -g hexo \n\n##**4、创建hexo文件夹**\n\nhexo安装完成后，在E盘建立文件夹，命名为blog，然后执行命令。\n\n\thexo init \n\nHexo会自动在目标文件夹建立网站所需的所有文件。\n\n##**5、本地查看**\n\n现在我们已经在本地搭建完Hexo博客，执行以下命令即可在本地查看。\n\n\thexo generate //生成博客文件\n\n\thexo server // 启动服务\n\n\n在浏览器输入`localhost:4000`即可查看。\n\n\n##**6、注册Github和创建repository**\n\n没有`Github`账号的请自行注册，我已经有账号，所有就不在注册。 在自己Github主页右下角，创建一个新的repository。比如我的Github账号是`zhdevelop`，那么我应该创建的repository名字应该是`zhdevelop.github.io`。\n\n\n##**7、部署**\n\n编辑`_config.yml`。\n\n\t# Deployment\n\t## Docs: http://zespia.tw/hexo/docs/deploy.html\n\tdeploy:\n  \ttype: github\n  \trepository: https://github.com/zhdevelop/zhdevelop.github.io.git\n  \tbranch: master\n\n执行以下指令完成部署。\n\n\thexo generate\n\thexo deploy\n\n\n注意： 每次修改本地文件后，需要`hex generate`才能保存。每次使用命令都必须在自己创建的文件夹目录下，如e:\\blog\n\n这样我们的博客就已经搭建完毕了。直接访问`http://zhdevelop.github.io/` 即可。\n\n##**8、tips**\n\nhexo现在支持更加简单的命令格式了，比如：\n\n\thexo g == hexo generate\n\thexo d == hexo deploy\n\thexo s == hexo server\n\thexo n == hexo new\n\n\n\n","mtime":1386217814000,"source":"_posts/hexo-guide-two.md"},"f3ckasekxbh0fe7c":{"_id":"f3ckasekxbh0fe7c","content":"title: Markdown学习指南\ndate: 2013-12-05 09:32:24\ncategories: markdown\ntags: [markdown指南]\n---\n##**1、Markdown介绍**\n\nMarkdown是一种轻量级标记语言，允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XTHML文档。\n\n**优点：**\n\n- 纯文本，所以兼容性极强，可以用所有文本编辑器打开。\n- 让你专注于文字而不是排版。\n- 格式转换方便，Markdown 的文本你可以轻松转换为 html、电子书等。\n- Markdown 的标记语法有极好的可读性。\n\n<!-- more -->\n\n##**2、Markdown简明语法**\n\n###**基本符号**\n- `*`,`-`,`+` 3个符号效果都一样，这3个符号被称为 Markdown符号\n- 空白行表示另起一个段落\n- ` ` ` 是表示inline代码，`tab`是用来标记 代码段，分别对应html的`code`，`pre`标签\n\n###**换行**\n- 单一段落(`<p>`)用一个空白行\n- 连续两个空格 会变成一个 <br>\n- 连续3个符号，然后是空行，表示 hr横线\n\n###**标题**\n在Markdown中，只需要在文本前面加上 `# `即可。同理、你还可以增加二级标题、三级标题、四级标题、五级标题和六级标题，总共六级，只需要增加  `#`即可，标题字号相应降低。\n\n\t# 这是一级标题\n\t## 这是二级标题\n\n\n注：# 和「一级标题」之间建议保留一个字符的空格，这是最标准的 Markdown 写法。\n<img src=\"/img/2013/12/markdown-biaoti.jpg\"/>\n\n###**引用**\n\n在我们写作的时候经常需要引用他人的文字，这个时候引用这个格式就很有必要了，在Markdown中，你只需要在你希望引用的文字前面加上 > 就好了，例如：\n\n> 大风起兮云飞扬，壮士去兮不复返！\n\n注：> 和文本之间要保留一个字符的空格。\n\n![](/img/2013/12/markdown-yinyong.jpg)\n\n###**列表**\n\n列表格式也很常用，在Markdown中，你只需要在文字前面加上 `-`即可。\n\n\n\t- 文本1\n\t- 文本2\n\t- 文本3\n\n\n如果你希望有序列表，也可以在文字前面加上 `1. 2. 3.`就可以了，例如：\n\n\t1. 文本1\n\t2. 文本2\n\t3. 文本3\n\n\n注：`-`、`1.`和文本之间要保留一个字符的空格。\n\n<img src=\"/img/2013/12/markdown-liebiao.jpg\"/>\n\n\n###**链接**\n\n在 Markdown 中，插入链接不需要其他按钮，你只需要使用 `[显示文本](链接地址)` 这样的语法即可，例如：\n\n[Hello World](http://zhdevelop.github.io)\n\n###**插入图片**\n\n和插入链接类似，你只需要使用 `![](图片链接地址)` 这样的语法即可，例如：\n\n\t![](/img/markdown-liebiao.jpg) (推荐)\n\n或者\n\n\t<img src=\"/img/markdown-liebiao.jpg\"/>\n\n###**粗体和斜体**\n\nMarkdown 的粗体和斜体也非常简单，用两个 `*` 包含一段文本就是粗体的语法，用一个 `*` 包含一段文本就是斜体的语法。\n\n\t*大风起兮云飞扬，**壮士**去兮不复返！*\n\n*大风起兮云飞扬，**壮士**去兮不复返！*\n\n###**特殊符号**\n- 用` \\ `来转义，表示文本中的markdown符号\n- 可以在文本种直接使用html标签，但是要注意在使用的时候，前后加上空行\n- 文本前后各加一个符号，表示斜体\n\n\n###**表格**\n可以使用html格式进行编写。\n在线处理：[http://pressbin.com/tools/excel_to_html_table/index.html](http://pressbin.com/tools/excel_to_html_table/index.html)\n\n参考链接：[http://www.ituring.com.cn/article/3452](http://www.ituring.com.cn/article/3452)\n\n##**参考文献：**\n1.[鲁塔弗：markdown 简明语法](http://lutaf.com/markdown-simple-usage.htm)\n2.[图灵社区：怎样使用Markdown](http://www.ituring.com.cn/article/23)\n3.[简书：献给写作者的 Markdown 新手指南](http://jianshu.io/p/q81RER)\n4.[官方文档(中文版)：Markdown 语法说明](http://wowubuntu.com/markdown/#p)\n\n##**编辑器推荐:**\n- [简书](http://jianshu.io/)\n- []MaDe (Chrome插件)](https://chrome.google.com/webstore/detail/made/oknndfeeopgpibecfjljjfanledpbkog)\n\n\n","mtime":1386395282000,"source":"_posts/markdown-guide.md"},"4goo48i0xedykmtx":{"_id":"4goo48i0xedykmtx","content":"layout: false\n---\n\n<!Doctype html>\n<html>\n<head>\n\t<meta charset=\"utf-8\" />\n\t<title>404 公益</title>\n\t<link rel=\"stylesheet\" href=\"/css/style.css\" media=\"screen\" type=\"text/css\">\n</head>\n<body style='margin:0 auto;width:640px;'>\n\n<iframe scrolling='no' frameborder='0' src='http://yibo.iyiyun.com/js/yibo404/key/1' width='640' height='462' style='display:block;'></iframe>\n\n<div style=\"padding:10px;text-align:center;\">\n<a href=\"http://zhujunwang.cn/\">博客首页 </a> \n<a href=\"http://zhujunwang.cn/archives/\">存档页</a>\n</div>\n\n</body></html>","mtime":1386226202000,"source":"404.html"},"6y57ada58fst3pmk":{"_id":"6y57ada58fst3pmk","content":"title: 使用Github管理Blog\ndate: 2013-12-05 16:19:46\ncategories: hexo\ntags: [github,blog管理]\n---\n使用Github主要是考虑到不同电脑之间的数据同步，不然换台电脑，没有博客源程序，那就哭死都没用啦。\n\n##**推送本地的Blog文件夹到github**\n\n1.在github建立repositories，名字为命名为`blog`（你用hexo init的文件夹名）\n2.在本地进入`blog`文件夹，`git init`建立仓库\n3.建立`.gitignore`文件，里面填写`/public`（由于public每次generate都会更新，故此忽略pulic文件夹的git管理）<!-- more -->\n4.用命令`git add .`告诉git，把所有文件添加到仓库\n5.用命令`git commit -m \"add all files\"`把文件提交倒仓库\n6.把本机仓库的内容推送到github仓库：\n\n{%codeblock lang:html%}\ngit remote add origin git@github.com:zhdevelop/blog.git\ngit push -u origin master\n{%endcodeblock%}\n\n##**使用github管理hexo的source**\n1.写博客后，`git add <file>`添加到代码库\n2.提交当前修改作为一个记录：`git commit -m` 修改了<修改的文件>，原因是：……。\n3.更新代码：`git push`\n4.在另一电脑，`git clone <address>`：复制代码库到本地。\n5.当远端github有更新时，`git pull`：从远程同步代码库到本地。\n\n每次手工去输入git命令实在是麻烦，推荐大家使用[TortoiseGit](http://code.google.com/p/tortoisegit/)来管理。","mtime":1386232169000,"source":"_posts/use-github-to-manage-blog.md"},"0du3oaf118cgyvva":{"_id":"0du3oaf118cgyvva","content":"title: 如何选择开源许可？\ndate: 2013-12-05 16:34:45\ncategories: [开源世界]\ntags:  [开源许可,GPL, BSD, MIT, Mozilla, Apache, LGPL]\n---\n世界上的开源许可证，大概有[上百种](http://www.gnu.org/licenses/license-list.html)。很少有人搞得清楚它们的区别。\n即使在最流行的六种——[GPL](http://www.gnu.org/licenses/gpl.html)、[BSD](http://en.wikipedia.org/wiki/BSD_licenses)、[MIT](http://en.wikipedia.org/wiki/MIT_License)、[Mozilla](http://www.mozilla.org/MPL/)、[Apache](http://www.apache.org/licenses/LICENSE-2.0)和[LGPL](http://www.gnu.org/copyleft/lesser.html)——之中做选择，也很复杂。\n\n乌克兰程序员Paul Bagwell，画了一张分析图，说明应该怎么选择，阮一峰做了翻译。\n<!-- more -->\n这是我见过的最简单的讲解，只用两分钟，你就能搞清楚这六种许可证之间的最大区别。\n\n![](/img/2013/12/free_software_licenses.png)\n\n","mtime":1386292629000,"source":"_posts/how-to-choose-the-open-source-license.md"},"dmmrpphe4m6727wc":{"_id":"dmmrpphe4m6727wc","content":"title: \"001_Java基础\"\nid: 993\ndate: 2013-08-09 05:26:22\ntags: \ncategories: \n- JAVA\n---\n\n<style type=\"text/css\" id=\"wiz_custom_css\">body{    font-family: \"Microsoft YaHei UI\",\"Microsoft YaHei\",SimSun,\"Segoe UI\",Tahoma,Helvetica,Sans-Serif,\"Microsoft YaHei\", Georgia,Helvetica,Arial,sans-serif,宋体, PMingLiU,serif;    font-size: 10.5pt;    line-height: 1.5;}html, body{        }h1 {    font-size:1.5em;    font-weight:bold;}h2 {    font-size:1.4em;    font-weight:bold;}h3 {    font-size:1.3em;    font-weight:bold;}h4 {    font-size:1.2em;    font-weight:bold;}h5 {    font-size:1.1em;    font-weight:bold;}h6 {    font-size:1.0em;    font-weight:bold;}img {    border:0;    max-width: 100%;}blockquote {    margin-top:0px;    margin-bottom:0px;}</style><meta http-equiv=\"X-UA-Compatible\" content=\"IE=8\" /><title>001_Java基础</title><!--more-->\n\n<span style=\"font-family: &#39;AR PL UMing TW&#39;; font-size: 14px;\">\n</span>\n\n<span style=\"font-size: 14px;\"><span style=\"font-size: 18px; font-family: &#39;AR PL UMing TW&#39;;\">2、Java语言</span>规范</span>\n\n<span style=\"font-size: 14px;\">&nbsp;&nbsp;&nbsp;&nbsp;Java language Sspecification，是对语言的技术定义，包括java程序设计语言的语法和语义。\n</span>\n\n<span style=\"font-size: 14px;\">2、应用程序接口</span>\n\n<span style=\"font-size: 14px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Applicaiton Program Interface，API，包括为开发JAVA程序而定义的类和接口。JAVA语言规范是稳定的，但是API一直在扩展。</span>\n\n<span style=\"font-size: 14px;\">3、版本</span>\n\n*   <span style=\"font-size: 14px;\">JAVA标准版（Java Standard Edition，Java SE）：开发客户端独立的应用程序或applet;</span>\n\n*   <span style=\"font-size: 14px;\">JAVA企业版（Java Enterprise Edition，Java EE）：开发服务器端的应用程序;</span>\n\n*   <span style=\"font-size: 14px;\">JAVA微型版（Java Micro Edition，Java ME）：开发移动设备的应用程序;</span>\n\n<span style=\"font-size: 14px;\">\n</span>\n\n<span style=\"font-size: 14px;\">4、Java开发工具包\n</span>\n\n<span style=\"font-size: 14px;\">&nbsp;&nbsp;&nbsp;&nbsp;Java Development Toolkit，JDK。 JDK是一套独立程序构成的集合，每个程序都是从命令行调用的，用于开发和测试java程序。\n</span>\n\n<span style=\"font-size: 14px;\">\n</span>\n\n<span style=\"font-size: 14px;\">5、简单的java程序</span>\n\npublic class HelloWorld {\n\n<span class=\"Apple-tab-span\" style=\"white-space:pre\">\t</span>//定义主方法，程序都是从main方法开始执行，方法是包含语句的结构体\n\n<span class=\"Apple-tab-span\" style=\"white-space:pre\">\t</span>public static void main(String[] args) {\n\n<span class=\"Apple-tab-span\" style=\"white-space:pre\">\t\t</span>//主方法所包含的语句，每条语句都是用分号（;）结束\n\n<span class=\"Apple-tab-span\" style=\"white-space:pre\">\t\t</span>System.out.println(&quot;Hello World ! Welcome to learing JAVA .&quot;);\n\n<span class=\"Apple-tab-span\" style=\"white-space:pre\">\t</span>}\n\n}\n\n6、创建、编译和执行java程序\n\n&nbsp;&nbsp;&nbsp;&nbsp;在程序执行之前，必须创建程序并进行编译，这是一个反复的过程。源文件的扩展名必须是.java，且文件名必须和公用类名完全相同。\n\n&nbsp;&nbsp;&nbsp;&nbsp;java编译器将java源文件翻译成java字节码文件。如：javac HelloWorld.java\n\n&nbsp;&nbsp;&nbsp;&nbsp;如果没有语法错误，编译器（compiler）就会生产一个扩展名为.class的字节码文件。如：HelloWorld.java\n\n&nbsp;&nbsp;&nbsp;&nbsp;JAVA语言是高级语言，java字节码是低级语言，可以在任何带有java虚拟机的平台上运行。虚拟机是一个解释java字节码的程序。\n\n&nbsp;&nbsp;&nbsp;&nbsp;解释的过程就是一次将字节码中单独的一步翻译为目标机器语言代码。\n\n<div>[来自为知笔记(Wiz)](http://www.wiz.cn/i/bf10110a \"来自为知笔记(Wiz)\")</div>","mtime":1386290932000,"source":"_posts/001_java基础.md"},"webs83g6koizqav2":{"_id":"webs83g6koizqav2","content":"title: \"10步让你成为更优秀的程序员\"\nid: 547\ndate: 2013-02-07 14:23:09\ntags: \n- 程序员\ncategories: \n- 程序人生\n---\n\n这篇文章要介绍的，是我作为专业程序员这些年来学到的能真正提高我的代码质量和整体工作效率的10件事情。\n\n### 1\\. 永远不要复制代码\n\n不惜任何代价避免重复的代码。如果一个常用的代码片段出现在了程序中的几个不同地方，重构它，把它放到一个自己的函数里。重复的代码会导致你的同事在读你的代码时产生困惑。而重复的代码如果在一个地方修改，在另外一个地方忘记修改，就会产生到处是bug，它还会使你的代码体积变得臃肿。现代的编程语言提供了很好的方法来解决这些问题，例如，下面这个问题在以前很难解决，而如今使用lambdas却很好实现：<!-- more -->\n<pre>\n/// <summary>\n/// 一些函数含有部分重复代码\n/// </summary>\nvoid OriginalA()\n{\n\tDoThingsA();\n\n\t// unique code\n\n\tDoThingsB();\n}\n\n/// <summary>\n/// 另外一个含有部分重复代码的函数\n/// </summary>\nvoid OriginalB()\n{\n\tDoThingsA();\n\n\t// 没有重复的代码\n\n\tDoThingsB();\n}\n</pre>\n现在我们重构含有部分相同代码的函数，用delegate模式重写它们：\n<pre>\n/// <summary>\n/// Encapsulate shared functionality\n/// </summary>\n/// <param name=\"action\">User defined action</param>\nvoid UniqueWrapper(Action action)\n{\n\tDoThingsA();\n\n\taction();\n\n\tDoThingsB();\n}\n\n/// <summary>\n/// New implmentation of A\n/// </summary>\nvoid NewA()\n{\n\tUniqueWrapper(() =>\n\t{\n\t\t// unique code\n\t});\n}\n\n/// <summary>\n/// New implementation of B\n/// </summary>\nvoid NewB()\n{\n\tUniqueWrapper(() =>\n\t{\n\t\t// unique code\n\t});\n}\n</pre>\n\n### 2\\. 留意你开始分心的时候\n\n当你发现自己在浏览facebook或微博、而不是在解决问题，这通常是一种你需要短暂休息的信号。离开办公桌，去喝一杯咖啡，或去跟同事聊5分钟。尽管这样做看起来有点反直觉，但长久去看，它会提高你的工作效率。\n\n### 3\\. 不要匆忙赶任务而放弃原则\n\n当带着压力去解决一个问题或修改一个bug，你很容易失去自制，发现自己匆匆忙忙，甚至完全忘了一直坚持的重要的测试过程。这通常会导致更多的问题，会让你在老板或同事眼里显得很不专业。\n\n### 4\\. 测试你完成的代码\n\n你知道你的代码能做什么，而且试了一下，它确实好用，但你实际上需要充分的验证它。分析所有可能的边界情况，测试在所有可能的条件下它都能如期的工作。如果有参数，传递一些预期范围外的值。传递一个null值。如果可能，让同事看看你的代码，问他们能否弄坏它。[单元测试](http://en.wikipedia.org/wiki/Unit_testing)是到达这种目的的常规方法。\n\n### 5\\. 代码审查\n\n提交你的代码之前，找个同事一起坐下来，向他解释你做了哪些修改。通常，这样做的过程中你就能发现代码中的错误，而不需要同事说一句话。这比自己审查自己的代码要有效的多得多。\n\n### 6\\. 让代码更少\n\n如果你发现写了大量的代码来解决一个简单的问题，你很可能做错了。下面的boolean用法是一个很好的例子：\n<pre>\nif (numMines > 0)\n{\n   enabled=true;\n}\nelse\n{\n   enabled=false;\n}\n</pre>\n这时你应该写成这样：\n<pre>\nenabled = numMines > 0;\n</pre>\n代码越少越好。这会使bug更少，重构可能性更小，出错的几率更小。要适度。可读性同等重要，你可不能这样做而使代码丧失可读性。\n\n### 7\\. 为优雅的代码而努力\n\n优雅的代码非常的易读，只用手边很少的代码、让机器做很少的运算就能解决问题。在各种环境中都做到代码优雅是很难的，但经过一段时间的编程，你会对优雅的代码是个什么样子有个初步的感觉。优雅的代码不会通过重构来获得。当你看到优雅的代码是会很高兴。你会为它自豪。例如，下面就是一个我认为是优雅的方式来计算多边形面积的方法：\n<pre>\nstatic public double GetConvexPolygonArea(Vector2[] vertices)\n{\n\tdouble area = 0;\n\tfor (int i = 0; i < vertices.Length; i++)\n\t{\n\t\tVector2 P0 = vertices[i];\n\t\tVector2 P1 = vertices[(i + 1) % vertices.Length];\n\n\t\tarea += P0.Wedge(P1);\n\t}\n\n\treturn area / 2;\n}\n</pre>\n\n### 8\\. 编写不言自明的代码\n\n勿庸置疑，注释是编程中很重要的一部分，但能够不言自明的代码跟胜一筹，因为它能让你在看代码时就能理解它。函数名变量名要慎重选择，好的变量/方法名字放到语言语义环境中时，不懂编程的人都能看懂。例如：\n<pre>\nvoid DamagePlayer(Player player, int damageAmount)\n{\n\tif (!player.m_IsInvincible && !player.m_IsDead)\n\t{\n\t\tplayer.InflictDamage( damageAmount );\n\t}\n}\n</pre>\n能自我说明的代码不能代替注释。注释是用来解释“为什么”的，而自我说明的代码是来描述“是什么”的。\n\n### 9\\. 不要使用纯数字\n\n直接把数字嵌入代码中是一种恶习，因为无法说明它们是代表什么的。当有重复时更糟糕——相同的数字在代码的多个地方出现。如果只修改了一个，而忘记了其它的。这就导致bug。一定要用一个命名常量来代表你要表达的数字，即使它在代码里只出现一次。\n\n### 10\\. 不要做手工劳动\n\n当做一系列动作时，人类总是喜欢犯错误。如果你在做部署工作，并且不是一步能完成的，那你就是在做错事。尽量的让工作能自动化的完成，减少人为错误。当做工作量很大的任务时，这尤其重要。\n\n### 11\\. 避免过早优化\n\n当你要去优化一个已经好用的功能代码时，你很有可能会改坏它。优化只能发生在有性能分析报告指示需要优化的时候，通常是在一个项目开发的最后阶段。性能分析之前的优化活动纯属浪费时间，并且会导致bug出现。\n\n好吧，我说是10个，但你却得到了额外赠送的一个！\n\n这些就是我要说的，我希望它们能帮助你改进编程开发过程。\n\n下次再见！祝快乐！\n\nCheers, Paul.\n<div class=\"post_source\">[英文原文：[10 steps to becoming a better programmer](http://www.wildbunny.co.uk/blog/2012/11/01/10-steps-to-becoming-a-better-programmer/) ]</div>","mtime":1386295788000,"source":"_posts/10步让你成为更优秀的程序员.md"},"jujs7qj5mweyzmdp":{"_id":"jujs7qj5mweyzmdp","content":"title: \"CentOS 6.4 安装VMware Tools \"\nid: 934\ndate: 2013-09-23 16:32:49\ntags: \n- VMware Tools\ncategories: \n- linux\n---\n\n1、在VMWare图形界面中，将CentOS光驱设定为D:\\Program Files (x86)\\VMware\\VMware Workstation\\linux.iso，根据你的VM安装目录进行设定；\n<!-- more -->\n2、挂载光驱\n<div>mount -t auto /dev/cdrom /mnt/cdrom  这命令就是把CentOS CDROM挂载在/mnt/cdrom目录中，就可以访问里面的内容了；</div>\n<div></div>\n<div>3、可能发生的问题：\n<div>/mnt/cdrommount: mount point /mnt/cdrom does not exist --/mnt/cdrom目录不存在，需要先创建。</div>\n<div></div>\n<div>[root@hanfeng/]# cd /mnt</div>\n<div>[root@hanfeng/]# mkdir -p /mnt/cdrom  <wbr />--创建/mnt/cdrom目录</div>\n<div>[root@hanfeng/]# mount -t auto /dev/cdrom /mnt/cdrom  <wbr />--挂载CentOS CDROM挂载mount: block device /dev/cdrom is write-protected, mounting read-only --挂载成功。</div>\n<div></div>\n<div>4、\n<div>使用光驱中的文件，进行安装</div>\n<div></div>\n<div>[root@hanfeng/]# cd /mnt/cdrom</div>\n<div>[root@hanfeng /]# ls -a</div>\n<div>[root@hanfeng/]# cp VMwareTools-8.6.1-19175.tar.gz /tmp</div>\n<div>[root@hanfeng/]# cd /tmp</div>\n<div>[root@hanfeng/]# tar zxpf VMwareTools-8.6.1-19175.tar.gz</div>\n<div>[root@hanfeng /]# cd vmware-tools-distrib</div>\n<div>[root@hanfeng vmware-tools-distrib]# ./vmware-install.pl</div>\n<div>Creating a new installer database using the tar3 format.</div>\n<div></div>\n<div>Installing the content of the package.</div>\n</div>\n</div>\n<div></div>\n<div># 安装过程的画面，全部使用默认值，一直按 Enter 就对了</div>\n<div></div>\n<div>一直到出现：</div>\n<div>To use the vmxnet driver, restart networking using the following commands:</div>\n<div>/etc/init.d/network stop</div>\n<div>rmmod pcnet32</div>\n<div>rmmod vmxnet</div>\n<div>depmod -a</div>\n<div>modprobe vmxnet</div>\n<div>/etc/init.d/network start</div>\n<div></div>\n<div>Enjoy,</div>\n<div></div>\n<div>--the VMware team</div>\n<div></div>\n<div>出现以上，则基本安装完!</div>\n<div></div>\n<div>5 shutdown -r now 重启</div>\n<div></div>\n<div>6 重新启动计算机再次登入之后，我们就会发觉到，当我们要离开 Guest OS 的时候，不再需要按「Ctrl + Alt」</div>\n&nbsp;","mtime":1386295853000,"source":"_posts/centos-6-4-安装vmware-tools.md"},"jx4t4b0pap1d1cfm":{"_id":"jx4t4b0pap1d1cfm","content":"title: \"github简单使用教程\"\nid: 533\ndate: 2013-01-24 15:26:49\ntags: \ncategories: \n- Git\n---\n\n【百科】\nGit是一个分布式的版本控制系统，最初由Linus Torvalds编写，用作Linux内核代码的管理。在推出後，Git在其它项目中也取得了很大成功，尤其是在Ruby社区中。目前，包括Rubinius和Merb在内的很多知名项目都使用了Git。Git同样可以被诸如Capistrano和Vlad the Deployer这样的部署工具所使用。\n\nGitHub首页 [https://github.com](https://github.com/)","mtime":1386294420000,"source":"_posts/github-simple-tutorial.md"},"vmv4jdt5lob2ra8s":{"_id":"vmv4jdt5lob2ra8s","content":"title: \"Google服务本地代理hosts绑定\"\nid: 848\ndate: 2013-06-11 13:50:14\ntags: \ncategories: \n- 互联网\n---\n\n服务器是设在国内的镜像服务器，访问速度比直接访问主站快4倍，国内ping延迟50ms左右，一般访问主站要200ms+\n\n&lt;pre&gt;\n\n203.208.46.141 www.google.com www.google.com.hk webcache.googleusercontent.com news.google.com.hk news.google.com picasaweb.google.com sites.google.com video.google.com\n203.208.46.141 mail.google.com mail-attachment.googleusercontent.com ssl.gstatic.com www.gstatic.com chatenabled.mail.google.com\n203.208.46.141 plus.google.com id.google.com.hk id.google.com apis.google.com csi.gstatic.com plusone.google.com\n203.208.46.141 accounts.google.com.hk accounts.google.com accounts.youtube.com talkgadget.google.com images-pos-opensocial.googleusercontent.com\n203.208.46.141 lh9.googleusercontent.com lh8.googleusercontent.com lh7.googleusercontent.com lh6.googleusercontent.com lh5.googleusercontent.com lh4.googleusercontent.com lh3.googleusercontent.com lh2.googleusercontent.com lh1.googleusercontent.com lh0.googleusercontent.com\n203.208.46.141 lh9.googleusercontent.com.hk lh8.googleusercontent.com.hk lh7.googleusercontent.com.hk lh6.googleusercontent.com.hk lh5.googleusercontent.com.hk lh4.googleusercontent.com.hk lh3.googleusercontent.com.hk lh2.googleusercontent.com.hk lh1.googleusercontent.com.hk lh0.googleusercontent.com.hk\n203.208.46.141 s9.googleusercontent.com s8.googleusercontent.com s7.googleusercontent.com s6.googleusercontent.com s5.googleusercontent.com s4.googleusercontent.com s3.googleusercontent.com s2.googleusercontent.com s1.googleusercontent.com s0.googleusercontent.com\n203.208.46.141 s9.googleusercontent.com.hk s8.googleusercontent.com.hk s7.googleusercontent.com.hk s6.googleusercontent.com.hk s5.googleusercontent.com.hk s4.googleusercontent.com.hk s3.googleusercontent.com.hk s2.googleusercontent.com.hk s1.googleusercontent.com.hk s0.googleusercontent.com.hk\n203.208.46.141 chrome.google.com fonts.googleapis.com ssl.google-analytics.com ssl.google-analytics.com.hk code.google.com docs.google.com drive.google.com groups.google.com feedproxy.google.com\n203.208.46.141 calendar.google.com maps.gstatic.cn maps.gstatic.com ditu.google.cn\n203.208.46.141 encrypted-tbn0.gstatic.com encrypted-tbn1.gstatic.com encrypted-tbn2.gstatic.com encrypted-tbn3.gstatic.com encrypted-tbn4.gstatic.com encrypted-tbn5.gstatic.com encrypted-tbn6.gstatic.com encrypted-tbn7.gstatic.com encrypted-tbn8.gstatic.com encrypted-tbn9.gstatic.com\n203.208.46.141 mt0.google.com mt1.google.com mt2.google.com mt3.google.com mt4.google.com mt5.google.com mt6.google.com mt7.google.com mt8.google.com mt9.google.com\n203.208.46.141 mt0.google.cn mt1.google.cn mt2.google.cn mt3.google.cn mt4.google.cn mt5.google.cn mt6.google.cn mt7.google.cn mt8.google.cn mt9.google.cn\n203.208.46.141 clients0.google.com clients1.google.com clients2.google.com clients3.google.com clients4.google.com clients5.google.com clients6.google.com clients7.google.com clients8.google.com clients9.google.com\n203.208.46.141 clients0.google.com.hk clients1.google.com.hk clients2.google.com.hk clients3.google.com.hk clients4.google.com.hk clients5.google.com.hk clients6.google.com.hk clients7.google.com.hk clients8.google.com.hk clients9.google.com.hk\n\n&lt;/pre&gt;\n\n如果141这个D段有问题，可以更换为 142-147，即 203.208.46.142，203.208.46.143，203.208.46.144都可以","mtime":1386290932000,"source":"_posts/google服务本地代理hosts绑定.md"},"sa3afm3r0iu55qn9":{"_id":"sa3afm3r0iu55qn9","content":"title: \"HTML 基础教程--元素\"\nid: 544\ndate: 2013-01-28 16:54:32\ntags: \n- html\ncategories: \n- html\n- 网页前端\n---\n\n<div id=\"intro\">\n\n**HTML 文档是由 HTML 元素定义的。**\n\n</div>\n<div>\n\n## HTML 元素\n\nHTML 元素指的是从开始标签（start tag）到结束标签（end tag）的所有代码。\n<table class=\"dataintable\">\n<tbody>\n<tr>\n<th style=\"width: 33%;\">开始标签</th>\n<th style=\"width: 33%;\">元素内容</th>\n<th>结束标签</th>\n</tr>\n<tr>\n<td>&lt;p&gt;</td>\n<td>This is a paragraph</td>\n<td>&lt;/p&gt;</td>\n</tr>\n<tr>\n<td>&lt;a href=\"default.htm\" &gt;</td>\n<td>This is a link</td>\n<td>&lt;/a&gt;</td>\n</tr>\n<tr>\n<td>&lt;br /&gt;</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n\n<span>注释：</span>开始标签常被称为开放标签（opening tag），结束标签常称为闭合标签（closing tag）。\n\n</div>\n<div>\n\n## HTML 元素语法\n\n*   HTML 元素以_开始标签_起始\n*   HTML 元素以_结束标签_终止\n*   _元素的内容_是开始标签与结束标签之间的内容\n*   某些 HTML 元素具有_空内容（empty content）_\n*   空元素_在开始标签中进行关闭_（以开始标签的结束而结束）\n*   大多数 HTML 元素可拥有_属性_\n\n<span>提示：</span>您将在本教程的下一章中学习更多有关属性的内容。\n\n</div>\n<div>\n\n## 嵌套的 HTML 元素\n\n大多数 HTML 元素可以嵌套（可以包含其他 HTML 元素）。\n\nHTML 文档由嵌套的 HTML 元素构成。\n\n### HTML 文档实例\n\n<pre>\n<html>\n\n<body>\n\nThis is my first paragraph.\n\n</body>\n\n</html>\n</pre>\n上面的例子包含三个 HTML 元素。\n\n</div>\n<div>\n\n## HTML 实例解释\n\n### &lt;p&gt; 元素：\n\n<pre>\n\nThis is my first paragraph.\n\n</pre>\n这个 &lt;p&gt; 元素定义了 HTML 文档中的一个段落。\n\n这个元素拥有一个开始标签 &lt;p&gt;，以及一个结束标签 &lt;/p&gt;。\n\n元素内容是：This is my first paragraph。\n\n### &lt;body&gt; 元素：\n\n<pre>\n<body>\n\nThis is my first paragraph.\n\n</body>\n</pre>\n&lt;body&gt; 元素定义了 HTML 文档的主体。\n\n这个元素拥有一个开始标签 &lt;body&gt;，以及一个结束标签 &lt;/body&gt;。\n\n元素内容是另一个 HTML 元素（p 元素）。\n\n### &lt;html&gt; 元素：\n\n<pre>\n<html>\n\n<body>\n\nThis is my first paragraph.\n\n</body>\n\n</html>\n</pre>\n&lt;html&gt; 元素定义了整个 HTML 文档。\n\n这个元素拥有一个开始标签 &lt;html&gt;，以及一个结束标签 &lt;/html&gt;。\n\n元素内容是另一个 HTML 元素（body 元素）。\n\n</div>\n<div>\n\n## 不要忘记结束标签\n\n即使您忘记了使用结束标签，大多数浏览器也会正确地显示 HTML：\n<pre>\n\nThis is a paragraph\n<p>This is a paragraph</pre>\n上面的例子在大多数浏览器中都没问题，但不要依赖这种做法。忘记使用结束标签会产生不可预料的结果或错误。\n<p class=\"note\"><span>注释：</span>未来的 HTML 版本不允许省略结束标签。\n\n</div>\n<div>\n\n## 空的 HTML 元素\n\n没有内容的 HTML 元素被称为空元素。空元素是在开始标签中关闭的。\n\n&lt;br&gt; 就是没有关闭标签的空元素（&lt;br&gt; 标签定义换行）。\n\n在 XHTML、XML 以及未来版本的 HTML 中，所有元素都必须被关闭。\n\n在开始标签中添加斜杠，比如 &lt;br /&gt;，是关闭空元素的正确方法，HTML、XHTML 和 XML 都接受这种方式。\n\n即使 &lt;br&gt; 在所有浏览器中都是有效的，但使用 &lt;br /&gt; 其实是更长远的保障。\n\n</div>\n<div>\n\n## HTML 提示：使用小写标签\n\nHTML 标签对大小写不敏感：&lt;P&gt; 等同于 &lt;p&gt;。许多网站都使用大写的 HTML 标签。\n\nW3School 使用的是小写标签，因为万维网联盟（W3C）在 HTML 4 中_推荐_使用小写，而在未来 (X)HTML 版本中_强制_使用小写。\n\n</div>","mtime":1386290932000,"source":"_posts/html-基础教程-元素.md"},"vmlhvrs907mz6jyp":{"_id":"vmlhvrs907mz6jyp","content":"title: \"HTML 基础教程–基础\"\nid: 540\ndate: 2013-01-28 11:24:06\ntags: \n- html\n- web开发\ncategories: \n- html\n- 网页前端\n---\n\n<div>\n\n## HTML 标题\n\nHTML 标题（Heading）是通过 &lt;h1&gt; - &lt;h6&gt; 等标签进行定义的。\n\n### 实例\n\n<pre>\n\n# This is a heading\n\n## This is a heading\n\n### This is a heading\n\n</pre>\n</div>\n<div>\n\n## HTML 段落\n\nHTML 段落是通过 &lt;p&gt; 标签进行定义的。\n\n### 实例\n\n<pre>\n\nThis is a paragraph.\n\nThis is another paragraph.\n\n</pre>\n</div>\n<div>\n\n## HTML 链接\n\nHTML 链接是通过 &lt;a&gt; 标签进行定义的。\n\n### 实例\n\n<pre>[This is a link](http://www.w3school.com.cn)</pre>\n\n<span>注释：</span>在 href 属性中指定链接的地址。\n\n</div>\n<div>\n\n## HTML 图像\n\nHTML 图像是通过 &lt;img&gt; 标签进行定义的。\n\n### 实例\n\n<pre>![](w3school.jpg)</pre>\n\n<span>注释：</span>图像的名称和尺寸是以属性的形式提供的。\n\n</div>","mtime":1386290932000,"source":"_posts/html-基础教程-基础.md"},"g6nrhrfb6db0eg5b":{"_id":"g6nrhrfb6db0eg5b","content":"title: \"HTML 基础教程--简介\"\nid: 538\ndate: 2013-01-28 11:14:28\ntags: \n- html\ncategories: \n- html\n- 网页前端\n---\n\n<div>\n\n# 什么是 HTML？\n\nHTML 是用来描述网页的一种语言。\n\n*   HTML 指的是超文本标记语言 (**H**yper **T**ext **M**arkup **L**anguage)\n*   HTML 不是一种编程语言，而是一种_标记语言_ (markup language)\n*   标记语言是一套_标记标签_ (markup tag)\n*   HTML 使用_标记标签_来描述网页\n</div>\n<div>\n\n# HTML 标签\n\nHTML 标记标签通常被称为 HTML 标签 (HTML tag)。\n\n*   HTML 标签是由_尖括号_包围的关键词，比如 &lt;html&gt;\n*   HTML 标签通常是_成对出现_的，比如 &lt;b&gt; 和 &lt;/b&gt;\n*   标签对中的第一个标签是_开始标签_，第二个标签是_结束标签_\n*   开始和结束标签也被称为_开放标签_和_闭合标签_\n</div>\n<div>\n\n# HTML 文档 = 网页\n\n*   HTML 文档_描述网页_\n*   HTML 文档_包含 HTML 标签_和纯文本\n*   HTML 文档也被称为_网页_\nWeb 浏览器的作用是读取 HTML 文档，并以网页的形式显示出它们。浏览器不会显示 HTML 标签，而是使用标签来解释页面的内容：\n\n</div>\n<pre>\n<html>\n<body>\n\n# My First Heading\n\nMy first paragraph.\n\n</body>\n</html>\n</pre>\n\n### 例子解释\n\n*   &lt;html&gt; 与 &lt;/html&gt; 之间的文本描述网页\n*   &lt;body&gt; 与 &lt;/body&gt; 之间的文本是可见的页面内容\n*   &lt;h1&gt; 与 &lt;/h1&gt; 之间的文本被显示为标题\n*   &lt;p&gt; 与 &lt;/p&gt; 之间的文本被显示为段落","mtime":1386290932000,"source":"_posts/html-基础教程-简介.md"},"oy0jrmz598is0vso":{"_id":"oy0jrmz598is0vso","content":"title: \"Linux学习路线指南\"\nid: 931\ndate: 2013-09-23 16:17:16\ntags: \ncategories: \n- linux\n---\n\n很多同学接触Linux不多，对Linux平台的开发更是一无所知。而现在的趋势越来越表明，作为一个优秀的软件开发人员，或计算机IT行业从业人员，掌握Linux是一种很重要的谋生资源与手段。下来我将会结合自己的几年的个人开发经验，及对 Linux，更是类UNIX系统，及开源软件文化，谈谈Linux的学习方法与学习中应该注意的一些事。\n<!-- more -->\n就如同刚才说的，很多同学以前可能连Linux是什么都不知道，对UNIX更是一无所知。所以我们从最基础的讲起，对于Linux及UNIX的历史我们不做多谈，直接进入入门的学习。\n\nLinux入门是很简单的，问题是你是否有耐心，是否爱折腾，是否不排斥重装一类的大修。没折腾可以说是学不好Linux的，鸟哥说过，要真正了解Linux的分区机制，对LVM使用相当熟练，没有20次以上的Linux装机经验是积累不起来的，所以一定不要怕折腾。\n\n由于大家之前都使用Windows，所以我也尽可能照顾这些“菜鸟”。我的推荐，如果你第一次接触Linux，那么首先在虚拟机中尝试它。虚拟机我推荐Virtual Box，我并不主张使用VM，原因是VM是闭源的，并且是收费的，我不希望推动盗版。当然如果你的Money足够多，可以尝试VM，但我要说的是即使是VM，不一定就一定好。付费的软件不一定好。首先，Virtual Box很小巧，Windows平台下安装包在80MB左右，而VM动辄600MB，虽然功能强大，但资源消耗也多，何况你的需求Virtual Box完全能够满足。所以，还是自己选。如何使用虚拟机，是你的事，这个我不教你，因为很简单，不会的话Google或Baidu都可以，英文好的可以直接看官方文档。\n\n现在介绍Linux发行版的知识。正如你所见，Linux发行版并非Linux，Linux仅是指操作系统的内核，作为科班出生的你不要让我解释，我也没时间。我推荐的发行版如下：\n\n*   UBUNTU适合纯菜鸟，追求稳定的官方支持，对系统稳定性要求较弱，喜欢最新应用，相对来说不太喜欢折腾的开发者。\n*   Debian，相对UBUNTU难很多的发行版，突出特点是稳定与容易使用的包管理系统，缺点是企业支持不足，为社区开发驱动。\n*   Arch，追逐时尚的开发者的首选，优点是包更新相当快，无缝升级，一次安装基本可以一直运作下去，没有如UBUNTU那样的版本概念，说的专业点叫滚动升级，保持你的系统一定是最新的。缺点显然易见，不稳定。同时安装配置相对Debian再麻烦点。\n*   Gentoo，相对Arch再难点，考验使用者的综合水平，从系统安装到微调，内核编译都亲历亲为，是高手及黑客显示自己技术手段，按需配置符合自己要求的系统的首选。\n*   Slackware与Gentoo类似。\n*   CentOS，社区维护的RedHat的复刻版本，完全使用RedHat的源码重新编译生成，与RedHat的兼容性在理论上来说是最好的。如果你专注于Linux服务器，如网络管理，架站，那么CentOS是你的选择。\n*   LFS，终极黑客显摆工具，完全从源代码安装，编译系统。安装前你得到的只有一份文档，你要做的就是照文档你的说明，一步步，一条条命令，一个个软件包的去构建你的Linux，完全由你自己控制，想要什么就是什么。如果你做出了LFS，证明你的Linux功底已经相当不错，如果你能拿LFS文档活学活用，再将Linux从源代码开始移植到嵌入式系统，我敢说中国的企业你可以混的很好。\n你得挑一个适合你的系统，然后在虚拟机安装它，开始使用它。如果你想快速学会Linux，我有一个建议就是忘记图形界面，不要想图形界面能不能提供你问题的答案，而是满世界的去找，去问，如何用命令行解决你的问题。在这个过程中，你最好能将Linux的命令掌握的不错，起码常用的命令得知道，同时建立了自己的知识库，里面是你积累的各项知识。\n\n再下个阶段，你需要学习的是Linux平台的C/C++开发，同时还有Bash脚本编程，如果你对Java兴趣很深还有Java。同样，建议你抛弃掉图形界面的IDE，从VIM开始，为什么是VIM，而不是Emacs，我无意挑起编辑器大战，但我觉得VIM适合初学者，适合手比较笨，脑袋比较慢的开发者。Emacs的键位太多，太复杂，我很畏惧。然后是GCC，Make，Eclipse（Java，C++或者）。虽然将C++列在了Eclipse中，但我并不推荐用IDE开发C++，因为这不是Linux的文化，容易让你忽略一些你应该注意的问题。IDE让你变懒，懒得跟猪一样。如果你对程序调试，测试工作很感兴趣，GDB也得学的很好，如果不是GDB也是必修课。这是开发的第一步，注意我并没有提过一句Linux系统API的内容，这个阶段也不要关心这个。你要做的就是积累经验，在Linux平台的开发经验。我推荐的书如下：C语言程序设计，谭浩强的也可以。C语言，白皮书当然更好。C++推荐C++ Primer Plus，Java我不喜欢，就不推荐了。工具方面推荐VIM的官方手册，GCC中文文档，GDB中文文档，GNU开源软件开发指导（电子书），汇编语言程序设计（让你对库，链接，内嵌汇编，编译器优化选项有初步了解，不必深度）。\n\n如果你这个阶段过不了就不必往下做了，这是底线，最基础的基础，否则离开，不要霍霍Linux开发。不专业的Linux开发者作出的程序是与Linux文化或UNIX文化相背的，程序是走不远的，不可能像Bash，VIM这些神品一样。所以做不好干脆离开。\n\n接下来进入Linux系统编程，不二选择，APUE，UNIX环境高级编程，一遍一遍的看，看10遍都嫌少，如果你可以在大学将这本书翻烂，里面的内容都实践过，有作品，你口头表达能力够强，你可以在面试时说服所有的考官。（可能有点夸张，但APUE绝对是圣经一般的读物，即使是Windows程序员也从其中汲取养分，Google创始人的案头书籍，扎尔伯克的床头读物。）\n\n这本书看完后你会对Linux系统编程有相当的了解，知道Linux与Windows平台间开发的差异在哪？它们的优缺点在哪？我的总结如下：做Windows平台开发，很苦，微软的系统API总在扩容，想使用最新潮，最高效的功能，最适合当前流行系统的功能你必须时刻学习。Linux不是，Linux系统的核心API就100来个，记忆力好完全可以背下来。而且经久不变，为什么不变，因为要同UNIX兼容，符合POSIX标准。所以Linux平台的开发大多是专注于底层的或服务器编程。这是其优点，当然图形是Linux的软肋，但我站在一个开发者的角度，我无所谓，因为命令行我也可以适应，如果有更好的图形界面我就当作恩赐吧。另外，Windows闭源，系统做了什么你更本不知道，永远被微软牵着鼻子跑，想想如果微软说Win8不支持QQ，那腾讯不得哭死。而Linux完全开源，你不喜欢，可以自己改，只要你技术够。另外，Windows虽然使用的人多，但使用场合单一，专注与桌面。而Linux在各个方面都有发展，尤其在云计算，服务器软件，嵌入式领域，企业级应用上有广大前景，而且兼容性一流，由于支持POSIX可以无缝的运行在UNIX系统之上，不管是苹果的Mac还是IBM的AS400系列，都是完全支持的。另外，Linux的开发环境支持也绝对是一流的，不管是C/C++，Java，Bash，Python，PHP，Javascript，。。。。。。就连C#也支持。而微软除Visual Stdio套件以外，都不怎么友好，不是吗？\n\n如果你看完APUE的感触有很多，希望验证你的某些想法或经验，推荐UNIX程序设计艺术，世界顶级黑客将同你分享他的看法。\n\n现在是时候做分流了。 大体上我分为四个方向：网络，图形，嵌入式，设备驱动。\n\n如果选择网络，再细分，我对其他的不是他熟悉，只说服务器软件编写及高性能的并发程序编写吧。相对来说这是网络编程中技术含量最高的，也是底层的。需要很多的经验，看很多的书，做很多的项目。\n\n我的看法是以下面的顺序来看书：\n\n1.  APUE再深读 – 尤其是进程，线程，IPC，套接字\n2.  多核程序设计 - Pthread一定得吃透了，你很NB\n3.  UNIX网络编程 – 卷一，卷二\n4.  TCP/IP网络详解 – 卷一 再看上面两本书时就该看了\n5.  5.TCP/IP 网络详解 – 卷二 我觉得看到卷二就差不多了，当然卷三看了更好，努力，争取看了\n6.  6.Lighttpd源代码 - 这个服务器也很有名了\n7.  7.Nginx源代码 – 相较于Apache，Nginx的源码较少，如果能看个大致，很NB。看源代码主要是要学习里面的套接字编程及并发控制，想想都激动。如果你有这些本事，可以试着往暴雪投简历，为他们写服务器后台，想一想全球的魔兽都运行在你的服务器软件上。\n8.  Linux内核 TCP/IP协议栈 – 深入了解TCP/IP的实现\n如果你还喜欢驱动程序设计，可以看看更底层的协议，如链路层的，写什么路由器，网卡，网络设备的驱动及嵌入式系统软件应该也不成问题了。\n\n当然一般的网络公司，就算百度级别的也该毫不犹豫的雇用你。只是看后面这些书需要时间与经验，所以35岁以前办到吧！跳槽到给你未来的地方！\n\n图形方向，我觉得图形方向也是很有前途的，以下几个方面。\n\n1.  Opengl的工业及游戏开发，国外较成熟。\n2.  影视动画特效，如皮克斯，也是国外较成熟。\n3.  GPU计算技术，可以应用在浏览器网页渲染上，GPU计算资源利用上，由于开源的原因，有很多的文档程序可以参考。如果能进火狐开发，或google做浏览器开发，应该会很好 。\n嵌入式方向：嵌入式方向没说的，Linux很重要。\n\n掌握多个架构，不仅X86的，ARM的，单片机什么的也必须得懂。硬件不懂我预见你会死在半路上，我也想走嵌入式方向，但我觉得就学校教授嵌入式的方法，我连学电子的那帮学生都竞争不过。奉劝大家，一定得懂硬件再去做，如果走到嵌入式应用开发，只能祝你好运，不要碰上像Nokia，Hp这样的公司，否则你会很惨的。\n\n驱动程序设计：软件开发周期是很长的，硬件不同，很快。每个月诞生那么多的新硬件，如何让他们在Linux上工作起来，这是你的工作。由于Linux的兼容性很好，如果不是太低层的驱动，基本C语言就可以搞定，系统架构的影响不大，因为有系统支持，你可能做些许更改就可以在ARM上使用PC的硬件了，所以做硬件驱动开发不像嵌入式，对硬件知识的要求很高。可以从事的方向也很多，如家电啊，特别是如索尼，日立，希捷，富士康这样的厂子，很稀缺的。\n\n1.  LDD – Linux驱动程序设计与内核编程的基础读物\n2.  深入理解Linux内核 – 进阶的\n3.  Linux源代码 – 永无止境的\n转载：[http://os.51cto.com/art/201211/365047.htm](http://os.51cto.com/art/201211/365047.htm)","mtime":1386295868000,"source":"_posts/linux学习路线指南.md"},"txmd17b87p5wdan7":{"_id":"txmd17b87p5wdan7","content":"title: \"Mac OSX Eclipse启动时报需要安装\\\"Java SE 6 Runtime\\\"致无法启动解决方案\"\nid: 978\ndate: 2013-10-27 16:33:11\ntags: \ncategories: \n- linux\n---\n\n这周末有时间把黑苹果从10.8.5升级到最新版本的10.9 ，不想在启动Eclipse的时候报错，这是个坑爹的错误。我系统明明已经安装了JDK7，按理不理该出错的吧。\n\n通过不断的Google终于找到了答案，系统本来是自带JDK1.6的，升级了居然被删除了，也就是不在带有1.6的版本。所以自己在官网下载最新版本安装，问题得以解决。\n\n下载地址：[http://support.apple.com/kb/DL1572?viewlocale=zh_CN](http://support.apple.com/kb/DL1572?viewlocale=zh_CN \"http://support.apple.com/kb/DL1572?viewlocale=zh_CN\")","mtime":1386290932000,"source":"_posts/mac-osx-eclipse启动时报需要安装java-se-6-runtime致无法启动解决方案.md"},"k8kcaztz7iz1dngc":{"_id":"k8kcaztz7iz1dngc","content":"title: \"Magento 1.7.2 下载和安装及语言包\"\nid: 943\ndate: 2013-10-06 18:49:22\ntags: \ncategories: \n- magento\n---\n\n社区版：[http://www.magentocommerce.com/download](http://www.magentocommerce.com/download)\n\n安装过程较为简单，不再阐述，不懂的自行google或百度。\n\n本地安装推荐使用XMAPP（[http://www.apachefriends.org/zh_cn/xampp.html](http://www.apachefriends.org/zh_cn/xampp.html)）或WAMP（[http://www.wampserver.com/en/](http://www.wampserver.com/en/)）环境。\n\n中文语言包：[http://www.magentocommerce.com/magento-connect/magento-chinese-translation-3408.html](http://www.magentocommerce.com/magento-connect/magento-chinese-translation-3408.html)\n\n安装key： http://connect20.magentocommerce.com/community/Mage_Locale_zh_CN\n\n然后就可以自由自在的挖掘magento的各种功能。\n","mtime":1386295284000,"source":"_posts/magento-1-7-2-下载和安装及语言包.md"},"o31cu0lrihk5xtre":{"_id":"o31cu0lrihk5xtre","content":"title: \"magento之Bluehost 如何同时运行PHP 5.2，PHP 5.3 和PHP 5.4\"\nid: 608\ndate: 2013-06-04 17:14:59\ntags: \ncategories: \n- magento\n---\n\n#### Bluehost 配置PHP环境\n\n1.  登录Bluehost的 cPanel。\n2.  选择 \"Software/Services\" 栏目下的 \"PHP Config\"。![Bluehost PHP config](https://tutorials.bluehost.com/help_media/services_php_config.jpg \"Bluehost PHP version config\")\n3.  选择hosting默认的PHP版本，其他版本的需要单独在.htaccess里设置，我默认就选择第一个PHP 5.2。\n<!-- more -->\n*   <span>PHP 5.2</span>\n*   <span>PHP 5.2 (Single php.ini)</span>\n*   <span>PHP 5.2 (FastCGI)</span>\n*   <span>PHP 5.3</span>\n*   <span>PHP 5.3 (Single php.ini)</span>\n*   <span>PHP 5.4</span>\n*   <span>PHP 5.4 (Single php.ini)</span>\n当上面的选择一个后，系统会默认备份public_html下的php.ini，另外会在.htaccess的头部添加选择的PHP版本。\n> &lt;FilesMatch \"\\.php$\"&gt;\n> AddHandler application/x-httpd-php5 .php\n> &lt;/FilesMatch&gt;\n这样系统所有的目录和域名都运行的是PHP 5.2版本，可以通过phpinfo()来查看。\n\n可以点击这里看看结果：[http://demo.drupal100.com/php52/phpinfo.php](http://demo.drupal100.com/php52/phpinfo.php)\n\n目前Bluehost的版本是PHP 5.2.17，是PHP 5.2 中最稳定的一个版本。\n\n&nbsp;\n\n#### 分别设置PHP 5.3 和PHP 5.4\n\n关键就在这里，如何设置一个目录或域名运行PHP 5.3？在.htaccess中加上如下代码。\n> &lt;FilesMatch \"\\.php$\"&gt;\n> AddHandler application/x-httpd-php53 .php\n> &lt;/FilesMatch&gt;\n可以点击这里看看结果：[http://demo.drupal100.com/php53/phpinfo.php](http://demo.drupal100.com/php53/phpinfo.php)\n\n一般Bluehost会更新到最新的PHP 5.3 版本，目前是PHP 5.3.20。\n\n[![最新的PHP 5.3 版本，目前是PHP 5.3.20。](http://blog.lixiphp.com/wp-content/uploads/2013/03/image_thumb1.png \"Bluehost会更新到最新的PHP 5.3 版本，目前是PHP 5.3.20。\")](http://blog.lixiphp.com/wp-content/uploads/2013/03/image1.png)\n\n如何设置一个目录或者域名运行PHP 5.4？在.htaccess中加上如下代码。\n> &lt;FilesMatch \"\\.php$\"&gt;\n> AddHandler application/x-httpd-php54 .php\n> &lt;/FilesMatch&gt;\n可以点击这里看看结果：[http://demo.drupal100.com/php54/phpinfo.php](http://demo.drupal100.com/php54/phpinfo.php)\n\n一般Bluehost会更新到最新的PHP 5.4 版本，目前是PHP 5.4.10。\n\n[![最新的PHP 5.4 版本，目前是PHP 5.4.10。](http://blog.lixiphp.com/wp-content/uploads/2013/03/image_thumb2.png \"Bluehost最新的PHP 5.4 版本，目前是PHP 5.4.10。\")](http://blog.lixiphp.com/wp-content/uploads/2013/03/image2.png)\n\n如果你有一个Bluehost空间，赶快试一试吧！","mtime":1386295379000,"source":"_posts/magento之bluehost-如何同时运行php-5-2，php-5-3-和php-5-4.md"},"n8e9caobpo2akz03":{"_id":"n8e9caobpo2akz03","content":"title: \"magento之Magento 503 Service Temporarily Unavailable错误\"\nid: 605\ndate: 2013-06-04 16:46:03\ntags: magento 503\ncategories: \n- magento\n---\n\n在安装一个插件失败后，访问magento出现错误如下\n\nError 503: Service Unavailable\n<div>\n\n# Service Temporarily Unavailable\n\n</div>\nThe server is temporarily unable to service your request due to maintenance downtime or capacity problems. Please try again later.\n\n清空缓存文件，删除local来解决问题未果。\n<!-- more -->\n\n于是我google了一下，找到了相关介绍，\n\n如此帖子讲的：http://www.magentocommerce.com/boards/viewthread/24963/\n\n说magento在一些情况下会生成一个 maintenance.flag 文件在根目录，来中断用户的访问，叫做进入了“maintenance mode”模式。只要删除根目录的maintenance.flag文件即可。","mtime":1386295317000,"source":"_posts/magento之magento-503-service-temporarily-unavailable错误.md"},"uu5n4j26f9unghk6":{"_id":"uu5n4j26f9unghk6","content":"title: \"magento之实现后台登陆自动选择中文界面\"\nid: 593\ndate: 2013-06-04 15:08:35\ntags: \n- magento\n- 中文显示\n- 后台\ncategories: \n- magento\n---\n\n在默认情况下，后台的界面使用的是英文界面，每次登陆后台我们需要手动去修改。这样比较繁琐。我们可以通过修改后台代码达到默认使用中文。\n\n打开/app/code/core/Mage/Adminhtml/controllers/indexController.php文件\n\n找到loginAction()函数，在函数里面添加一行代码：\n<pre>Mage::getSingleton('adminhtml/session')-&gt;setLocale('zh_CN');</pre>\n这样每次登陆后台时，系统都将默认选择中文界面。","mtime":1386295238000,"source":"_posts/magento之实现后台登陆自动选择中文界面.md"},"qzffnky5b5p3amo5":{"_id":"qzffnky5b5p3amo5","content":"title: \"magento之有效的去掉index.php的方法\"\nid: 603\ndate: 2013-06-04 16:16:15\ntags: \ncategories: \n- magento\n---\n\n开启重写URL 然后设置.htaccess。\n\n.htaccess代码如下：\n\nOptions +FollowSymLinks\n\nRewriteEngine On\n\nRewriteBase /\n\nRewriteCond %{REQUEST_URI} !^/media/\nRewriteCond %{REQUEST_URI} !^/skin/\nRewriteCond %{REQUEST_URI} !^/js/\nRewriteCond %{REQUEST_URI} !^/var/\n\nRewriteCond %{REQUEST_FILENAME} !-f\n\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteCond %{REQUEST_FILENAME} !-l\n\nRewriteRule . index.php [L]","mtime":1386295228000,"source":"_posts/magento之有效的去掉index-php的方法.md"},"1n04a43xpgatgawo":{"_id":"1n04a43xpgatgawo","content":"title: \"magento关闭后台不需要的功能模块\"\nid: 953\ndate: 2013-10-06 19:47:54\ntags: \n- 模块关闭\ncategories: \n- magento\n---\n\n**Magento** 功能确实非常强大，但有一些功能模块是我等所用不到的，可以考虑禁用以提高系统速度。\n\n稍微熟悉Magento的人马上就会想到Magento的模块化标准，其实不论是前台或者后台都是通过一个一个模板中的一个个Block组织成你所看到的，至于用户诱发的动作有一部分是在controller中完成的，有的则是在model中实现的，还有些是直接放在block中的。\n<!-- more -->\n显然controller是负责指挥。\n\nBlock可以说是负责显示，或者说是指导模板如何显示，当然它也可以处理些数据，当然是读操作比较多。\n\nmodel理论上讲，负责操作处理数据，但主要应该是写的操作。当然也有读的能力。\n\n在Magento中所有模块的开关都是在app/etc/modules中的文件进行配置的，要把一个模块禁用，步骤如下：\n\n1.  确定你要关闭的模块，比如我们这边要关闭的是后台的**Magento通知信息模块** ：AdminNotification\n2.  到app/etc/modules目录下，找到包含这个模板定义的xml文件\n3.  删掉它的相关定义，或将&lt;active&gt;true&lt;/active&gt;值改成false;\nPS：最快捷的方法：\n\n进入后台--&gt;System--&gt;Configuration--&gt;Advanced--&gt;这里可以直接关闭你不想要的功能模块。","mtime":1386295271000,"source":"_posts/magento关闭后台不需要的功能模块.md"},"s51f01dmfh4xkvpg":{"_id":"s51f01dmfh4xkvpg","content":"title: \"Magento插件之One Step Checkout\"\nid: 966\ndate: 2013-10-07 14:39:25\ntags: \n- 一步支付\n- 插件\ncategories: \n- magento\n---\n\n你想要简化magento结账的步骤吗？MageWorld最新版的一步支付插件可以解决你的困扰。这个插件可以是magento原始的6个结账步骤化身成为一个步骤搞定，在单个页面进行，顾客只需要填写地址，选择快递方式等其他的快速操作即可。该插件是最有效的技术变革，可以增加销售和客户的转换，减少顾客因为步骤繁琐而放弃订单。\n<!-- more -->\n首先我们看下使用插件前的页面，非常繁琐哦！\n\n[![使用一步插件前](http://173.234.48.113/wp-content/uploads/2013/10/QQ截图20131007000804-300x196.png)](http://173.234.48.113/wp-content/uploads/2013/10/QQ截图20131007000804.png)\n\n我们安装使用一步支付插件后，界面简单明了，有没有发现什么哦\n\n[![使用一步插件后](http://173.234.48.113/wp-content/uploads/2013/10/QQ截图20131007142948-300x205.png)](http://173.234.48.113/wp-content/uploads/2013/10/QQ截图20131007142948.png)\n\n&nbsp;\n\n完美兼容 magento 1.7.0.2\n\n下载地址：<span style=\"color: #ff0000;\"><del>因为版权问题，暂时停止下载</del></span>\n\n官网：[http://www.mage-world.com/magento-one-page-checkout-extension.html](http://www.mage-world.com/magento-one-page-checkout-extension.html)","mtime":1386295374000,"source":"_posts/magento插件之one-step-checkout.md"},"zra0572glppm0ub3":{"_id":"zra0572glppm0ub3","content":"title: \"Magento系统介绍\"\nid: 955\ndate: 2013-10-06 20:01:46\ntags: \n- magento\n- magento系统\ncategories: \n- magento\n---\n\nMagento是全新一代更强大的电子商务网店系统，几乎一出现便超越了过往各类购物车。即使是风靡一时的OsCommerce也甘拜下风。目前已经吸引了大量中小电子商务企业采用Magento作为其购物车系统的核心。Magento获得了2008年度最优秀的电子商务类CMS系统第一名，其强大的功能可扩展性，成为了企业解决方案的第一选择，目前Magento正逐步成长。\n<!-- more -->\n<div>**优点+**</div>\n\n*   采用php5和MySQL进行构建，并使用了著名的Zend框架。\n*   Varian 是magento的开发公司旗下产品。该开发团队异常勤垦，不断修正网站小错误和添加新功能。\n*   支持多站点，多店面功能。目前magento可以支持多域名指向各个子站，且子站可以部署于不同IP下。\n*   强大的后台管理功能，与企业级信息管理系统对接。\n*   模板的异常灵活，界面华丽，能够满足最苛刻的设计需求。\n*   支持多种批量操作功能，包括产品导入导出，订单报表导出\n<div>**缺点-**</div>\n\n*   开发壁垒较高，开发人员学习成本较高。但这直接使得商家可以享受更专业的开发服务。\n*   对服务器性能要求较高。但是服务器成本并不是电子商务中的主要成分，服务器费用的提升可以被忽略。\n**Magento网店系统 核心功能特点**\n\n**<a name=\"siteManage\"></a>1、网站管理：**\n\n*   可以在同一个后台管理多个站点或者多个在线商店\n*   支持多语言\n*   支持网店本土化\n*   支持多种货币 管理多系统角色和用户权限\n*   为任何第三方应用提供可集成的开放的Web Services API\n*   灵活的税率管理-美国或者国际市场 可100%定制的模板\n*   用户群组 一键式升级 集成CMS内容管理系统\n**<a name=\"promotion\"></a>2、促销和工具：**\n\n*   灵活的优惠券（优惠价格）-可以限定在某分店，用户组，时间段，不同产品或分类。（比如：百分比打折，总价折扣，免运费，卖几送几，买X获得多少折扣，买x获得免费送货，买x获得多少百分比折扣，买X获得多少总价折扣等。）\n*   可限定到分店、分类和产品的分类促销价（百分比折扣或者总价折扣）\n*   免运费优惠\n*   不同数量的多级折扣\n*   捆绑销售 用户组特价和多级群组特价\n*   着陆页营销制作工具\n*   搜索引擎友好的链接\n*   URL 重写 近期查看过的产品 近期比较过的产品 新品促销工具\n*   购物车中的追加销售 产品页的交叉销售\n*   发给朋友他（她）可能感兴趣的产品\n*   通过EMAIL或者RSS给朋友发送购买意向\n*   提供新产品新特价新标签的RSS种子\n*   自动生成Site Map\n*   支持GOOGLE Site Map\n*   投票功能 Newsletter管理\n**3、 <a name=\"international\"></a>国际化支持**\n\n*   多语言\n*   支持多种货币\n*   多种税率支持\n*   本地化\n*   根据不同目的采用可配置的国家列表:\n\n    *   站点注册\n    *   可指定到每个运输方法的运输目的地地址\n    *   可指定到每个支付手段的账单地址\n**4、 <a name=\"seo\"></a>SEO搜索引擎优化：**\n\n*   100% 搜索引擎友好\n*   Google Site Map\n*   可完全控制的自定义网址\n*   根据产品和分类定义页面Meta\n*   自动生成站点地图\n*   自动生成主流搜索引擎站点地图\n**<a name=\"checkout\"></a>5、结账方式：**\n\n*   One-Page 结账\n*   前台和后台的SSL 订单加密\n*   同一个订单内可发货到多个地址\n*   支持非注册用户结账\n*   购物车支持税和运费评估\n*   结账时帐户可以使用地址本\n*   开始结账时可选择创建帐户\n*   可为每个订单的每个物品设定赠品信息\n*   保存的购物车有可设定的失效日期\n**<a name=\"shipment\"></a>6、运输快递：**\n\n*   支持以下公司的完整的实时运费计算:\n\n    *   UPS, UPS XML (account rates), FedEx (account rates), USPS and DHL\n\n*   单个订单内可以运往不同地址\n*   站内订单追踪\n*   单个订单支持多种运输方式\n*   可按每个步骤指定到不同目的地国家<a>\n</a>\n*   每个订单平价运费\n*   每个货物的平价运费\n*   可免运费\n*   根据重量和目的地制定表格化的运费\n*   根据总价和目的地制定表格化的运费\n*   根据总数和目的地制定表格化的运费\n<div></div>\n&nbsp;\n<div></div>\n**<a name=\"Payment\"></a>7、支付方式：**\n\n*   可以设置为认证并收费或者只认证，在产生收据的时候再收费。\n*   内建多个贝宝网关 PayPal :\n\n    *   Website Payments Standard, Website Payments Pro (Express and Direct), Website Payments Pro UK (Express and Direct), and PayPal PayFlow Pro\n\n*   支持Authorize.net\n*   支持Google Checkout (Level 2)\n*   可保存的信用卡离线支付方式\n*   接受支票和汇票 Checks/Money Orders\n*   接受 Purchase Orders\n*   支付手段可通过Magento Connect扩展到以下这些:\n\n    *   [Fontis Australia](http://www.magentocommerce.com/extension/141/magento-australia-extension/)\n    *   [Cybersource](http://www.magentocommerce.com/extension/142/cybersource-extension/)\n    *   [Protx](http://www.magentocommerce.com/extension/143/protx-extension/)\n    *   [Tweakmag Payment](http://www.magentocommerce.com/extension/149/tweakmag-payment/)\n    *   [SPPLUS](http://www.magentocommerce.com/extension/151/spplus-extension/)\n    *   [Fontis New Zealand](http://www.magentocommerce.com/extension/154/magento-new-zealand-extension/)\n    *   [eWAY](http://www.magentocommerce.com/extension/155/eway-extension/)\n    *   [ChronoPay](http://www.magentocommerce.com/extension/156/chronopay-extension/)\n    *   [ePay](http://www.magentocommerce.com/extension/157/epay/)\n    *   [Paybox](http://www.magentocommerce.com/extension/158/paybox-extension/)\n    *   [iDEAL](http://www.magentocommerce.com/extension/159/ideal-extension/)\n    *   [Flo2Cash Web Service](http://www.magentocommerce.com/extension/160/flo2cash-web-service-extension/)\n    *   [Protx Direct Payment Module](http://www.magentocommerce.com/extension/163/protx-direct-payment-module/)\n    *   [PagSeguro Payment Module](http://www.magentocommerce.com/extension/170/pagseguro-payment-module/)\n    *   [CyberMUT Paiement / Paiement CIC](http://www.magentocommerce.com/extension/190/cybermut-extension/)\n    *   [Moduł platnosci.pl dla Lento](http://www.magentocommerce.com/extension/233/lento_platnosci/)\n    *   [Payone](http://www.magentocommerce.com/extension/235/payone-extension/)\n    *   [PaySimple](http://www.magentocommerce.com/extension/277/paysimple/)\n    *   [UOS Paymentmodule](http://www.magentocommerce.com/extension/279/uos-paymentmodule/)\n    *   [Fontis Paymate](http://www.magentocommerce.com/extension/280/fontis-paymate/)\n    *   [Fontis Payment Express](http://www.magentocommerce.com/extension/281/fontis-payment-express/)\n    *   [Dibs Payment](http://www.magentocommerce.com/extension/299/dibs-payment/)\n    *   [WorldPay](http://www.magentocommerce.com/extension/302/worldpay-extension/)\n    *   [Bank Prepayment (Vorkasse)](http://www.magentocommerce.com/extension/304/bank-prepayment-vorkasse-/)\n    *   [VCS](http://www.magentocommerce.com/extension/418/vcs/)\n    *   [Saferpay](http://www.magentocommerce.com/extension/419/saferpay/)\n    *   [Datarans Paymentgateway](http://www.magentocommerce.com/extension/422/datarans-paymentgateway/)\n    *   [SecureTrading XPay Module](http://www.magentocommerce.com/extension/427/securetrading-xpay-module/)\n    *   [Ogone Payment](http://www.magentocommerce.com/extension/428/ogone-payment/)\n    *   [Payment Module: ECS Clearing Interface](http://www.magentocommerce.com/extension/435/payment-module-ecs-clearing-interface/)\n    *   [Modulo Banca Sella 1.1](http://www.magentocommerce.com/extension/441/modulo-banca-sella/)\n    *   [LinkPoint API Payment Module for Magento](http://www.magentocommerce.com/extension/450/linkpoint-api-payment-module-for-magento/)\n**<a name=\"customerService\"></a>8、客户服务：**\n\n*   ”联系我们“表单\n*   丰富的客户帐户注册信息\n*   可更新的订单历史资料\n*   根据帐户追踪订单\n*   前台后台都支持忘记密码EMAIL重发\n*   订单和帐户更新 Emails通知\n*   个性化订单Email\n*   可以在后台直接创建并编辑订单\n** <a name=\"customerAccount\"></a>9、用户帐户：**\n\n*   订单状态和历史\n*   根据帐户重新翻单\n*   近期订购的产品\n*   无限的地址本\n*   默认的账单和运输地址\n*   可添加回复的购买意向\n*   购买意向可发送Email RSS feed\n*   管理订阅新闻\n*   提交产品回顾评价\n*   可以给产品添加标签\n*   帐户总览内容有: 最近的订单, 个人信息,新闻订阅状态 , 主要的订单地址,主要的送货地址,购物车, 购买意向, 近期订购的物品, 近期产品回顾和标签\n**<a name=\"catalogManage\"></a>10、目录管理：**\n\n*   库存管理（断货产品，最大数量和最小数量）\n*   批量导入和导出目录\n*   后台管理批量更新产品\n*   简单并可配置的捆绑销售和群组销售\n*   虚拟产品（软件等）\n*   客户个性产品-可上传文字和图片\n*   根据不同地区，用户组和产品类型提供不同的税率\n*   为快速建立产品的不同项目类型设置属性\n*   建立店铺的特定属性\n*   自动改变图片大小和加水印\n*   高级价格规则和特价\n*   搜索结果重写和重定向\n*   核准、编辑和删除标签Tags\n*   核准、编辑和删除产品回顾\n*   低库存提示RSS feed\n**<a name=\"catalogBrowsing\"></a>11、目录浏览**：\n\n*   为筛选产品进行分面导航（Layered / Faceted Navigation）\n*   可使用静态区块建立目录着陆页\n*   可为每个产品或者目录进行单独设计\n*   可配置的搜索以及自动建议搜索\n*   最近查看过的产品\n*   产品比较功能\n*   最近对比过的产品\n*   交叉销售（Cross-sells）,促销（Up-sells）和相关产品\n*   受欢迎产品云\n*   产品标签过滤\n*   产品评论\n*   展示产品可通过列表或者平铺的方式\n*   面包屑型导航架构\n** <a name=\"products\"></a>12、产品展示：**\n\n*   同一产品多图片浏览\n*   产品图片缩放功能\n*   产品评论\n*   相关产品\n*   库存量\n*   多级价格促销\n*   精选货品\n*   群组产品\n*   添加到购物意向\n*   通过EMAIL发给朋友\n**<a name=\"report\"></a>13、分析和报表：**\n\n*   整合Google analytics\n*   管理面板报告总览\n*   销售报告\n*   新产品RSS feed\n*   税报表\n*   放弃的购物的报表\n*   最受关注产品报表\n*   热销产品报表\n*   低库存报告\n*   搜索项报表\n*   产品评论报表\n*   新评论的RSS feed\n*   标签报表\n*   新标签的RSS feed\n*   赠券使用报表\n*   总的销售发票\n*   总的销售退款\n*   基于订单量和总价的顾客报表","mtime":1386295363000,"source":"_posts/magento系统介绍.md"},"wbinbtkt7q2pqos1":{"_id":"wbinbtkt7q2pqos1","content":"title: \"magento语言翻译,使用translate.csv文件来汉化\"\nid: 974\ndate: 2013-10-07 15:20:31\ntags: \ncategories: \n- magento\n---\n\n一般Magento的语言包都是指/app/locale目录下的文件夹，以中文包为例，/app/locale/zh_CN下的所有文件就是中文语言包的全部内容（具体可见从[http://www.magentochina.org/bbs/](http://www.magentochina.org/bbs/)下载的Magento汉化包）。\n\n细心地人可能会发现，除了这里有csv文件，在模板文件目录下也有一个locale文件夹，这里同样有个文件名为translate.csv的csv文件（在各自语言文件夹下，比如默认在locale下就只有一个en_US文件夹，里面自带一个translate.csv文件）。\n<!-- more -->\n现在我们来做个实验，在你所使用的模板目录下/app/design/frontend/default/default/locale（这里以default为例），新建文件夹zh_CN，在这个文件夹下新建文件translate.csv，打开translate.csv，添加这样一句：\n\n[xml]&lt;/p&gt;&lt;p&gt;&quot;Theme Design&quot;,&quot;主题设计&quot;&lt;/p&gt;&lt;p&gt;[/xml]\n\n保存。\n\n现在打开前台，你会发现原来的“Theme Design”变成了“主题设计”。\n\n&nbsp;\n\n可以推断出，translate.csv里的翻译要比/app/locale/下的语言文件里的翻译优先级要高。\n\n 其实从这个文件放的位置就可以理解，这个csv文件是专门给所在的模板用的，当使用这个模板时，translate.csv里的翻译项会覆盖掉语言包里的同名项，至于实际用法，以上面的为例，国内的语言包现在都是把My Cart翻译成“我的购物车”，这个翻译没有问题，但如果是做一个服装网站，把它翻译成“购物袋”是不是会更讨巧和更有创意呢，这时你不需要去修改/app/locale/zh_CN目录下的文件，而是像上面的例子一样去translate.csv新增项来覆盖掉原来的。\n\n以为自身的使用情况来说，虽然网上有现成的中文汉化包提供下载，但并没有做到百分百汉化（其中有一些是Magento自带的bug造成的），特别是后台，而国内的客户是很难接受在后台经常看到英文的，所以在这个汉化包的基础上，我经常需要把发现的漏网之鱼做好翻译并加到语言包里去，积累起来更完善的语言包以便下个项目可以重用，这时就会存在一个问题，有些项目的特殊性会要求把同一段英文翻译成不同的中文（还是以购物车和购物袋为例），如果把这一类的翻译直接去改语言包里的文件来实现，下一个项目要重用这个语言包就会带来问题。所以，把所有可能个性的，无法重用的翻译都写到translate.csv里去是一种正确和合理的思路，我觉得这也是官方提供这种方式的初衷。\n\nPS：后台模板目录下同样存在这个文件，可以用同样的方式修改后台的翻译\n\n&nbsp;","mtime":1386295330000,"source":"_posts/magento语言翻译使用translate-csv文件来汉化.md"},"q1q0dvlldz329oa9":{"_id":"q1q0dvlldz329oa9","content":"title: \"magento隐藏国家语言列表，只保留中英文\"\nid: 947\ndate: 2013-10-06 18:58:27\ntags: \ncategories: \n- magento\n---\n\nMagento后台自身携带了一个语言切换的功能，见后台左下角。你会发现长长的一串，其中绝大多数语言你可能根本没有机会用到，而你想要从中文切换到英文时，每次都要瞪大眼睛去找英文在下拉框的哪个位置，实在是累得慌，所以精简下还是有必要的。\n<!-- more -->\n\n![](http://hi.csdn.net/attachment/201005/14/0_1273798967f6K1.gif)\n\n以我自己的需求为例，我需要使用中文后台，偶尔会切换到英文，因为有些翻译不理想需要看下原文，那我就只保留“中文 (中国)”和“英文 (美国)”。打开根目录下/lib/Zend/Locale/Data/zh.xml文件，在大概640行找到territories标签，可以看到这个标签内部包含了一长串国家列表，把所有的territory标签全部注释掉，只提取出中国和美国。\n\n清除缓存，现在，在中文状态下，后台的下拉框你将只看到这两个选项，不过当你切换为英文后下拉框又变成一长串了，所以我们还需要对/lib/Zend/Locale/Data/en.xml做相似的处理。\n\n同时系统基本设置里的国家列表也只剩中国和美国了，具体需要使用哪些国家各位自己配置吧。\n\n![](http://hi.csdn.net/attachment/201005/14/0_1273800128hFRT.gif)","mtime":1386295350000,"source":"_posts/magento隐藏国家语言列表，只保留中英文.md"},"8wt2ofvzwnwx064w":{"_id":"8wt2ofvzwnwx064w","content":"title: \"Mybatis3学习笔记系列之一：Mybatis3入门\"\nid: 873\ndate: 2013-06-19 09:48:26\ntags: \n- mybatis\ncategories: \n- mybatis\n---\n\n## 什么是 MyBatis?\n\n`MyBatis` 是支持普通 SQL 查询,存储过程和高级映射的优秀持久层框架。MyBatis 消除 了几乎所有的 JDBC 代码和参数的手工设置以及结果集的检索。MyBatis 使用简单的 XML 或注解用于配置和原始映射,将接口和 Java 的 POJOs(Plan Old Java Objects,普通的 Java 对象)映射成数据库中的记录。\n\nMyBatis作为持久层框架，其主要思想是将程序中的大量sql语句剥离出来，配置在配置文件中，实现sql的灵活配置。这样做的好处是将sql与程序代码分离，可以在不修改程序代码的情况下，直接在配置文件中修改sql。\n<!-- more -->\n## 从 `iBatis` 到 `MyBatis`，你准备好了吗？\n\n对于从事 `Java EE` 的开发人员来说，iBatis 是一个再熟悉不过的持久层框架了，在 `Hibernate`、`JPA` 这样的一站式对象 / 关系映射（`O/R Mapping`）解决方案盛行之前，iBaits 基本是持久层框架的不二选择。即使在持久层框架层出不穷的今天，iBatis 凭借着易学易用、轻巧灵活等特点，也仍然拥有一席之地。尤其对于擅长 SQL 的开发人员来说，iBatis 对 SQL 和存储过程的直接支持能够让他们在获得 iBatis 封装优势的同时而不丧失 SQL 调优的手段，这是 Hibernate/JPA 所无法比拟的。具体而言，使用 iBatis 框架的主要优势主要体现在如下几个方面：\n首先，iBatis 封装了绝大多数的 `JDBC` 样板代码，使得开发者只需关注 SQL 本身，而不需要花费精力去处理例如注册驱动，创建 `Connection`，以及确保关闭 `Connection` 这样繁杂的代码。\n其次，iBatis 可以算是在所有主流的持久层框架中学习成本最低，最容易上手和掌握的框架。虽说其他持久层框架也号称门槛低，容易上手，但是等到你真正使用时会发现，要想掌握并用好它是一件非常困难的事。在工作中我需要经常参与面试，我曾听到过很多位应聘者描述，他们所在的项目在技术选型时选择 Hibernate，后来发现难以驾驭，不得不将代码用 JDBC 或者 iBatis 改写。\niBatis 自从在 `Apache` 软件基金会网站上发布至今，和他的明星兄弟们（`Http Server`，`Tomcat`，`Struts`，`Maven`，`Ant` 等等）一起接受者万千 Java 开发者的敬仰。然而在今年六月中旬，几乎是发布 3.0 版本的同时，iBatis 主页上的一则 “Apache iBATIS has been retired” 的声明在社区引起了一阵不小的波澜。在 Apache 寄居六年之后，iBatis 将代码托管到 Google Code。在声明中给出的主要理由是，和 Apache 相比，`Google Code` 更有利于开发者的协同工作，也更能适应快速发布。于此同时，iBatis 更名为 MyBatis。\n由一个 MyBatis 示例开始\n\n如果读者接触过一些常用的 Java EE 框架，应该都知道这些框架需要提供一个全局配置文件，用于指定程序正常运行所需的设置和参数信息。而针对常用的持久层框架而言（Hibernate、JPA、iBatis 等），则通常需要配置两类文件：一类用于指定数据源、事务属性以及其他一些参数配置信息（通常是一个独立的文件，可以称之为全局配置文件）；另一类则用于指定数据库表和程序之间的映射信息（可能不止一个文件，我们称之为映射文件）。MyBatis 也不例外，虽然其中的一部分可以通过注解的形式进行，但是这两部分内容本身仍是必不可少的。\n\n根据 iBatis 的习惯，我们通常把全局配置文件命名为 `sqlMapConfig.xml`，文件名本身并没有要求，在 MyBatis 中，也经常会将该文件命名为 `Configuration.xml `（读完全文后读者也许会发现，在 iBatis 中经常出现的 “sqlMap” 在 MyBatis 中被逐渐淡化了，除了此处，还比如 iBatis 配置文件的根元素为 &lt;sqlMapConfig&gt;，指定映射文件的元素为 &lt;sqlMap&gt;，以及 SqlMapClient 等等，这个变化正说明，iBatis 仅是以 SQL 映射为核心的框架，而在 MyBatis 中多以 `Mapper`、`Session`、`Configuration` 等其他常用 `ORM` 框架中的名字代替，体现的无非是两个方面：首先是为了减少开发者在切换框架所带来的学习成本；其次，MyBatis 充分吸收了其他 ORM 框架好的实践，MyBatis 现在已不仅仅是一个 SQL 映射框架了）。在全局配置文件中可以配置的信息主要包括如下几个方面：\n\n*   `properties` --- 用于提供一系列的键值对组成的属性信息，该属性信息可以用于整个配置文件中。\n*   `settings` --- 用于设置 MyBatis 的运行时方式，比如是否启用延迟加载等。\n*   `typeAliases` --- 为 Java 类型指定别名，可以在 XML 文件中用别名取代 Java 类的全限定名。\n*   `typeHandlers` --- 在 MyBatis 通过 PreparedStatement 为占位符设置值，或者从 ResultSet 取出值时，特定类型的类型处理器会被执行。\n*   `objectFactory` --- MyBatis 通过 ObjectFactory 来创建结果对象。可以通过继承 DefaultObjectFactory 来实现自己的 ObjectFactory 类。\n*   `plugins` --- 用于配置一系列拦截器，用于拦截映射 SQL 语句的执行。可以通过实现 Interceptor 接口来实现自己的拦截器。\n*   `environments` --- 用于配置数据源信息，包括连接池、事务属性等。\n*   `mappers` --- 程序中所有用到的 SQL 映射文件都在这里列出，这些映射 SQL 都被 MyBatis 管理。\n\n下面我们根据具体的实例，来了解下mybatis。实例环境：`eclipse 4.2` `mysql 5.5` `mybatis3.2.2`\n\n首先创建web项目，命名为mybatisDemo01，接着复制相关jar包到lib目录下。`mybatis-3.2.2.jar`和`mysql-connector-java-5.1.18.jar`。\n1、创建文件夹`main.resources.config`，用来保存配置文件。创建名为`configuration.xml`的配置文件，其内容如下：\n\n{%codeblock lang:xml%}\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration\nPUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n\"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;\n<configuration>\n<!—类型别名定义。今后可只用Student来代替它冗长的 全限定名—>\n<typeAliases>\n<typeAlias alias=\"Student\" type=\"com.hanfeng.demo.pojo.Student\"/>\n</typeAliases>\n<!— 配置数据源相关的信息 —>\n<environments default=\"development\">\n<environment id=\"development\">\n<transactionManager type=\"JDBC\"/>\n<!—使用连接池的数据源配置—>\n<dataSource type=\"POOLED\">\n<property name=\"driver\" value=\"com.mysql.jdbc.Driver\"/>\n<property name=\"url\" value=\"jdbc:mysql://localhost:3306/db_test\"/>\n<property name=\"username\" value=\"root\"/>\n<property name=\"password\" value=\"123456\"/>\n</dataSource>\n</environment>\n</environments>\n<!— 列出映射文件 —>\n<!—指定要用到的mapper文件。以下的resource属性告诉\nMyBatis要在类路径下的resources目录下找StudentMapper.xml文件。\n我们将把mapper文件存放在src目录下的resources目录中—>\n<mappers>\n<mapper resource=\"main/resources/sqlmap/StudentMapper.xml\"/>\n</mappers>\n</configuration>\n{%endcodeblock%}\n\n一定要注意上面的映射文件 DTD 约束哦，别忘记添加了。这个配置文件比较简单，主要是数据源和映射文件的配置。\n\n2、创建学生类。包名：`com.hanfeng.demo.pojo`\n\n{%codeblock lang:java%}\npackage com.hanfeng.demo.pojo;\n public class Student {\n private int id;\n private String name; //姓名\n private String gender; //性别\n private String major; //专业\n private String grade; //年级\n public int getId() {\n return id;\n }\n public void setId(int id) {\n this.id = id;\n }\n public String getName() {\n return name;\n }\n public void setName(String name) {\n this.name = name;\n }\n public String getGender() {\n return gender;\n }\n public void setGender(String gender) {\n this.gender = gender;\n }\n public String getMajor() {\n return major;\n }\n public void setMajor(String major) {\n this.major = major;\n }\n public String getGrade() {\n return grade;\n }\n public void setGrade(String grade) {\n this.grade = grade;\n }\n }\n{%endcodeblock%}\n\n3、创建接口，在接口中声明访问数据库的方法。包名：`com.hanfeng.demo.dao`\n\n{%codeblock lang:java%}\n package com.hanfeng.demo.dao;\n import com.hanfeng.demo.pojo.Student;\n /**\n * 接口 声明访问数据库的方法\n * @author hanfeng\n *\n */\n public interface StudentMapper {\n //根据学生ID查询学生实体\n public Student getById(int id);\n }\n{%endcodeblock%}\n\n4、编写`mapper`文件，`StudentMapper.xml`。在此文件里，我们写好查询的SQL语句，并配置好映射关系。\n\nMyBatis将根据此文件帮我们实现StudentMapper接口。内容如下：\n\n{%codeblock lang:xml%}\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;\n<!—namespace该是StudentMapper的完整限定名—>\n<mapper namespace=\"com.hanfeng.demo.dao.StudentMapper\">\n<!—定义java bean的属性与数据库表的列之间的映射。type=\"Student\"用到了configuration.xml中定义的别名—>\n<resultMap id=\"studentResultMap\" type=\"Student\">\n<!—id映射—>\n<id property=\"id\" column=\"id\"/>\n<!—普通属性映射—>\n<result property=\"name\" column=\"name\"/>\n<result property=\"gender\" column=\"gender\"/>\n<result property=\"major\" column=\"major\"/>\n<result property=\"grade\" column=\"grade\"/>\n</resultMap>\n<!—与StudentMapper接口中的getById方法对应，包括\n方法名和参数类型。SQL语句中以“#{}”的形式引用参数—>\n<select id=\"getById\" parameterType=\"int\" resultMap=\"studentResultMap\">\nSELECT *\nFROM student WHERE id = #{id}\n</select>\n</mapper>\n{%endcodeblock%}\n5、测试功能。\n\n创建一个专门用来保存测试代码的源文件夹test。包名：`com.hanfeng.demo.pojo.test`\n\n{%codeblock lang:java%}\npackage com.hanfeng.demo.pojo.test;\n import java.io.Reader;\n import org.apache.ibatis.io.Resources;\n import org.apache.ibatis.session.SqlSession;\n import org.apache.ibatis.session.SqlSessionFactory;\n import org.apache.ibatis.session.SqlSessionFactoryBuilder;\n import com.hanfeng.demo.dao.StudentMapper;\n import com.hanfeng.demo.pojo.Student;\n public class StudentTest {\n public static void main(String[] args) {\n //与configuration.xml中的mapper配置类似，告诉MyBatis应读取的核心配置文件\n String resource = &quot;main/resources/config/configuration.xml&quot;;\n Reader reader = null;\n try {\n reader = Resources.getResourceAsReader(resource);\n } catch (Exception e) {\n e.printStackTrace();\n }\n //创建SqlSessionFactory实例。没有指定要用到的\n //environment，则使用默认的environment\n SqlSessionFactory sqlSessionFactory;\n sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);\n SqlSession sqlSession = sqlSessionFactory.openSession();\n try {\n StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class);\n Student student = studentMapper.getById(2);\n if (student != null) {\n System.out.println(&quot;姓名：&quot;+student.getName()+&quot;\\n专业：&quot;+student.getMajor());\n }else{\n System.out.println(&quot;没有找到相关记录！&quot;);\n }\n } catch (Exception e) {\n e.printStackTrace();\n }finally{\n sqlSession.close();\n }\n }\n }\n {%endcodeblock%}\n\n然后运行测试。我们会发现程序正常输出内容，说明测试成功，代码没呀问题。\n\n[![wpid-210073e420d43daf2ad7a97814144c74_6878224.png](http://173.234.48.113/wp-content/uploads/2013/06/wpid-210073e420d43daf2ad7a97814144c74_6878224.png)](http://173.234.48.113/wp-content/uploads/2013/06/wpid-210073e420d43daf2ad7a97814144c74_6878224.png)\n\n例子的架构目录：\n\n[![7020185](http://173.234.48.113/wp-content/uploads/2013/06/7020185-210x300.png)](http://173.234.48.113/wp-content/uploads/2013/06/7020185.png)\n\n源代码：[http://pan.baidu.com/share/link?shareid=989191459&amp;uk=4161616584](http://pan.baidu.com/share/link?shareid=989191459&amp;uk=4161616584)","mtime":1386292759000,"source":"_posts/mybatis3学习笔记系列之一：mybatis3入门.md"},"028ib06dnvvbdvgf":{"_id":"028ib06dnvvbdvgf","content":"title: \"MyBatis学习笔记系列之三：MyBatis入门重点内容\"\nid: 887\ndate: 2013-06-19 11:29:41\ntags: \n- mybatis入门重点\ncategories: \n- mybatis\n- 程序人生\n---\n\n# 从 XML 中构建 SqlSessionFactory\n\n_每 一 个 MyBatis 的 应 用 程 序 都 以 一 个 SqlSessionFactory 对 象 的 实 例 为 核 心 。 SqlSessionFactory 对 象 的 实 例 可 以 通 过 SqlSessionFactoryBuilder 对 象 来 获 得 。 SqlSessionFactoryBuilder 对象可以从 XML 配置文件,或从 Configuration 类的习惯准备的实 例中构建 SqlSessionFactory 对象。_\n\n从 XML 文件中构建 SqlSessionFactory 的实例非常简单。这里建议你使用类路径下的资 源文件来配置,但是你可以使用任意的 Reader 实例,这个实例包括由文字形式的文件路径 或 URL 形式的文件路径 file://来创建。MyBatis 包含了一些工具类,称作为资源,这些工具 类包含一些方法,这些方法使得从类路径或其他位置加载资源文件更加简单。\n\n[java]String resource = &quot;org/mybatis/example/mybatis-config.xml&quot;;\nInputStream inputStream = Resources.getResourceAsStream(resource);\nsqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n\n[/java]\n\nXML 配置文件包含对 MyBatis 系统的核心设置,包含获取数据库连接实例的数据源和 决定事务范围和控制的事务管理器。关于 XML 配置文件的详细内容可以在文档后面找到, 这里给出一个简单的示例:\n\n&nbsp;\n\n[xml]\n\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE configuration\n PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;\n &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;\n&lt;configuration&gt;\n &lt;environments default=&quot;development&quot;&gt;\n &lt;environment id=&quot;development&quot;&gt;\n &lt;transactionManager type=&quot;JDBC&quot;/&gt;\n &lt;dataSource type=&quot;POOLED&quot;&gt;\n &lt;property name=&quot;driver&quot; value=&quot;${driver}&quot;/&gt;\n &lt;property name=&quot;url&quot; value=&quot;${url}&quot;/&gt;\n &lt;property name=&quot;username&quot; value=&quot;${username}&quot;/&gt;\n &lt;property name=&quot;password&quot; value=&quot;${password}&quot;/&gt;\n &lt;/dataSource&gt;\n &lt;/environment&gt;\n &lt;/environments&gt;\n &lt;mappers&gt;\n &lt;mapper resource=&quot;org/mybatis/example/BlogMapper.xml&quot;/&gt;\n &lt;/mappers&gt;\n&lt;/configuration&gt;\n\n[/xml]\n\n当然, XML 配置文件中还有很多可以配置的, 在 上面的示例指出的则是最关键的部分。 要注意 XML 头部的声明,需要用来验证 XML 文档正确性。environment 元素体中包含对事 务管理和连接池的环境配置。 mappers 元素是包含所有 mapper 映射器) ( 的列表, 这些 mapper 的 XML 文件包含 SQL 代码和映射定义信息。\n\n&nbsp;\n\n不使用 XML 构建 SqlSessionFactory\n如果你喜欢从 Java 程序而不是 XML 文件中直接创建配置实例, 或创建你自己的配置构 建器,MyBatis 也提供完整的配置类,提供所有从 XML 文件中加载配置信息的选项。\n\n[java]\n\nDataSource dataSource = BlogDataSourceFactory.getBlogDataSource();\nTransactionFactory transactionFactory = new JdbcTransactionFactory();\nEnvironment environment = new Environment(&quot;development&quot;, transactionFactory, dataSource);\nConfiguration configuration = new Configuration(environment);\nconfiguration.addMapper(BlogMapper.class);\nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);\n\n[/java]\n\n注意这种情况下配置是添加映射类。映射类是 Java 类,这些类包含 SQL 映射语句的注 解从而避免了 XML 文件的依赖, XML 映射仍然在大多数高级映射 (比如: 嵌套 Join 映射) 时需要。出于这样的原因,如果存在 XML 配置文件的话,MyBatis 将会自动查找和加载一 个对等的 XML 文件(这种情况下,基于类路径下的 BlogMapper.class 类的类名,那么 BlogMapper.xml 将会被加载)。后面我们会了解更多。\n\n&nbsp;\n\n### 从 SqlSessionFactory 中获取 SqlSession\n\n现在,我们已经知道如何获取 SqlSessionFactory 对象了,基于同样的启示,我们就可以 获得 SqlSession 的实例了。 SqlSession 对象完全包含以数据库为背景的所有执行 SQL 操作的 方法。你可以用 SqlSession 实例来直接执行已映射的 SQL 语句。例如:\n\n[java]\n\nSqlSession session = sqlSessionFactory.openSession();\ntry {\n Blog blog = (Blog) session.selectOne(&quot;org.mybatis.example.BlogMapper.selectBlog&quot;, 101);\n} finally {\n session.close();\n}\n\n[/java]\n\n这种方法起到的作用, 和我们使用之前的 MyBatis 版本是相似的, 现在有一种更简洁的 方法。使用合理描述参数和 SQL 语句返回值的接口(比如 BlogMapper.class) ,这样现在就 可以至此那个更简单,更安全的代码,没有容易发生的字符串文字和转换的错误。\n\n例如:\n\n[java]\n\nSqlSession session = sqlSessionFactory.openSession();\ntry {\n BlogMapper mapper = session.getMapper(BlogMapper.class);\n Blog blog = mapper.selectBlog(101);\n} finally {\n session.close();\n}[/java]\n\n现在我们来探究一下这里到底执行了什么。\n\n### 探究已映射的 SQL 语句\n\n这里你也许想知道通过 SqlSession 和 Mapper 对象到底执行了什么操作。已映射的 SQL 语句是一个很大的主题, 而且这个主题会贯穿本文档的大部分内容。 为了给出一个宏观的概 念,这里有一些示例。 上面提到的任何一个示例,语句是通过 XML 或注解定义的。我们先来看看 XML。使 用基于 XML 的映射语言,在过去的几年中使得 MyBatis 非常流行,他为 MyBatis 提供所有 的特性设置。如果你以前用过 MyBatis,这个概念应该很熟悉了,但是 XML 映射文件也有 很多的改进,后面我们会详细来说。这里给出一个基于 XML 映射语句的示例,这些语句应 该可以满足上述示例中 SqlSession 对象的调用。\n\n[xml]\n\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;\n&lt;!DOCTYPE mapper\n PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;\n &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;\n&lt;mapper namespace=&quot;org.mybatis.example.BlogMapper&quot;&gt;\n &lt;select id=&quot;selectBlog&quot; parameterType=&quot;int&quot; resultType=&quot;Blog&quot;&gt;\n select * from Blog where id = #{id}\n &lt;/select&gt;\n&lt;/mapper&gt;\n\n[/xml]\n\n这个简单的例子中看起来有很多额外的东西, 但是也相当简洁了。 你可以在一个单独的 XML 映射文件中定义很多的映射语句,除 XML 头部和文档类型声明之外,你可以得到很 多 方 便 之 处 。 在 文 件 的 剩 余 部 分 是 很 好 的 自 我 解 释 。 在 命 名 空 间 “com.mybatis.example.BlogMapper”中,它定义了一个名为“selectBlog”的映射语句,这 样它允许你使用完全限定名 “org.mybatis.example.BlogMapper.selectBlog” 来调用映射语句, 我们下面示例中所有的写法也是这样的。\n\nBlog blog = (Blog) session.selectOne(\"org.mybatis.example.BlogMapper.selectBlog\", 101);\n要注意这个使用完全限定名调用 Java 对象的方法是相似的,这样做是有原因的。这个 命名可以直接给相同命名空间下的的映射类, 使用一个名称, 参数和返回值和已映射的查询 语句都一样的方法即可。 这就允许你非常容易地调用映射器接口中的方法, 这和你前面看到 的是一样的,下面这个示例中它又出现了。\n\n[java]\n\nBlogMapper mapper = session.getMapper(BlogMapper.class);\nBlog blog = mapper.selectBlog(101);\n\n[/java]\n\n第二种方式有很多有点,首先它不是基于文字的,那就更安全了。第二,如果你的 IDE 有代码补全功能,那么你可以利用它来操纵已映射的 SQL 语句。第三,不需要强制类型转 换,同时 BlogMapper 接口可以保持简洁,返回值类型很安全(参数类型也很安全) 。\n\n### 重要 命名空间的一点注释\n\n命名空间 在之前版本的 MyBatis 中是可选项,非常混乱也没有帮助。现在,命名空间 是必须的,而且有一个目的,它使用更长的完全限定名来隔离语句。\n\n命名空间使得接口绑定成为可能,就像你看到的那样,如果之前不了解,那么现在你 就会使用它们了,你应该按照下面给出示例的来练习,以免改变自己的想法。使用命名空 间,并将它放在合适的 Java 包空间之下,将会使你的代码变得简洁,在很长的时间内提高 MyBatis 的作用。\n\n命名解析: 为了减少输入量,MyBatis 对所有的命名配置元素使用如下的命名解析规 则,包括语句,结果映射,缓存等。\n\n直接查找完全限定名(比如“com.mypackage.MyMapper.selectAllThings”,如果 ) 发现就使用。\n短名称(比如“selectAllThings” )可以用来引用任意含糊的对象。而如果有两个 或两个以上的(比如“com.foo.selectAllThings ”和“com.bar.selectAllThings” ), 那么就会得到错误报告,说短名称是含糊的,因此就必须使用完全限定名。\n如 BlogMapper 这样的映射器类来说,还有一个妙招。它们中间映射的语句可以不需要 在 XML 中来写,而可以使用 Java 注解来替换。比如,上面的 XML 示例可以如下来替换:\n\n[java]\n\npackage org.mybatis.example;\npublic interface BlogMapper {\n @Select(&quot;SELECT * FROM blog WHERE id = #{id}&quot;)\n Blog selectBlog(int id);\n}\n\n[/java]\n\n对于简单语句来说,使用注解代码会更加清晰,然而 Java 注解对于复杂语句来说就会 混乱, 应该限制使用。 因此, 如果你不得不做复杂的事情, 那么最好使用 XML 来映射语句。\n\n当然这也取决于你和你的项目团队的决定, 看哪种更适合你来使用, 还有以长久方式来 使用映射语句的重要性。也就是说,不要将自己局限在一种方式中。你可以轻松地将注解换 成 XML 映射语句,反之亦然。\n\n## 范围和生命周期\n\n理解我们目前已经讨论过的不同范围和生命周期类是很重要的。 不正确的使用它们会导 致严重的并发问题。\n\n### **SqlSessionFactoryBuilder**\n\n这个类可以被实例化,使用和丢弃。一旦你创建了 SqlSessionFactory 后,这个类就不需 要存在了。 因此 SqlSessionFactoryBuilder 实例的最佳范围是方法范围 (也就是本地方法变量)。 你可以重用 SqlSessionFactoryBuilder 来创建多个 SqlSessionFactory 实例, 但是最好的方式是 不需要保持它一直存在来保证所有 XML 解析资源,因为还有更重要的事情要做。\n\n### SqlSessionFactory\n\n一旦被创建,SqlSessionFactory 应该在你的应用执行期间都存在。没有理由来处理或重 新创建它。 使用 SqlSessionFactory 的最佳实践是在应用运行期间不要重复创建多次。 这样的 操作将被视为是非常糟糕的。 因此 SqlSessionFactory 的最佳范围是应用范围。 有很多方法可 以做到, 最简单的就是使用单例模式或者静态单例模式。\n\n### SqlSession\n\n每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不能被共享,也是线程 不安全的。因此最佳的范围是请求或方法范围。绝对不能将 SqlSession 实例的引用放在一个 类的静态字段甚至是实例字段中。 也绝不能将 SqlSession 实例的引用放在任何类型的管理范 围中, 比如 Serlvet 架构中的 HttpSession。 如果你现在正用任意的 Web 框架, 要考虑 SqlSession 放在一个和 HTTP 请求对象相似的范围内。换句话说,基于收到的 HTTP 请求,你可以打开 了一个 SqlSession,然后返回响应,就可以关闭它了。关闭 Session 很重要,你应该确保使 用 finally 块来关闭它。下面的示例就是一个确保 SqlSession 关闭的基本模式:\n\n[java]SqlSession session = sqlSessionFactory.openSession();\ntry {\n // do work\n} finally {\n session.close();\n}[/java]\n\n在你的代码中一贯地使用这种模式, 将会保证所有数据库资源都正确地关闭 (假设你没 有通过你自己的连接关闭,这会给 MyBatis 造成一种迹象表明你要自己管理连接资源) 。\n\n### Mapper 实例\n\n映射器是你创建绑定映射语句的接口。映射器接口的实例可以从 SqlSession 中获得。那 么从技术上来说,当被请求时,任意映射器实例的最宽范围和 SqlSession 是相同的。然而, 映射器实例的最佳范围是方法范围。也就是说,它们应该在使用它们的方法中被请求,然后 就抛弃掉。它们不需要明确地关闭,那么在请求对象中保留它们也就不是什么问题了,这和 SqlSession 相似。你也许会发现,在这个水平上管理太多的资源的话会失控。保持简单,将 映射器放在方法范围内。下面的示例就展示了这个实践:\n\n[java]\n\nSqlSession session = sqlSessionFactory.openSession();\ntry {\n BlogMapper mapper = session.getMapper(BlogMapper.class);\n // do work\n} finally {\n session.close();\n}[/java]","mtime":1386290932000,"source":"_posts/mybatis学习笔记系列之三：mybatis入门重点内容.md"},"gru672b7u9kqm38c":{"_id":"gru672b7u9kqm38c","content":"title: \"MyBatis实战之一：序言的话\"\nid: 1003\ndate: 2013-11-25 19:30:43\ntags: \ncategories: \n- 未分类\n---\n\n<div><div>序言</div><div>\n</div><div><font face=\"Lucida Console\">在上个项目中使用的hibernate，备受折磨，据说mybatis不错，比hibernate灵活，且性能也好，属于轻量级框架。乘此机会学习下，希望在下一个项目中可以使用上。</font></div></div>\n\n## 简介<a name=\"a\" style=\"color: rgb(0, 136, 204);\"></a>\n<!--more--><div class=\"section\" style=\"background-color: rgb(255, 255, 255);\">\n\n### 什么是 MyBatis?<a name=\"a_MyBatis\" style=\"color: rgb(0, 136, 204);\"></a>\n\nMyBatis 是支持普通 SQL 查询,存储过程和高级映射的优秀持久层框架。MyBatis 消除 了几乎所有的 JDBC 代码和参数的手工设置以及结果集的检索。MyBatis 使用简单的 XML 或注解用于配置和原始映射,将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java 对象)映射成数据库中的记录。\n\nORM基本思想\n\n<p style=\"margin: 0px 7px 10px;\"><font color=\"#333333\" face=\"Helvetica Neue, Helvetica, Arial, sans-serif\">无论是用过的hibernate,mybatis,你都可以法相他们有一个共同点：</font>\n\n<font color=\"#333333\" face=\"Helvetica Neue, Helvetica, Arial, sans-serif\">1\\. 从配置文件(通常是XML配置文件中)得到 sessionfactory.</font>\n\n<font color=\"#333333\" face=\"Helvetica Neue, Helvetica, Arial, sans-serif\">2\\. 由sessionfactory &nbsp;产生 session</font>\n\n<font color=\"#333333\" face=\"Helvetica Neue, Helvetica, Arial, sans-serif\">3\\. 在session 中完成对数据的增删改查和事务提交等.</font>\n\n<font color=\"#333333\" face=\"Helvetica Neue, Helvetica, Arial, sans-serif\">4\\. 在用完之后关闭session 。</font>\n\n<font color=\"#333333\" face=\"Helvetica Neue, Helvetica, Arial, sans-serif\">5\\. 在java 对象和 数据库之间有做mapping 的配置文件，也通常是xml 文件。</font>\n\n<font color=\"#333333\" face=\"Helvetica Neue, Helvetica, Arial, sans-serif\">\n</font>\n\n<font color=\"#333333\" face=\"Helvetica Neue, Helvetica, Arial, sans-serif\">\n</font>\n</p>\n\n</div>\n\n<div>[来自为知笔记(Wiz)](http://www.wiz.cn/i/bf10110a \"来自为知笔记(Wiz)\")</div>","mtime":1386290932000,"source":"_posts/mybatis实战之一：序言的话.md"},"3pmqsh1u6id1t4mm":{"_id":"3pmqsh1u6id1t4mm","content":"title: \"MyBatis实战之一：序言的话\"\nid: 1005\ndate: 2013-11-25 19:30:43\ntags: \ncategories: \n- 未分类\n---\n\n<div><div>序言</div><div>\n</div><div><font face=\"Lucida Console\">在上个项目中使用的hibernate，备受折磨，据说mybatis不错，比hibernate灵活，且性能也好，属于轻量级框架。乘此机会学习下，希望在下一个项目中可以使用上。</font></div></div>\n\n## 简介<a name=\"a\" style=\"color: rgb(0, 136, 204);\"></a>\n<!--more--><div class=\"section\" style=\"background-color: rgb(255, 255, 255);\">\n\n### 什么是 MyBatis?<a name=\"a_MyBatis\" style=\"color: rgb(0, 136, 204);\"></a>\n\nMyBatis 是支持普通 SQL 查询,存储过程和高级映射的优秀持久层框架。MyBatis 消除 了几乎所有的 JDBC 代码和参数的手工设置以及结果集的检索。MyBatis 使用简单的 XML 或注解用于配置和原始映射,将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java 对象)映射成数据库中的记录。\n\nORM基本思想\n\n<p style=\"margin: 0px 7px 10px;\"><font color=\"#333333\" face=\"Helvetica Neue, Helvetica, Arial, sans-serif\">无论是用过的hibernate,mybatis,你都可以法相他们有一个共同点：</font>\n\n<font color=\"#333333\" face=\"Helvetica Neue, Helvetica, Arial, sans-serif\">1\\. 从配置文件(通常是XML配置文件中)得到 sessionfactory.</font>\n\n<font color=\"#333333\" face=\"Helvetica Neue, Helvetica, Arial, sans-serif\">2\\. 由sessionfactory &nbsp;产生 session</font>\n\n<font color=\"#333333\" face=\"Helvetica Neue, Helvetica, Arial, sans-serif\">3\\. 在session 中完成对数据的增删改查和事务提交等.</font>\n\n<font color=\"#333333\" face=\"Helvetica Neue, Helvetica, Arial, sans-serif\">4\\. 在用完之后关闭session 。</font>\n\n<font color=\"#333333\" face=\"Helvetica Neue, Helvetica, Arial, sans-serif\">5\\. 在java 对象和 数据库之间有做mapping 的配置文件，也通常是xml 文件。</font>\n\n<font color=\"#333333\" face=\"Helvetica Neue, Helvetica, Arial, sans-serif\">\n</font>\n\n<font color=\"#333333\" face=\"Helvetica Neue, Helvetica, Arial, sans-serif\">\n</font>\n</p>\n\n</div>\n\n<div>[来自为知笔记(Wiz)](http://www.wiz.cn/i/bf10110a \"来自为知笔记(Wiz)\")</div>","mtime":1386290932000,"source":"_posts/mybatis实战之一：序言的话-2.md"},"2mwgj3nz3ioumr3t":{"_id":"2mwgj3nz3ioumr3t","content":"title: \"MyBatis实战之二：开发环境搭建及HelloWorld\"\nid: 1012\ndate: 2013-11-25 19:38:02\ntags: \ncategories: \n- 未分类\n---\n\n开发环境和普通的web项目一样，这里我们需要到官网去下载用到的mybatis包。<div>\n</div><div>官网：[http://blog.mybatis.org/p/products.html](http://blog.mybatis.org/p/products.html)</div><!--more--><div>github：[https://github.com/mybatis/mybatis-3/releases](https://github.com/mybatis/mybatis-3/releases)</div><div>\n</div><div>下载完毕就开始进入新建web项目。导入mybatis-3.2.4-SNAPSHOT.jar、mysql-connector-java-5.1.27.jar、junit-4.11.jar<span style=\"font-size: 10.5pt; line-height: 1.5;\">到web工程lib目录里头。</span></div><div>![](6866e0e6-7706-45fd-a35e-5f52fc9371e4_files/14550431.png)</div><div>接着创建测试数据库mybatis-test和用户表user，采用utf-8编码字符，防止中文乱码。</div><div>![](6866e0e6-7706-45fd-a35e-5f52fc9371e4_files/13570667.jpg)</div><div>创建用户表user</div><div>![](6866e0e6-7706-45fd-a35e-5f52fc9371e4_files/13724702.png)</div><div>插入一条测试数据</div><div>![](6866e0e6-7706-45fd-a35e-5f52fc9371e4_files/13770613.png)</div><div>\n</div><div>1、添加mybatis配置文件Configuration.xml</div><div>\n</div><div>该文件是mybatis用来简历sessionFactory用的，里面包含数据库连接相关信息，java类对应别名。</div><div>\n</div><div><div><!--WizRtf2Html Charset=0  --><span style=\"font-size:10pt;color:#008080;font-family:'Source Code Pro';\">&lt;?<span style=\"color:#3f7f7f;\">xml<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">version<span style=\"color:WindowText;\">=<span style=\"font-style:italic;color:#2a00ff;\">\"1.0\"</span></span></span>&nbsp;<span style=\"color:#7f007f;\">encoding<span style=\"color:WindowText;\">=<span style=\"font-style:italic;color:#2a00ff;\">\"UTF-8\"</span></span></span>&nbsp;</span></span>?&gt;</span></div><div><span style=\"font-size:10pt;color:#008080;font-family:'Source Code Pro';\">&lt;!<span style=\"color:#3f7f7f;\">DOCTYPE<span style=\"color:WindowText;\">&nbsp;</span></span>configuration<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#808080;\">PUBLIC</span>&nbsp;</span>\"-//mybatis.org//DTD&nbsp;Config&nbsp;3.0//EN\"</span></div><div><span style=\"font-size:10pt;color:#3f7f5f;font-family:'Source Code Pro';\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"<span style=\"color:#008080;\">&gt;</span></span></div><div><span style=\"font-size:10pt;color:#008080;font-family:'Source Code Pro';\">&lt;<span style=\"color:#3f7f7f;\">configuration</span>&gt;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;<span style=\"color:#3f7f7f;\">typeAliases</span>&gt;</span>&nbsp;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;<span style=\"color:#3f7f7f;\">typeAlias<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">alias</span></span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"User\"<span style=\"font-style:normal;color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">type</span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"com.yihaomen.mybatis.model.User\"<span style=\"font-style:normal;color:#008080;\">/&gt;</span></span>&nbsp;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;/<span style=\"color:#3f7f7f;\">typeAliases</span>&gt;</span>&nbsp;</span></div><div></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;<span style=\"color:#3f7f7f;\">environments<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">default</span></span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"development\"<span style=\"font-style:normal;color:#008080;\">&gt;</span></span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;<span style=\"color:#3f7f7f;\">environment<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">id</span></span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"development\"<span style=\"font-style:normal;color:#008080;\">&gt;</span></span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;<span style=\"color:#3f7f7f;\">transactionManager<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">type</span></span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"JDBC\"<span style=\"font-style:normal;color:#008080;\">/&gt;</span></span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;<span style=\"color:#3f7f7f;\">dataSource<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">type</span></span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"POOLED\"<span style=\"font-style:normal;color:#008080;\">&gt;</span></span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;<span style=\"color:#3f7f7f;\">property<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">name</span></span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"driver\"<span style=\"font-style:normal;color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">value</span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"com.mysql.jdbc.Driver\"<span style=\"font-style:normal;color:#008080;\">/&gt;</span></span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;<span style=\"color:#3f7f7f;\">property<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">name</span></span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"url\"<span style=\"font-style:normal;color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">value</span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"jdbc:mysql://127.0.0.1:3306/mybatis-test\"<span style=\"font-style:normal;color:WindowText;\">&nbsp;<span style=\"color:#008080;\">/&gt;</span></span></span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;<span style=\"color:#3f7f7f;\">property<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">name</span></span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"username\"<span style=\"font-style:normal;color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">value</span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"root\"<span style=\"font-style:normal;color:#008080;\">/&gt;</span></span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;<span style=\"color:#3f7f7f;\">property<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">name</span></span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"password\"<span style=\"font-style:normal;color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">value</span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"123456\"<span style=\"font-style:normal;color:#008080;\">/&gt;</span></span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;/<span style=\"color:#3f7f7f;\">dataSource</span>&gt;</span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;/<span style=\"color:#3f7f7f;\">environment</span>&gt;</span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;/<span style=\"color:#3f7f7f;\">environments</span>&gt;</span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;<span style=\"color:#3f7f7f;\">mappers</span>&gt;</span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;<span style=\"color:#3f7f7f;\">mapper<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">resource</span></span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"com/hanfeng/mybatis/model/User.xml\"<span style=\"font-style:normal;color:#008080;\">/&gt;</span></span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;/<span style=\"color:#3f7f7f;\">mappers</span>&gt;</span></span></div><span style=\"font-size:10pt;color:#008080;font-family:'Source Code Pro';\">&lt;/<span style=\"color:#3f7f7f;\">configuration</span>&gt;</span></div><div>2、创建与数据库对应的类</div><div><div><!--WizRtf2Html Charset=0  --><span style=\"font-weight:bold;font-size:10pt;color:#7f0055;font-family:'Source Code Pro';\">package<span style=\"font-weight:normal;color:WindowText;\">&nbsp;com.hanfeng.mybatis.model;</span></span></div><div></div><div><span style=\"font-size:10pt;color:#3f5fbf;font-family:'Source Code Pro';\">/**</span></div><div><span style=\"font-size:10pt;color:#3f5fbf;font-family:'Source Code Pro';\">&nbsp;*&nbsp;<span style=\"font-weight:bold;color:#7f9fbf;\">@author</span>&nbsp;hanfeng&nbsp;E<span style=\"color:#7f7f9f;\">-</span>mail:zhdevelop@gmail.com</span></div><div><span style=\"font-size:10pt;color:#3f5fbf;font-family:'Source Code Pro';\">&nbsp;*&nbsp;<span style=\"font-weight:bold;color:#7f9fbf;\">@version</span>&nbsp;2013年11月25日&nbsp;上午11:51:09</span></div><div><span style=\"font-size:10pt;color:#3f5fbf;font-family:'Source Code Pro';\">&nbsp;*&nbsp;</span></div><div><span style=\"font-size:10pt;color:#3f5fbf;font-family:'Source Code Pro';\">&nbsp;*/</span></div><div></div><div><span style=\"font-weight:bold;font-size:10pt;color:#7f0055;font-family:'Source Code Pro';\">public<span style=\"font-weight:normal;color:WindowText;\">&nbsp;</span>class<span style=\"font-weight:normal;color:WindowText;\">&nbsp;User&nbsp;{</span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">private</span>&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">int</span>&nbsp;<span style=\"color:#0000c0;\">id</span>;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">private</span>&nbsp;String&nbsp;<span style=\"color:#0000c0;\">account</span>;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">private</span>&nbsp;String&nbsp;<span style=\"color:#0000c0;\">password</span>;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">private</span>&nbsp;String&nbsp;<span style=\"color:#0000c0;\">name</span>;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">private</span>&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">int</span>&nbsp;<span style=\"color:#0000c0;\">age</span>;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">private</span>&nbsp;String&nbsp;<span style=\"color:#0000c0;\">address</span>;</span></div><div></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">public</span>&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">int</span>&nbsp;getId()&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">return</span>&nbsp;<span style=\"color:#0000c0;\">id</span>;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">public</span>&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">void</span>&nbsp;setId(<span style=\"font-weight:bold;color:#7f0055;\">int</span>&nbsp;id)&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">this</span>.<span style=\"color:#0000c0;\">id</span>&nbsp;=&nbsp;id;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">public</span>&nbsp;String&nbsp;getAccount()&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">return</span>&nbsp;<span style=\"color:#0000c0;\">account</span>;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">public</span>&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">void</span>&nbsp;setAccount(String&nbsp;account)&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">this</span>.<span style=\"color:#0000c0;\">account</span>&nbsp;=&nbsp;account;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">public</span>&nbsp;String&nbsp;getPassword()&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">return</span>&nbsp;<span style=\"color:#0000c0;\">password</span>;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">public</span>&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">void</span>&nbsp;setPassword(String&nbsp;password)&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">this</span>.<span style=\"color:#0000c0;\">password</span>&nbsp;=&nbsp;password;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">public</span>&nbsp;String&nbsp;getName()&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">return</span>&nbsp;<span style=\"color:#0000c0;\">name</span>;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">public</span>&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">void</span>&nbsp;setName(String&nbsp;name)&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">this</span>.<span style=\"color:#0000c0;\">name</span>&nbsp;=&nbsp;name;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">public</span>&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">int</span>&nbsp;getAge()&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">return</span>&nbsp;<span style=\"color:#0000c0;\">age</span>;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">public</span>&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">void</span>&nbsp;setAge(<span style=\"font-weight:bold;color:#7f0055;\">int</span>&nbsp;age)&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">this</span>.<span style=\"color:#0000c0;\">age</span>&nbsp;=&nbsp;age;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">public</span>&nbsp;String&nbsp;getAddress()&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">return</span>&nbsp;<span style=\"color:#0000c0;\">address</span>;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">public</span>&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">void</span>&nbsp;setAddress(String&nbsp;address)&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">this</span>.<span style=\"color:#0000c0;\">address</span>&nbsp;=&nbsp;address;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">}</span></div></div><div>3、创建类的映射文件</div><div><div><!--WizRtf2Html Charset=0  --><span style=\"font-size:10pt;color:#008080;font-family:'Source Code Pro';\">&lt;?<span style=\"color:#3f7f7f;\">xml<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">version<span style=\"color:WindowText;\">=<span style=\"font-style:italic;color:#2a00ff;\">\"1.0\"</span></span></span>&nbsp;<span style=\"color:#7f007f;\">encoding<span style=\"color:WindowText;\">=<span style=\"font-style:italic;color:#2a00ff;\">\"UTF-8\"</span></span></span></span></span>?&gt;</span></div><div><span style=\"font-size:10pt;color:#008080;font-family:'Source Code Pro';\">&lt;!<span style=\"color:#3f7f7f;\">DOCTYPE<span style=\"color:WindowText;\">&nbsp;</span></span>mapper<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#808080;\">PUBLIC</span>&nbsp;</span>\"-//mybatis.org//DTD&nbsp;Mapper&nbsp;3.0//EN\"<span style=\"color:WindowText;\">&nbsp;</span></span></div><div><span style=\"font-size:10pt;color:#3f7f5f;font-family:'Source Code Pro';\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"<span style=\"color:#008080;\">&gt;</span></span></div><div><span style=\"font-size:10pt;color:#008080;font-family:'Source Code Pro';\">&lt;<span style=\"color:#3f7f7f;\">mapper<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">namespace<span style=\"color:WindowText;\">=<span style=\"font-style:italic;color:#2a00ff;\">\"com.hanfeng.mybatis.model.User\"</span></span></span></span></span>&gt;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;<span style=\"color:#3f7f7f;\">select<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">id</span></span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"selectUserById\"<span style=\"font-style:normal;color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">parameterType</span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"int\"<span style=\"font-style:normal;color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">resultType</span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"User\"<span style=\"font-style:normal;color:#008080;\">&gt;</span></span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;select&nbsp;*&nbsp;from&nbsp;user&nbsp;where&nbsp;id&nbsp;=&nbsp;#{id}</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;/<span style=\"color:#3f7f7f;\">select</span>&gt;</span></span></div><span style=\"font-size:10pt;color:#008080;font-family:'Source Code Pro';\">&lt;/<span style=\"color:#3f7f7f;\">mapper</span>&gt;</span></div><div>\n</div><div>4、创建junit测试类</div><div><div><!--WizRtf2Html Charset=0  --><span style=\"font-weight:bold;font-size:10pt;color:#7f0055;font-family:'Source Code Pro';\">package<span style=\"font-weight:normal;color:WindowText;\">&nbsp;com.hanfeng.mybatis.test;</span></span></div><div></div><div><span style=\"font-weight:bold;font-size:10pt;color:#7f0055;font-family:'Source Code Pro';\">import<span style=\"font-weight:normal;color:WindowText;\">&nbsp;java.io.IOException;</span></span></div><div><span style=\"font-weight:bold;font-size:10pt;color:#7f0055;font-family:'Source Code Pro';\">import<span style=\"font-weight:normal;color:WindowText;\">&nbsp;java.io.Reader;</span></span></div><div></div><div><span style=\"font-weight:bold;font-size:10pt;color:#7f0055;font-family:'Source Code Pro';\">import<span style=\"font-weight:normal;color:WindowText;\">&nbsp;org.apache.ibatis.io.Resources;</span></span></div><div><span style=\"font-weight:bold;font-size:10pt;color:#7f0055;font-family:'Source Code Pro';\">import<span style=\"font-weight:normal;color:WindowText;\">&nbsp;org.apache.ibatis.session.SqlSession;</span></span></div><div><span style=\"font-weight:bold;font-size:10pt;color:#7f0055;font-family:'Source Code Pro';\">import<span style=\"font-weight:normal;color:WindowText;\">&nbsp;org.apache.ibatis.session.SqlSessionFactory;</span></span></div><div><span style=\"font-weight:bold;font-size:10pt;color:#7f0055;font-family:'Source Code Pro';\">import<span style=\"font-weight:normal;color:WindowText;\">&nbsp;org.apache.ibatis.session.SqlSessionFactoryBuilder;</span></span></div><div><span style=\"font-weight:bold;font-size:10pt;color:#7f0055;font-family:'Source Code Pro';\">import<span style=\"font-weight:normal;color:WindowText;\">&nbsp;org.junit.Before;</span></span></div><div><span style=\"font-weight:bold;font-size:10pt;color:#7f0055;font-family:'Source Code Pro';\">import<span style=\"font-weight:normal;color:WindowText;\">&nbsp;org.junit.Test;</span></span></div><div></div><div><span style=\"font-weight:bold;font-size:10pt;color:#7f0055;font-family:'Source Code Pro';\">import<span style=\"font-weight:normal;color:WindowText;\">&nbsp;com.alibaba.fastjson.JSON;</span></span></div><div><span style=\"font-weight:bold;font-size:10pt;color:#7f0055;font-family:'Source Code Pro';\">import<span style=\"font-weight:normal;color:WindowText;\">&nbsp;com.hanfeng.mybatis.model.User;</span></span></div><div></div><div><span style=\"font-size:10pt;color:#3f5fbf;font-family:'Source Code Pro';\">/**&nbsp;</span></div><div><span style=\"font-size:10pt;color:#3f5fbf;font-family:'Source Code Pro';\">&nbsp;*&nbsp;<span style=\"font-weight:bold;color:#7f9fbf;\">@author</span>&nbsp;hanfeng&nbsp;E<span style=\"color:#7f7f9f;\">-</span>mail:zhdevelop@gmail.com&nbsp;</span></div><div><span style=\"font-size:10pt;color:#3f5fbf;font-family:'Source Code Pro';\">&nbsp;*&nbsp;<span style=\"font-weight:bold;color:#7f9fbf;\">@version</span>&nbsp;2013年11月25日&nbsp;上午11:59:18&nbsp;</span></div><div><span style=\"font-size:10pt;color:#3f5fbf;font-family:'Source Code Pro';\">&nbsp;*&nbsp;</span></div><div><span style=\"font-size:10pt;color:#3f5fbf;font-family:'Source Code Pro';\">&nbsp;*/</span></div><div></div><div><span style=\"font-weight:bold;font-size:10pt;color:#7f0055;font-family:'Source Code Pro';\">public<span style=\"font-weight:normal;color:WindowText;\">&nbsp;</span>class<span style=\"font-weight:normal;color:WindowText;\">&nbsp;TestMyBatis{</span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#3f5fbf;\">/**</span></span></div><div><span style=\"font-size:10pt;color:#3f5fbf;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;MyBatis应用是以一个SqlSessionFactory对象的实例为核心，</span></div><div><span style=\"font-size:10pt;color:#3f5fbf;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;该对象的实例可以通过SqlSessionFactoryBulider对象获得。</span></div><div><span style=\"font-size:10pt;color:#3f5fbf;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;</span></div><div><span style=\"font-size:10pt;color:#3f5fbf;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">private</span>&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">static</span>&nbsp;SqlSessionFactory&nbsp;<span style=\"font-style:italic;color:#0000c0;\">sqlSessionFactory</span>;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">private</span>&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">static</span>&nbsp;Reader&nbsp;<span style=\"font-style:italic;color:#0000c0;\">reader</span>;&nbsp;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">public</span>&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">static</span>&nbsp;SqlSessionFactory&nbsp;getSqlSessionFactory()&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">return</span>&nbsp;<span style=\"font-style:italic;color:#0000c0;\">sqlSessionFactory</span>;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#646464;\">@Before</span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">public</span>&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">void</span>&nbsp;before(){</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">try</span>&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-style:italic;color:#0000c0;\">reader</span>&nbsp;=&nbsp;Resources.<span style=\"font-style:italic;\">getResourceAsReader</span>(<span style=\"color:#2a00ff;\">\"Configuration.xml\"</span>);</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-style:italic;color:#0000c0;\">sqlSessionFactory</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">new</span>&nbsp;SqlSessionFactoryBuilder().build(<span style=\"font-style:italic;color:#0000c0;\">reader</span>);</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">catch</span>&nbsp;(IOException&nbsp;e)&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#646464;\">@Test</span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">public</span>&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">void</span>&nbsp;test1(){</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#3f7f5f;\">//获取SqlSession实例，SqlSession对象完全包含以数据库为背景的所有执行sql操作的方法。</span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#3f7f5f;\">//我们可以用&nbsp;SqlSession实例来直接执行已映射的&nbsp;SQL语句</span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SqlSession&nbsp;session&nbsp;=&nbsp;<span style=\"font-style:italic;color:#0000c0;\">sqlSessionFactory</span>.openSession();</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">try</span>&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;User&nbsp;user&nbsp;=&nbsp;(User)session.selectOne(<span style=\"color:#2a00ff;\">\"com.hanfeng.mybatis.model.User.selectUserById\"</span>,1);</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.<span style=\"font-style:italic;color:#0000c0;\">out</span>.println(JSON.<span style=\"font-style:italic;\">toJSONString</span>(user));</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">catch</span>&nbsp;(Exception&nbsp;e)&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<span style=\"font-weight:bold;color:#7f0055;\">finally</span>{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session.close();</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">}</span></div></div><div>\n</div><div>执行test case ，成功获取到结果</div><div>![](6866e0e6-7706-45fd-a35e-5f52fc9371e4_files/18230448.png)</div><div>代码地址：[https://github.com/zhdevelop/mybatis3-study.git](https://github.com/zhdevelop/mybatis3-study.git)&nbsp; 01.mybaitis</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div>\n\n<div>[来自为知笔记(Wiz)](http://www.wiz.cn/i/bf10110a \"来自为知笔记(Wiz)\")</div>","mtime":1386290932000,"source":"_posts/mybatis实战之二：开发环境搭建及helloworld.md"},"ksb4swfuftdxqdhf":{"_id":"ksb4swfuftdxqdhf","content":"title: \"OS X Mountain Lion  PHP版本升级方法\"\nid: 915\ndate: 2013-09-13 21:17:01\ntags: \n- mac\n- php\ncategories: \n- PHP5\n---\n\n推荐使用[php-osx by Liip](http://php-osx.liip.ch/)\n\n### PHP 5.3\n\n<pre>curl -s http://php-osx.liip.ch/install.sh | bash -s 5.3</pre>\n\n### PHP 5.4 (Old stable)\n\n<pre>curl -s http://php-osx.liip.ch/install.sh | bash -s 5.4</pre>\n\n### PHP 5.5 (Current stable)\n\n<pre>curl -s http://php-osx.liip.ch/install.sh | bash -s 5.5\n在终端输入上面的更新地址，按要求输入密码即可完成升级安装。因为天朝网络的特殊性，该怎么办你们懂的，安装完毕要更改环境变量才可以显示新版本的。\n\nexport PATH=/usr/local/php5/bin:$PATH</pre>","mtime":1386739084000,"source":"_posts/os-x-mountain-lion-php版本升级方法.md"},"misggkkrm4s0f2qh":{"_id":"misggkkrm4s0f2qh","content":"title: \"MyBatis实战之八：动态SQL\"\nid: 1001\ndate: 2013-11-26 17:56:08\ntags: \ncategories: \n- 未分类\n---\n\n详见官方文档：[http://mybatis.github.io/mybatis-3/zh/dynamic-sql.html](http://mybatis.github.io/mybatis-3/zh/dynamic-sql.html)<div>\n</div><div><!--StartFragment-->\n\n## 动态 SQL<a name=\"a_SQL\" style=\"color: rgb(0, 136, 204);\"></a>\n<!--more-->\n\nMyBatis 的一个强大的特性之一通常是它的动态 SQL 能力。 如果你有使用 JDBC 或其他 相似框架的经验,你就明白条件地串联 SQL 字符串在一起是多么的痛苦,确保不能忘了空 格或在列表的最后省略逗号。动态 SQL 可以彻底处理这种痛苦。\n\n通常使用动态 SQL 不可能是独立的一部分,MyBatis 当然使用一种强大的动态 SQL 语 言来改进这种情形,这种语言可以被用在任意映射的 SQL 语句中。\n\n动态 SQL 元素和使用 JSTL 或其他相似的基于 XML 的文本处理器相似。在 MyBatis 之 前的版本中,有很多的元素需要来了解。MyBatis 3 大大提升了它们,现在用不到原先一半 的元素就能工作了。MyBatis 采用功能强大的基于 OGNL 的表达式来消除其他元素。\n\n*   if\n*   choose (when, otherwise)\n*   trim (where, set)\n*   foreach<a name=\"if\" style=\"color: rgb(0, 136, 204); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; background-color: rgb(255, 255, 255);\"></a><div class=\"section\" id=\"if\" style=\"color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; background-color: rgb(255, 255, 255);\">\n\n### if<a name=\"if\" style=\"color: rgb(0, 136, 204);\"></a>\n\n在动态 SQL 中所做的最通用的事情是包含部分 where 字句的条件。比如:\n<div class=\"source\"><div><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;select</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">id</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"findActiveBlogWithTitleLike\"</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div>&nbsp;</div><div>&nbsp;</div></span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">parameterType</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"Blog\"</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">resultType</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"Blog\"</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div>&nbsp; SELECT * FROM BLOG </div><div>&nbsp; WHERE state = ‘ACTIVE’ </div><div>&nbsp;</div></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;if</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">test</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"title != null\"</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div>&nbsp;&nbsp;&nbsp; AND title like #{title}</div><div>&nbsp;</div></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/if&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/select&gt;</span></div></div>\n\n这条语句会提供一个可选的文本查找功能。如果你没有传递 title,那么所有激活的博客 都会被返回。但是如果你传递了 title,那么就会查找相近的 title(对于敏锐的检索,这中情 况下你的参数值需要包含任意的遮掩或通配符)的博客。\n\n假若我们想可选地搜索 title 和 author 呢?首先,要改变语句的名称让它有意义。然后 简单加入另外的一个条件。\n<div class=\"source\"><div><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;select</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">id</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"findActiveBlogLike\"</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div>&nbsp;</div><div>&nbsp;</div></span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">parameterType</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"Blog\"</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">resultType</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"Blog\"</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div>&nbsp; SELECT * FROM BLOG WHERE state = ‘ACTIVE’ </div><div>&nbsp;</div></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;if</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">test</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"title != null\"</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div>&nbsp;&nbsp;&nbsp; AND title like #{title}</div><div>&nbsp;</div></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/if&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">  </span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;if</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">test</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"author != null and author.name != null\"</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div>&nbsp;&nbsp;&nbsp; AND author_name like #{author.name}</div><div>&nbsp;</div></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/if&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/select&gt;</span></div></div></div><a name=\"chooseWhenOtherwise\" style=\"color: rgb(0, 136, 204); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; background-color: rgb(255, 255, 255);\"></a><div class=\"section\" id=\"chooseWhenOtherwise\" style=\"color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; background-color: rgb(255, 255, 255);\">\n\n### choose, when, otherwise<a name=\"choose_when_otherwise\" style=\"color: rgb(0, 136, 204);\"></a>\n\n有时我们不想应用所有的条件, 相反我们想选择很多情况下的一种。 Java 中的 switch 和 语句相似,MyBatis 提供 choose 元素。\n\n我们使用上面的示例,但是现在我们来搜索当 title 提供时仅有 title 条件,当 author 提 供时仅有 author 条件。如果二者都没提供,只返回 featured blogs(也许是由管理员策略地选 择的结果列表,而不是返回大量没有意义的随机博客结果列表)。\n<div class=\"source\"><div><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;select</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">id</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"findActiveBlogLike\"</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div>&nbsp;</div><div>&nbsp;</div></span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">parameterType</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"Blog\"</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">resultType</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"Blog\"</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div>&nbsp; SELECT * FROM BLOG WHERE state = ‘ACTIVE’</div><div>&nbsp;</div></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;choose&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">    </span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;when</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">test</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"title != null\"</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AND title like #{title}</div><div>&nbsp;</div></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/when&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">    </span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;when</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">test</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"author != null and author.name != null\"</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AND author_name like #{author.name}</div><div>&nbsp;</div></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/when&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">    </span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;otherwise&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AND featured = 1</div><div>&nbsp;</div></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/otherwise&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">  </span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/choose&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/select&gt;</span></div></div></div><a name=\"trimWhereSet\" style=\"color: rgb(0, 136, 204); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; background-color: rgb(255, 255, 255);\"></a><div class=\"section\" id=\"trimWhereSet\" style=\"color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; background-color: rgb(255, 255, 255);\">\n\n### trim, where, set<a name=\"trim_where_set\" style=\"color: rgb(0, 136, 204);\"></a>\n\n前面的例子已经方便地处理了一个臭名昭著的动态 SQL 问题。要考虑我们回到“if”示 例后会发生什么,但是这次我们将“ACTIVE = 1”也设置成动态的条件。\n<div class=\"source\"><div><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;select</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">id</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"findActiveBlogLike\"</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div>&nbsp;</div><div>&nbsp;</div></span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">parameterType</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"Blog\"</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">resultType</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"Blog\"</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div>&nbsp; SELECT * FROM BLOG </div><div>&nbsp; WHERE </div><div>&nbsp;</div></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;if</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">test</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"state != null\"</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div>&nbsp;&nbsp;&nbsp; state = #{state}</div><div>&nbsp;</div></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/if&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div>&nbsp;</div><div>&nbsp;</div></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;if</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">test</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"title != null\"</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div>&nbsp;&nbsp;&nbsp; AND title like #{title}</div><div>&nbsp;</div></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/if&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">  </span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;if</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">test</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"author != null and author.name != null\"</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div>&nbsp;&nbsp;&nbsp; AND author_name like #{author.name}</div><div>&nbsp;</div></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/if&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/select&gt;</span></div></div>\n\n如果这些条件都没有匹配上将会发生什么?这条 SQL 结束时就会成这样:\n<div class=\"source\"><div><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">SELECT </span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">*</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div> FROM BLOG </div><div>WHERE</div></span></div></div>\n\n这会导致查询失败。如果仅仅第二个条件匹配是什么样的?这条 SQL 结束时就会是这 样:\n<div class=\"source\"><div><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">SELECT </span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">*</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div> FROM BLOG </div><div>WHERE </div><div>AND title like </div></span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">‘</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">someTitle</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">’</span></div></div>\n\n这个查询也会失败。这个问题不能简单的用条件来解决,如果你从来没有这样写过,那 么你以后也不会这样来写。\n\nMyBatis 有一个简单的处理,这在 90%的情况下都会有用。而在不能使用的地方,你可 以自定义处理方式。加上一个简单的改变,所有事情都会顺利进行:\n<div class=\"source\"><div><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;select</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">id</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"findActiveBlogLike\"</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div>&nbsp;</div><div>&nbsp;</div></span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">parameterType</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"Blog\"</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">resultType</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"Blog\"</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div>&nbsp; SELECT * FROM BLOG </div><div>&nbsp;</div></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;where&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div>&nbsp;</div><div>&nbsp;</div></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;if</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">test</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"state != null\"</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; state = #{state}</div><div>&nbsp;</div></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/if&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div>&nbsp;</div><div>&nbsp;</div></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;if</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">test</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"title != null\"</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AND title like #{title}</div><div>&nbsp;</div></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/if&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">    </span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;if</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">test</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"author != null and author.name != null\"</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AND author_name like #{author.name}</div><div>&nbsp;</div></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/if&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">  </span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/where&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/select&gt;</span></div></div>\n\nwhere 元素知道如果由被包含的标记返回任意内容,就仅仅插入“WHERE” 。而且,如 果以“AND”或“OR”开头的内容,那么就会跳过 WHERE 不插入。\n\n如果 where 元素没有做出你想要的,你可以使用 trim 元素来自定义。比如,和 where 元素相等的 trim 元素是:\n<div class=\"source\"><div><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;trim</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">prefix</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"WHERE\"</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">prefixOverrides</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"AND |OR \"</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">&nbsp; ... </span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/trim&gt;</span></div></div>\n\nprefixOverrides 属性采用管道文本分隔符来覆盖, 这里的空白也是重要的。 它的结果就是移除 在 prefixOverrides 属性中指定的内容,插入在 with 属性中的内容。\n\n和动态更新语句相似的解决方案是 set。set 元素可以被用于动态包含更新的列,而不包 含不需更新的。比如:\n<div class=\"source\"><div><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;update</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">id</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"updateAuthorIfNecessary\"</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">       </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">parameterType</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"domain.blog.Author\"</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div>&nbsp; update Author</div><div>&nbsp;</div></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;set&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">      </span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;if</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">test</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"username != null\"</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">username=#{username},</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/if&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">      </span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;if</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">test</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"password != null\"</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">password=#{password},</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/if&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">      </span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;if</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">test</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"email != null\"</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">email=#{email},</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/if&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">      </span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;if</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">test</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"bio != null\"</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">bio=#{bio}</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/if&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">    </span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/set&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">&nbsp; where id=#{id}</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/update&gt;</span></div></div>\n\n这里,set 元素会动态前置 SET 关键字,而且也会消除任意无关的逗号,那也许在应用 条件之后来跟踪定义的值。\n\n如果你对和这相等的 trim 元素好奇,它看起来就是这样的:\n<div class=\"source\"><div><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;trim</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">prefix</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"SET\"</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">suffixOverrides</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\",\"</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">&nbsp; ...</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/trim&gt;</span></div></div>\n\n注意这种情况下我们覆盖一个后缀,而同时也附加前缀。\n</div><div class=\"section\" style=\"color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; background-color: rgb(255, 255, 255);\">\n\n### foreach<a name=\"foreach\" style=\"color: rgb(0, 136, 204);\"></a>\n\n另外一个动态 SQL 通用的必要操作是迭代一个集合, 通常是构建在 IN 条件中的。 比如:\n<div class=\"source\"><div><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;select</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">id</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"selectPostIn\"</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">resultType</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"domain.blog.Post\"</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div>&nbsp; SELECT *</div><div>&nbsp; FROM POST P</div><div>&nbsp; WHERE ID in</div><div>&nbsp;</div></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;foreach</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">item</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"item\"</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">index</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"index\"</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">collection</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"list\"</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">      </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">open</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"(\"</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">separator</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\",\"</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">close</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\")\"</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #{item}</div><div>&nbsp;</div></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/foreach&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/select&gt;</span></div></div>\n\nforeach 元素是非常强大的,它允许你指定一个集合,声明集合项和索引变量,它们可 以用在元素体内。它也允许你指定开放和关闭的字符串,在迭代之间放置分隔符。这个元素 是很智能的,它不会偶然地附加多余的分隔符。\n\n<span class=\"label important\" style=\"font-size: 11.844px; font-weight: bold; line-height: 14px; color: rgb(255, 255, 255); text-shadow: rgba(0, 0, 0, 0.247059) 0px -1px 0px; white-space: nowrap; vertical-align: baseline; background-color: rgb(153, 153, 153); padding: 1px 4px 2px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px;\">注意</span>&nbsp;你可以传递一个 List 实例或者数组作为参数对象传给 MyBatis。当你这么做的时 候,MyBatis 会自动将它包装在一个 Map 中,用名称在作为键。List 实例将会以“list” 作为键,而数组实例将会以“array”作为键。\n\n这个部分是对关于 XML 配置文件和 XML 映射文件的而讨论的。下一部分将详细讨论 Java API,所以你可以得到你已经创建的最有效的映射。\n</div><div class=\"section\" style=\"color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; background-color: rgb(255, 255, 255);\">\n\n### bind<a name=\"bind\" style=\"color: rgb(0, 136, 204);\"></a>\n\nThe&nbsp;<tt style=\"font-family: Monaco, 'Andale Mono', 'Courier New', monospace; font-size: 12px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(254, 233, 204); color: rgba(0, 0, 0, 0.74902); padding: 1px 3px;\">bind</tt>&nbsp;element lets you create a variable out of an OGNL expression and bind it to the context. For example:\n<div class=\"source\"><div><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;select</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">id</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"selectBlogsLike\"</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">parameterType</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"Blog\"</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">resultType</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"Blog\"</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">  </span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;bind</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">name</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"pattern\"</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">value</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"'%' + _parameter.getTitle() + '%'\"</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">/&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div>&nbsp; SELECT * FROM BLOG</div><div>&nbsp; WHERE title LIKE #{pattern}</div></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/select&gt;</span></div></div></div><div class=\"section\" style=\"color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; background-color: rgb(255, 255, 255);\">\n\n### Multi-db vendor support<a name=\"Multi-db_vendor_support\" style=\"color: rgb(0, 136, 204);\"></a>\n\nIf a databaseIdProvider was configured a \"_databaseId\" variable is available for dynamic code, so you can build different statements depending on database vendor. Have a look at the following example:\n<div class=\"source\"><div><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;insert</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">id</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"insert\"</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">parameterType</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"org.myapp.domain.User\"</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">  </span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;selectKey</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">keyProperty</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"id\"</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">resultType</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"int\"</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">order</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"BEFORE\"</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">    </span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;if</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">test</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"_databaseId == 'oracle'\"</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; select seq_users.nextval from dual</div><div>&nbsp;</div></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/if&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">    </span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;if</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">test</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"_databaseId == 'db2'\"</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; select nextval for seq_users from sysibm.sysdummy1\"</div><div>&nbsp;</div></span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/if&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">  </span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/selectKey&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">&nbsp; insert into users values (#{id}, #{name})</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/insert&gt;</span></div></div></div><div class=\"section\" style=\"color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; background-color: rgb(255, 255, 255);\">\n\n### Pluggable Scripting Languages For Dynamic SQL<a name=\"Pluggable_Scripting_Languages_For_Dynamic_SQL\" style=\"color: rgb(0, 136, 204);\"></a>\n\nStarting from version 3.2 MyBatis supports pluggable scripting languages, so you can plug a language driver and use that language to write your dynamic SQL queries.\n\nThere are two built-in languages:\n\n*   xml\n*   raw\n\nThe&nbsp;<tt style=\"font-family: Monaco, 'Andale Mono', 'Courier New', monospace; font-size: 12px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(254, 233, 204); color: rgba(0, 0, 0, 0.74902); padding: 1px 3px;\">xml</tt>&nbsp;language is the default one. It is able to execute all the dynamic tags we saw in the previous sections.\n\nThe&nbsp;<tt style=\"font-family: Monaco, 'Andale Mono', 'Courier New', monospace; font-size: 12px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(254, 233, 204); color: rgba(0, 0, 0, 0.74902); padding: 1px 3px;\">raw</tt>&nbsp;language is in fact the absence of language. When using this setting MyBatis just performs the parameter substitution and passes the statement to the database driver. As you may guess, the&nbsp;<tt style=\"font-family: Monaco, 'Andale Mono', 'Courier New', monospace; font-size: 12px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(254, 233, 204); color: rgba(0, 0, 0, 0.74902); padding: 1px 3px;\">raw</tt>&nbsp;language is faster than the&nbsp;<tt style=\"font-family: Monaco, 'Andale Mono', 'Courier New', monospace; font-size: 12px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(254, 233, 204); color: rgba(0, 0, 0, 0.74902); padding: 1px 3px;\">xml</tt>&nbsp;language.\n\nYou can specify the language you want to use in an statement adding the&nbsp;<tt style=\"font-family: Monaco, 'Andale Mono', 'Courier New', monospace; font-size: 12px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(254, 233, 204); color: rgba(0, 0, 0, 0.74902); padding: 1px 3px;\">lang</tt>&nbsp;attribute as follows:\n<div class=\"source\"><div><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;select</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">id</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"selectBlog\"</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"atn\" style=\"color: rgb(102, 0, 102);\">lang</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">=</span><span class=\"atv\" style=\"color: rgb(0, 136, 0);\">\"raw\"</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">&nbsp; SELECT * FROM BLOG</span><span class=\"tag\" style=\"color: rgb(0, 0, 136);\">&lt;/select&gt;</span></div></div>\n\nOr, in the case you are using mappers, using the&nbsp;<tt style=\"font-family: Monaco, 'Andale Mono', 'Courier New', monospace; font-size: 12px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; background-color: rgb(254, 233, 204); color: rgba(0, 0, 0, 0.74902); padding: 1px 3px;\">@Lang</tt>&nbsp;annotation:\n<div class=\"source\"><div><span class=\"kwd\" style=\"color: rgb(0, 0, 136);\">public</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"color: rgb(0, 0, 136);\">interface</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"typ\" style=\"color: rgb(102, 0, 102);\">Mapper</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">  </span><span class=\"lit\" style=\"color: rgb(0, 102, 102);\">@Lang</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">(</span><span class=\"typ\" style=\"color: rgb(102, 0, 102);\">RawLanguageDriver</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">.</span><span class=\"kwd\" style=\"color: rgb(0, 0, 136);\">class</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">)</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">  </span><span class=\"lit\" style=\"color: rgb(0, 102, 102);\">@Select</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">(</span><span class=\"str\" style=\"color: rgb(0, 136, 0);\">\"SELECT * FROM BLOG\"</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">)</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">  </span><span class=\"typ\" style=\"color: rgb(102, 0, 102);\">List</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">&lt;</span><span class=\"typ\" style=\"color: rgb(102, 0, 102);\">Blog</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> selectBlog</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">();</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"></span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">}</span></div></div>\n\nYou can also implement your own language driver by implementing the following interface:\n<div class=\"source\"><div><span class=\"kwd\" style=\"color: rgb(0, 0, 136);\">public</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"kwd\" style=\"color: rgb(0, 0, 136);\">interface</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"typ\" style=\"color: rgb(102, 0, 102);\">LanguageDriver</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">{</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">  </span><span class=\"typ\" style=\"color: rgb(102, 0, 102);\">ParameterHandler</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> createParameterHandler</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">(</span><span class=\"typ\" style=\"color: rgb(102, 0, 102);\">MappedStatement</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> mappedStatement</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"typ\" style=\"color: rgb(102, 0, 102);\">Object</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> parameterObject</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"typ\" style=\"color: rgb(102, 0, 102);\">BoundSql</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> boundSql</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">);</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">  </span><span class=\"typ\" style=\"color: rgb(102, 0, 102);\">SqlSource</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> createSqlSource</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">(</span><span class=\"typ\" style=\"color: rgb(102, 0, 102);\">Configuration</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> configuration</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"typ\" style=\"color: rgb(102, 0, 102);\">XNode</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> script</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"typ\" style=\"color: rgb(102, 0, 102);\">Class</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">&lt;?&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> parameterType</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">);</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\">  </span><span class=\"typ\" style=\"color: rgb(102, 0, 102);\">SqlSource</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> createSqlSource</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">(</span><span class=\"typ\" style=\"color: rgb(102, 0, 102);\">Configuration</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> configuration</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"typ\" style=\"color: rgb(102, 0, 102);\">String</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> script</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">,</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> </span><span class=\"typ\" style=\"color: rgb(102, 0, 102);\">Class</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">&lt;?&gt;</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"> parameterType</span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">);</span><span class=\"pln\" style=\"color: rgb(0, 0, 0);\"></span><span class=\"pun\" style=\"color: rgb(102, 102, 0);\">}</span></div></div></div><!--EndFragment--></div>\n\n<div>[来自为知笔记(Wiz)](http://www.wiz.cn/i/bf10110a \"来自为知笔记(Wiz)\")</div>","mtime":1386290932000,"source":"_posts/mybatis实战之八：动态sql.md"},"4gf5lusk2ylefejn":{"_id":"4gf5lusk2ylefejn","content":"title: \"PHP在Web开发中的应用\"\nid: 918\ndate: 2013-09-13 22:40:35\ntags: \n- PHP运用\ncategories: \n- PHP5\n---\n\nPHP（PHP：Hypertext Preprocessor，超文本预处理器的字母缩写）是一种被广泛应用的开放源代码的多用途脚本语言。PHP可简单地视为一种交流想的开发动态网页用的程序语言，是一种服务器端的，嵌入到HTML中的脚本语言，是开发Web应用程序的理想工具。它具有开源免费、语法简单、跨平台、功能强大，灵活易用及效率高等优点。可以说，PHP已经为Web脚本技术的先驱。在融合了现代编程语言（如：Java和Perl）的一些最佳特性后，PHP、Apache和MYSQL的组合已经成为Web服务器的一种配置标准。\n<!-- more -->\nPHP能做很多事，但PHP主要是在Web开发中用于服务端的脚本程序。PHP需要安装PHP用用程序服务器去解释执行，是用来协助Web服务器工作的编程语言，也可以说是Web服务器功能的扩展，并外挂在Web服务器上一起工作。用户如果通过浏览器访问Web服务器需要得到动态响应的结果，Web服务器就要委托PHP脚本编程语言来完成了。本书中可以用PHP来完成以下工作，但PHP得功能远不局限于此。\n\n##1.收集表单数据\n表单（FORM）是网络编程中最常用的数据输入界面。表单通常在提交时可以使用GET或POST得方法将数据发送给PHP程序脚本。在PHP脚本中，可以以PHP变量的形式访问每一个表单域在PHP脚本中使用。根据PHP版本和设置不同，通过变量可以有3种方法来访问表单数据。所以在PHP中，获得客户输入的具体数据是非常简单的。\n\n##2.生成动态网页\nPHP脚本程序和客户端的JavaScript脚本程序不同的是，PHP代码是运行在服务端的。PHP脚本程序可以根据用户在客户端的不同输入请求，在服务端云翔发ijiaobenhou，动态输出用户请求的内容。客户端就能接收到想得到的结果，但他们无法得知其背后的代码是如何运作的。甚至可以将Web服务器设置成让PHP来处理所有的HTML文件，这么一来，用户就无法得知服务端到底做了什么。\n\n##3.字符串处理\n在编写程序代码或是文本处理时，经常在操作字符串，所以字符串处理一直是程序员使用最多的技术之一，PHP是把字符串作为一种基本的数据类型来处理。在PHP中提供了丰富的字符串处理函数，以及使用强大的正则表达式来对字符串或文本进行搜索、查找、匹配、替换等操作。\n\n##4.动态输出图像\n使用PHP并不局限于输出HTML文本。PHP通过使用GD扩展库还能被用来动态输出图像，例如文字按钮、验证码、数据统计图等，还可以轻松地编辑图像，例如处理缩略图和为图片添加水印等，具有强大的图像处理功能。\n\n##5.处理服务端文件系统\n要想让数据可以长期保留，可以使用数据库或是文件系统来存取信息。在某些存取数据相对简单的应用中，或是一些特定的用用中，没有必要使用数据库，就可以采用文件操作。PHP可以利用文件系统函数任意操作服务器中得目录或文件。包括目录或文件的打开、编辑、拷贝、创建、删除，以及文件属性等操作。\n\n##6.编写数据库支持的网页\nPHP最强大显著的特性之一，是它支持很大范围的数据库。用户会发现利用PHP编写数据库支持的网页简单的难以置信。目前，PHP可以连接任何支持世界标准的数据库。\n\n##7.会话跟踪控制\n我们访问Web服务器通常是使用HTTP协议完成的，但它是一个无状态的协议，没有一个内建机制来维护两个事物之间的状态。也就是当一个用户在请求一个页面后在请求另外一个页面时，HTTP将无法告诉我们这两个请求是来自同一个用户。所以可以在PHP中使用会话控制思想在网站中跟踪一个用户，这样就可以很容易做到用户登录的支持，并根据某个用户的授权级别和个人喜好显示相应的内容，也可以根据会话控制记录该用户的行为。\n\n##8.处理XML文件\nPHP具有极其有效的文本处理特性，支持从POSIX扩展或者Perl正则表达式到XML文档解析。为了解析和访问XML文档，PHP4支持SAX和DOM标准，也可以使用XSLT扩展库来转换XMLendangered。PHP5基于强健的libxm2标准化了所有的XML扩展，并天剑了SimpleXML和XMLReader支持，扩展了其在XML方面的功能。\n\n##9.支持利用大量的网络协议\nPHP还支持利用诸如LDAP、IMAP、SNMP、NNTP、POP3、HTTP、COM(Windows环境)等不计其数的协议的服务。还可以开放原始网络端口，使得任何其他的协议能够协同工作。PHP支持和所有Web开发语言之间的WDDX复杂数据交换。关于相互连接，PHP已经支持了对Java对象的即时连接，并且可以将他们自由的用做PHP对象。甚至可以用我们的CORBA扩展库来访问远程对象。\n\n##10.服务器端的其他相关操作\n如果将PHP用于电子商务领域，会发想其Cybercash支付、CyberMUT、VeriSign Payflow Pro以及MCVE函数对于在线交易程序来说是非常有用的。另外，还有很多其他有趣的扩展库。例如mnoGoSearch搜索引擎函数、IRC网关函数、多种压缩工具（gzip、bz2）、日历转换、翻译......\n\nPHP能够用在所有的主流操作系统上，包括Linux、Unix的各种变种（包括HP-UX、Solaris和OpenBSD）、Microsoft Windows、Mac OS X、RISC OS等。惊天，PHP已经支持了大多数的Web服务器，包括Apache、Microsoft Internet Information Server(IIS)、Personal Web Server(PWS)、Netscape,以及iplant Server、Oreilly Website Pro Server、Caudium、Xitami、OmniHTTPd等。对于大多数的服务器，PHP提供了一个模块；还有一些PHP支持CGI标准，使得PHP能够作为CGI处理器来工作。\n\n综上所述，使用PHP，可以自由地选择操作系统和Web服务器以及合适的数据库管理系统。同时，还可以在开发时选择使用面向过程和面向对象，或者两者混合的方式来开发。尽管PHP4不支持OOP所有的标准，但很多代码仓库和大型的应用程序（包括PEAR库）仅适用OOP代码来开发。PHP5弥补了PHP4的这一弱点，引入了完全的对象模型。","mtime":1386739063000,"source":"_posts/php在web开发中的应用.md"},"tib27g63svzzq05y":{"_id":"tib27g63svzzq05y","content":"title: \"QT介绍\"\nid: 566\ndate: 2013-05-24 09:24:23\ntags: \n- QT\n- QT介绍\ncategories: \n- Qt\n- 程序人生\n---\n\n**<span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体;\"><span style=\"mso-list: Ignore;\">一、<span style=\"font: 7pt 'Times New Roman';\"> </span></span></span>****<span lang=\"EN-US\">Qt</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">与</span><span lang=\"EN-US\">Qt Creator</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">简介</span>**\n\n<!--more-->\n\n![](http://173.234.48.113/wp-content/uploads/2013/05/wpid-9e0053678da7581f17cd73c760a42eb8_clip_image001.gif)\n\n<span lang=\"EN-US\">Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">是一个跨平台应用程序和</span><span lang=\"EN-US\"> UI </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">开发框架。使用</span><span lang=\"EN-US\"> Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">您只需一次性开发应用程序，无须重新编写源代码，便可跨不同桌面和嵌入式操作系统部署这些应用程序。</span>\n\n<span lang=\"EN-US\">Qt Creator </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">是全新的跨平台</span><span lang=\"EN-US\"> Qt IDE</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">，可单独使用，也可与</span><span lang=\"EN-US\"> Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">库和开发工具组成</span><span lang=\"EN-US\"> </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">一套完整的</span><span lang=\"EN-US\">SDK. </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">其中包括：高级</span><span lang=\"EN-US\"> C++ </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">代码编辑器，项目和生成管理工具，集成的上下文相关的帮助系统，图形化调试器，代码管理和浏览工具。</span>\n\n**<span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体;\"><span style=\"mso-list: Ignore;\">二、</span></span>****<span lang=\"EN-US\">Qt</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">功能与特性</span>**\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">直观的</span><span lang=\"EN-US\"> C++ </span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">类库：</span>**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">模块化</span><span lang=\"EN-US\"> Qt C++ </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">类库提供一套丰富的应用程序生成块</span><span lang=\"EN-US\"> (block)</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">，包含了构建高级跨平台应用程序所需的全部功能。具有直观，   易学、易用，生成好理解、易维护的代码等特点。</span>\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">跨桌面和嵌入式操作系统的移植性：</span>**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">使用</span><span lang=\"EN-US\"> Qt</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">，您只需一次性开发应用程序，就可跨不同桌面和嵌入式操作系统进行部署，而无须重新编写源代码，可以说</span><span lang=\"EN-US\">Qt</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">无处不在（</span><span lang=\"EN-US\">Qt Everywhere</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">）</span> <span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">。</span>\n\n*   <div class=\"MsoNormal\" style=\"text-indent: -21pt; margin-left: 42pt; mso-list: l13 level2 lfo25; tab-stops: list 42.0pt;\"><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">使用单一的源代码库定位多个操作系统；</span></div>\n*   <div class=\"MsoNormal\" style=\"text-indent: -21pt; margin-left: 42pt; mso-list: l13 level2 lfo25; tab-stops: list 42.0pt;\"><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">通过重新利用代码可将代码跨设备进行部署；</span></div>\n*   <div class=\"MsoNormal\" style=\"text-indent: -21pt; margin-left: 42pt; mso-list: l13 level2 lfo25; tab-stops: list 42.0pt;\"><span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\"><span style=\"font: 7pt 'Times New Roman';\"> </span></span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">无须考虑平台，可重新分配开发资源；</span></div>\n*   <div class=\"MsoNormal\" style=\"text-indent: -21pt; margin-left: 42pt; mso-list: l13 level2 lfo25; tab-stops: list 42.0pt;\"><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">代码不受担忧平台更改影响的长远考虑</span><span lang=\"EN-US\"> </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">；</span></div>\n*   <div class=\"MsoNormal\" style=\"text-indent: -21pt; margin-left: 42pt; mso-list: l13 level2 lfo25; tab-stops: list 42.0pt;\"><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">使开发人员专注于构建软件的核心价值，而不是维护</span><span lang=\"EN-US\"> API </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">。</span></div>\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">具有跨平台</span><span lang=\"EN-US\"> IDE </span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">的集成开发工具：</span>**<span lang=\"EN-US\">Qt Creator </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">是专为满足</span><span lang=\"EN-US\"> Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">开发人员需求而量身定制的跨平台集成开发环境</span><span lang=\"EN-US\"> (IDE)</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">。</span><span lang=\"EN-US\">Qt Creator </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">可在</span><span lang=\"EN-US\"> Windows</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">、</span><span lang=\"EN-US\">Linux/X11 </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">和</span><span lang=\"EN-US\"> Mac OS X </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">桌面操作系统上运行，供开发人员针对多个桌面和移动设备平台创建应用程序。</span>\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">在嵌入式系统上的高运行时间性能，占用资源少。</span>**\n\n**<span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体;\"><span style=\"mso-list: Ignore;\">三、</span></span>****<span lang=\"EN-US\">Qt Creator</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">功能和特性</span>**\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\"><span style=\"font: 7pt 'Times New Roman';\"> </span></span></span>**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">复杂代码编辑器</span>**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">：</span><span lang=\"EN-US\">Qt Creator </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">的高级代码编辑器支持编辑</span><span lang=\"EN-US\"> C++ </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">和</span><span lang=\"EN-US\"> QML (JavaScript)</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">、上下文相关帮助、代码完成功能、本机代码转化及其他功能。</span>\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">版本控制</span>**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">：</span><span lang=\"EN-US\">Qt Creator </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">汇集了最流行的版本控制系统，包括</span><span lang=\"EN-US\"> Git</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">、</span><span lang=\"EN-US\">Subversion</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">、</span><span lang=\"EN-US\">Perforce</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">、</span><span lang=\"EN-US\">CVS </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">和</span><span lang=\"EN-US\"> Mercurial</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">。</span>\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">集成用户界面设计器：</span>**<span lang=\"EN-US\">Qt Creator </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">提供了两个集成的可视化编辑器：用于通过</span><span lang=\"EN-US\"> Qt widget </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">生成用户界面的</span><span lang=\"EN-US\"> Qt Designer</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">，以及用于通过</span><span lang=\"EN-US\"> QML </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">语言开发动态用户界面的</span><span lang=\"EN-US\"> Qt Quick Designer*</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">。</span>\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">项目和编译管理</span><span lang=\"EN-US\"> </span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">：</span>**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">无论是导入现有项目还是创建一个全新项目，</span><span lang=\"EN-US\">Qt Creator </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">都能生成所有必要的文件。包括对</span><span lang=\"EN-US\"> cross-qmake </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">和</span><span lang=\"EN-US\"> Cmake </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">的支持。</span>\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">桌面和移动平台</span>**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">：</span><span lang=\"EN-US\">Qt Creator </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">支持在桌面系统和移动设备中编译和运行</span><span lang=\"EN-US\"> Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">应用程序。通过编译设置您可以在目标平台之间快速切换。</span>\n\n**<span lang=\"EN-US\">Qt </span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">模拟器</span>**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">：</span><span lang=\"EN-US\">Qt</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">模拟器是诺基亚</span><span lang=\"EN-US\"> Qt SDK </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">的一部分，可在与目标移动设备相似的环境中对移动设备的</span><span lang=\"EN-US\"> Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">应用程序进行测试。</span>\n\n<span lang=\"EN-US\">![](http://173.234.48.113/wp-content/uploads/2013/05/wpid-9e0053678da7581f17cd73c760a42eb8_clip_image007.jpg)</span>\n\n**<span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体;\"><span style=\"mso-list: Ignore;\">四、</span></span>****<span lang=\"EN-US\">Qt</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">的历史</span>**\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\"><span style=\"font: 7pt 'Times New Roman';\">  </span></span></span><span lang=\"EN-US\">1996</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">年</span><span lang=\"EN-US\">Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">上市</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\"><span style=\"font: 7pt 'Times New Roman';\"> </span></span></span><span lang=\"EN-US\">Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">已成为数以万计商业和开源应用程序的基础</span>\n\n<span lang=\"EN-US\">Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">的软件授权机制具有经受市场检验的双重授权（开源与商业）模式</span>\n\n<span lang=\"EN-US\">Qt Software </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">的前身为</span><span lang=\"EN-US\"> Trolltech</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">（奇趣科技）。</span><span lang=\"EN-US\"> Trolltech </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">（奇趣科技）始创于</span><span lang=\"EN-US\">1994</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">年</span>\n\n<span lang=\"EN-US\">Trolltech </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">（奇趣科技）于</span><span lang=\"EN-US\">2008</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">年</span><span lang=\"EN-US\">6</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">月被</span><span lang=\"EN-US\"> Nokia </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">收购，加速了其跨平台开发战略</span>\n\n**<span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体;\"><span style=\"mso-list: Ignore;\">五、</span></span>****<span lang=\"EN-US\">Qt</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">所支持的平台</span>**\n\n<span lang=\"EN-US\">![](http://173.234.48.113/wp-content/uploads/2013/05/wpid-9e0053678da7581f17cd73c760a42eb8_clip_image009.jpg)</span>\n\n**<span lang=\"EN-US\" style=\"mso-fareast-font-family: 'Times New Roman';\"><span style=\"mso-list: Ignore;\">1.<span style=\"font: 7pt 'Times New Roman';\">  </span></span></span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">嵌入式</span><span lang=\"EN-US\"> Linux </span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">（</span><span lang=\"EN-US\">Embedded Linux</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">）</span>**\n\n<span lang=\"EN-US\">Qt for Embedded Linux® </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">是用于嵌入式</span><span lang=\"EN-US\"> Linux </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">所支持设备的领先应用程序架构。您可以使用</span><span lang=\"EN-US\"> Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">创建具有独特用户体验的具备高效内存效率的设备和应用程序。</span><span lang=\"EN-US\">Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">可以在任何支持</span><span lang=\"EN-US\"> Linux </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">的平台上运行。</span><span lang=\"EN-US\">Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">的直观</span><span lang=\"EN-US\"> API</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">，让您只须少数几行代码便可以更短的时间实现更高端的功能。</span>\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">特点：</span>**<span lang=\"EN-US\">1\\. </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">用于</span><span lang=\"EN-US\">Linux </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">的紧凑的视窗系统；</span><span lang=\"EN-US\">2\\. </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">用于广泛的应用程序处理器的开发；</span><span lang=\"EN-US\">3\\. </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">移植桌面代码至嵌入式平台，或通过重新编译，反之亦然；</span><span lang=\"EN-US\">4\\. </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">编译移除不常使用的组件与功能；</span><span lang=\"EN-US\">5\\. </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">利用系统资源并实现本地化性能；</span><span lang=\"EN-US\">6\\. </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">开发嵌入式设备犹如开发桌面系统一样轻松简单。</span>\n\n<span style=\"color: #000000;\"><span lang=\"EN-US\">Qt </span><span style=\"font-family: 宋体;\">除了提供所有</span><span lang=\"EN-US\"> </span><span style=\"font-family: 宋体;\">工具</span><span lang=\"EN-US\"> </span><span style=\"font-family: 宋体;\">以及</span><span lang=\"EN-US\"> API </span><span style=\"font-family: 宋体;\">与</span><span lang=\"EN-US\"> </span><span style=\"font-family: 宋体;\">类库</span><span lang=\"EN-US\"> </span><span style=\"font-family: 宋体;\">，（</span><span style=\"font-family: 宋体;\">如</span><span lang=\"EN-US\"> WebKit </span><span style=\"font-family: 宋体;\">）</span><span style=\"font-family: 宋体;\">外，</span><span lang=\"EN-US\">Qt for Embedded Linux </span><span style=\"font-family: 宋体;\">还提供用于最优化嵌入式开发环境的主要组件。</span></span>\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">紧凑高效的视窗系统</span><span lang=\"EN-US\"> (QWS)</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">：</span>**<span lang=\"EN-US\">Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">构建在标准的</span><span lang=\"EN-US\"> API </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">上，应用于嵌入式</span><span lang=\"EN-US\"> Linux </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">设备，并带有自己的紧凑视窗系统。基于</span><span lang=\"EN-US\"> Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">的应用程序直接写入</span><span lang=\"EN-US\">Linux </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">帧缓冲，解除了您对</span><span lang=\"EN-US\"> X11 </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">视窗系统的需求。具有减少内存消耗，占位更小，可利用硬件加速图形的优势，可编译移除不常使用的组件与功能等特点。</span>\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">虚拟帧缓冲</span><span lang=\"EN-US\"> (QVFb)</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">：</span>**<span lang=\"EN-US\">Qt for Embedded Linux </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">提供一个虚拟帧缓冲器，可以采用点对点逐像素匹配物理设备显示。具有真实的测试构架，在桌面系统上嵌入式测试，模拟物理设备显示的宽度、高度与色深等特点。</span>\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">进程间通讯</span><span lang=\"EN-US\"> (IPC) </span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">：</span>**<span lang=\"EN-US\">IPC </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">（进程间通讯）可以创建丰富的多应用程序用户体验。定义进程间通讯的两个主要概念即：信道与消息。可以进程监听并向信道发送消息，任何时候只要监听到一个进程便可创建信道。</span>\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">扩展的字体格式：</span>**<span lang=\"EN-US\">Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">支持嵌入式</span><span lang=\"EN-US\"> Linux </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">上的多种字体格式，包括：</span><span lang=\"EN-US\">TrueType®, Postscript® Type1 </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">与</span><span lang=\"EN-US\"> Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">预呈现字体。</span><span lang=\"EN-US\">Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">扩展了</span><span lang=\"EN-US\">Unicode </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">支持，包括：构建时自动数据抽取和运行时自动更新。另外</span><span lang=\"EN-US\">Qt</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">还提供定制字体格式的插件，允许在运行时轻松添加新字体引擎。应用程序间的字体共享功能可以提高内存效率。</span>\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">基本要求：</span>**\n\n<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">开发环境：</span><span lang=\"EN-US\">Linux  </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">内核</span><span lang=\"EN-US\"> 2.4 </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">或更高；</span><span lang=\"EN-US\">GCC </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">版本</span><span lang=\"EN-US\"> 3.3 </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">或更高；用于</span><span lang=\"EN-US\"> MIPS® GCC </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">版本</span><span lang=\"EN-US\"> 3.4\\. </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">或更高。</span>\n\n<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">占用存储空间：存储空间取决于配置，压缩后</span><span lang=\"EN-US\">: 1.7 - 4.1 MB</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">，未压缩</span><span lang=\"EN-US\">: 3.6 - 9.0 MB </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">。</span>\n\n<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">硬件平台：易于载入任何支持带</span><span lang=\"EN-US\"> C++ </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">编译器和帧缓冲器驱动</span><span lang=\"EN-US\"> Linux </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">的处理器。支持</span><span lang=\"EN-US\"> ARM®, x86®, MIPS®, PowerPC® </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">。</span>\n\n**<span lang=\"EN-US\" style=\"mso-fareast-font-family: 'Times New Roman';\"><span style=\"mso-list: Ignore;\">2.</span></span>****<span lang=\"EN-US\">Mac </span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">平台</span>**\n\n<span lang=\"EN-US\">Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">包括一套集成的开发工具，可加快在</span><span lang=\"EN-US\"> Mac </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">平台上的开发。在编写</span><span lang=\"EN-US\"> Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">时，并不需要去设想底层处理器的数字表示法、字节序或架构。要在</span><span lang=\"EN-US\"> Apple </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">平台上支持</span><span lang=\"EN-US\"> Intel </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">硬件，</span><span lang=\"EN-US\">Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">客户只需重新编辑其应用程序即可。</span>\n\n**<span lang=\"EN-US\" style=\"mso-fareast-font-family: 'Times New Roman';\"><span style=\"mso-list: Ignore;\">3.</span></span>****<span lang=\"EN-US\">Windows</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">平台</span>**\n\n<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">使用</span><span lang=\"EN-US\"> Qt</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">，只需一次性构建应用程序，无须重新编写源代码，便可跨多个</span><span lang=\"EN-US\"> Windows </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">操作系统的版本进行部署。</span><span lang=\"EN-US\">Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">应用程序支持</span><span lang=\"EN-US\"> Windows Vista</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">、</span><span lang=\"EN-US\">Server 2003</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">、</span><span lang=\"EN-US\">XP</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">、</span><span lang=\"EN-US\">NT4</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">、</span><span lang=\"EN-US\">Me/98 </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">和</span><span lang=\"EN-US\"> Windows CE</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">。</span>\n\n**<span lang=\"EN-US\" style=\"mso-fareast-font-family: 'Times New Roman';\"><span style=\"mso-list: Ignore;\">4.<span style=\"font: 7pt 'Times New Roman';\"> </span></span></span>****<span lang=\"EN-US\">Linux/X11</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">平台</span>**\n\n<span lang=\"EN-US\">Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">包括一套集成的开发工具，可加快在</span><span lang=\"EN-US\"> X11 </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">平台上的开发。</span><span lang=\"EN-US\">Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">由于是</span><span lang=\"EN-US\">  KDE </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">桌面环境的基础，在各个</span><span lang=\"EN-US\"> Linux </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">社区人尽皆知。几乎</span><span lang=\"EN-US\"> KDE </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">中的所有功能都是基于</span><span lang=\"EN-US\"> Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">开发的，</span> <span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">而且</span><span lang=\"EN-US\"> Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">是全球社区成员用来开发</span><span lang=\"EN-US\"> </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">成千上万的开源</span><span lang=\"EN-US\"> KDE </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">应用程序的基础。</span>\n\n**<span lang=\"EN-US\" style=\"mso-fareast-font-family: 'Times New Roman';\"><span style=\"mso-list: Ignore;\">5.<span style=\"font: 7pt 'Times New Roman';\"> </span></span></span>****<span lang=\"EN-US\">Windows CE/Mobile</span>**\n\n<span lang=\"EN-US\">Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">是用</span><span lang=\"EN-US\"> C++ </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">开发的应用程序和用户界面框架。通过直观的</span><span lang=\"EN-US\"> API</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">，您可以使用</span><span lang=\"EN-US\"> Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">为大量的设备编写功能丰富的高性能应用程序。</span><span lang=\"EN-US\">Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">包括一套丰富的工具集与直观的</span><span lang=\"EN-US\">API</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">，意味着只须少数几行代码便可以更短的时间实现更高端的功能。</span>\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">主要特点：</span>**<span lang=\"EN-US\">1.</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">硬件依存性极小；</span><span lang=\"EN-US\">2.</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">支持多数现有的</span><span lang=\"EN-US\"> Windows CE </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">配置；</span><span lang=\"EN-US\">3\\. </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">对于自定义的硬件配置亦轻松构建；</span><span lang=\"EN-US\">4\\. </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">移植桌面代码至嵌入式平台，或通过重新编译，反之亦然；</span><span lang=\"EN-US\">5\\. </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">编译移除不常使用的组件与功能；</span><span lang=\"EN-US\">6\\. </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">利用系统资源并实现高性能；</span><span lang=\"EN-US\">7\\. </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">开发嵌入式设备尤如开发桌面系统一样轻松简单。</span>\n\n<span style=\"color: #000000;\"><span lang=\"EN-US\">Qt </span><span style=\"font-family: 宋体;\">除了提供所有</span><span lang=\"EN-US\"> </span><span style=\"font-family: 宋体;\">工具</span><span lang=\"EN-US\"> </span><span style=\"font-family: 宋体;\">以及</span><span lang=\"EN-US\"> API </span><span style=\"font-family: 宋体;\">与</span><span lang=\"EN-US\"> </span><span style=\"font-family: 宋体;\">类库</span><span lang=\"EN-US\"> </span><span style=\"font-family: 宋体;\">外，</span><span lang=\"EN-US\">Qt for Windows CE </span><span style=\"font-family: 宋体;\">还提供用于最优化嵌入式开发环境的附加功能。</span></span>\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">本地化和可定制的外观：</span>**<span lang=\"EN-US\">Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">在使用时，可以支持</span><span lang=\"EN-US\"> Windows Mobile </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">和</span><span lang=\"EN-US\"> Windows CE </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">两种样式。</span> <span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">在运行时，</span><span lang=\"EN-US\">Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">应用程序将检测使用哪一种样式。</span> <span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">采用</span><span lang=\"EN-US\"> Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">样式表单，您只需要花费用于传统</span><span lang=\"EN-US\"> UI </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">风格的少许时间和代码行，便可以轻松定制您的应用程序外观。特点：基于</span><span lang=\"EN-US\">HTML </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">层叠式样式表</span><span lang=\"EN-US\"> (CSS)</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">；适用于全部</span><span lang=\"EN-US\"> widget</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">；任何熟悉</span><span lang=\"EN-US\"> CSS </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">技术的人员都可以定义复杂的样式。</span>\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">先进的文本布局引擎：</span>**<span lang=\"EN-US\">Qt for Windows CE </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">支持</span><span lang=\"EN-US\"> TrueType® </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">和点阵字体。同时</span><span lang=\"EN-US\"> Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">还支持扩展的</span><span lang=\"EN-US\"> Unicode </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">和从右至左的书写语言。</span><span lang=\"EN-US\">Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">的富文本引擎增加了新的功能用于复杂的文本布局，包括制表和路径追踪，以及环绕图形的文本。</span>\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">基本要求：</span>**\n\n<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">开发环境</span><span lang=\"EN-US\">: Microsoft® Visual Studio® 2005 (Standard Edition) </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">或更高</span><span lang=\"EN-US\">ActivePerl  </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">。</span>\n\n<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">占用存储空间：紧凑配置</span><span lang=\"EN-US\"> - 4.8 MB</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">，全配置</span><span lang=\"EN-US\"> - 8.4 MB</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">。</span>\n\n<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">操作系统：</span><span lang=\"EN-US\">Windows CE 5 </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">或更高，</span><span lang=\"EN-US\">Windows Mobile 5 </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">或更高。</span>\n\n<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">硬件平台：支持</span><span lang=\"EN-US\"> ARM®, x86®</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">，</span><span lang=\"EN-US\">(</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">在</span><span lang=\"EN-US\"> SH4® </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">和</span><span lang=\"EN-US\"> MIPS® </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">上编译</span><span lang=\"EN-US\">) </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">。</span>\n\n**<span lang=\"EN-US\" style=\"mso-fareast-font-family: 'Times New Roman';\"><span style=\"mso-list: Ignore;\">6.<span style=\"font: 7pt 'Times New Roman';\"> </span></span></span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">塞班平台（</span><span lang=\"EN-US\">Symbian</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">）</span>**\n\n<span lang=\"EN-US\">Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">通过和</span><span lang=\"EN-US\">S60 </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">框架的集成为</span><span lang=\"EN-US\"> Symbian </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">平台提供了支持。在最新版的</span><span lang=\"EN-US\">Qt SDK 1.1</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">中我们可以直接生成可以在塞班设备上运行的</span><span lang=\"EN-US\">sis</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">文件。</span>\n\n**<span lang=\"EN-US\" style=\"mso-fareast-font-family: 'Times New Roman';\"><span style=\"mso-list: Ignore;\">7.<span style=\"font: 7pt 'Times New Roman';\">         </span></span></span>****<span lang=\"EN-US\">MeeGo</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">平台</span><span lang=\"EN-US\"> (Maemo 6 </span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">现更名为</span><span lang=\"EN-US\"> MeeGo)</span>**\n\n<span lang=\"EN-US\">Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">是一个功能全面的应用程序和用户界面框架，用来开发</span><span lang=\"EN-US\">Maemo </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">应用程序，也可跨各主要设备和桌面操作系统部署这些程序且无需重新编写源代码的。</span><span lang=\"EN-US\"> </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">如果您在多数情况下开发适用于</span><span lang=\"EN-US\"> Symbian</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">、</span><span lang=\"EN-US\">Maemo </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">或</span><span lang=\"EN-US\"> MeeGo </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">平台的应用程序，可以使用免费</span><span lang=\"EN-US\"> LGPL </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">授权方式的</span><span lang=\"EN-US\"> Qt</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">。</span>\n\n<span lang=\"EN-US\"><span style=\"mso-tab-count: 1;\">       </span>Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">将为诺基亚设备运行</span><span lang=\"EN-US\"> MeeGo (Harmattan) </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">提供依托，并可为所有即将推出的</span><span lang=\"EN-US\"> MeeGo </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">设备中的应用程序开发提供</span><span lang=\"EN-US\"> API</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">，为</span><span lang=\"EN-US\"> Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">开发人员提供了更多平台。不久，</span><span lang=\"EN-US\">MeeGo </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">设备就会完全支持</span><span lang=\"EN-US\"> (X11) Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">。</span><span lang=\"EN-US\"> </span>\n\n**<span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体;\"><span style=\"mso-list: Ignore;\">六、</span></span>****<span lang=\"EN-US\">Qt</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">类库</span>**\n\n<span style=\"color: #000000;\"><span style=\"font-family: 宋体;\">模块化</span><span lang=\"EN-US\"> Qt C++ </span><span style=\"font-family: 宋体;\">类库提供一套丰富的应用程序生成块</span><span lang=\"EN-US\"> (block)</span><span style=\"font-family: 宋体;\">，包含了生成高级跨平台应用程序所需的全部功能。</span></span>\n\n<span lang=\"EN-US\">![](http://173.234.48.113/wp-content/uploads/2013/05/wpid-9e0053678da7581f17cd73c760a42eb8_clip_image011.jpg)</span>\n\n<span lang=\"EN-US\">\n**1.**</span>**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">先进的图形用户界面（</span><span lang=\"EN-US\">GUI</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">）：</span>**<span lang=\"EN-US\">Qt</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">为您在桌面与嵌入式平台上开发先进的</span><span lang=\"EN-US\">GUI</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">应用程序，带来所有需要的功能。</span><span lang=\"EN-US\">Qt</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">使用所支持平台的本地化图形</span><span lang=\"EN-US\">API</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">，充分利用系统资源并给予应用程序本地化的界面。</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n<span style=\"font: 7pt 'Times New Roman';\"> </span></span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">从按钮和对话框到树形视图与表格都具有完整的控件（窗体）</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">自动缩放，字体、语言与屏幕定位识别布局引擎</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">支持抗锯齿、矢量变形以及可缩放矢量图形</span><span lang=\"EN-US\"> (SVG)</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">具有样式</span><span lang=\"EN-US\">API</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">和窗体样式表，可完全自定义用户界面</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">支持嵌入式设备的硬件加速图形和多重显示功能</span>\n\n**<span lang=\"EN-US\">2.</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">基于</span><span lang=\"EN-US\">OpenGL ®</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">与</span><span lang=\"EN-US\">OpenGL ®Es</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">的</span><span lang=\"EN-US\">3D</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">图形：</span>**<span lang=\"EN-US\">OpenGL® </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">是一个标准的图形库，用于构建跨平台和支持硬件加速的高性能可视化应用程序。虽然</span><span lang=\"EN-US\">OpenGL</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">完美支持</span><span lang=\"EN-US\">3D</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">图形，但却不支持创建应用程序用户界面。</span><span lang=\"EN-US\">Qt</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">通过与</span><span lang=\"EN-US\">OpenGL </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">的紧密集成解决了这一难题。</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">在您的应用程序中轻松加入</span><span lang=\"EN-US\">3D</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">图形</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">在嵌入式</span><span lang=\"EN-US\">Linux </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">与</span><span lang=\"EN-US\">Windows CE </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">平台上使用</span><span lang=\"EN-US\">OpenGL ES</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">和</span><span lang=\"EN-US\">OpenGL</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">绘画引擎</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">利用系统资源实现最佳图形性能</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">支持</span><span lang=\"EN-US\">Windows </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">平台上的</span><span lang=\"EN-US\">Direct3D®</span>\n\n**<span lang=\"EN-US\">3.</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">多线程：</span>**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">多线程编程是一个执行资源密集型操作而不会冻结应用程序用户界面的有效典范。</span><span lang=\"EN-US\">Qt</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">的跨平台多线程功能简化了并行编程，另外它附加的同步功能可以更加轻松地利用多核架构。</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">管理线程、数据和对象更加轻松</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">基于</span><span lang=\"EN-US\">Qt</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">的信号与槽，实现跨线程类型安全的对象间通讯</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">高端</span><span lang=\"EN-US\">API</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">可以编译多线程程序而无须使用底端基元</span>\n\n**<span lang=\"EN-US\">4.</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">嵌入式设备的紧凑视窗系统：</span>**<span lang=\"EN-US\">Qt</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">构建在标准的</span><span lang=\"EN-US\"> API</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">基础上，用于具有轻量级</span><span lang=\"EN-US\">window</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">系统的嵌入式</span><span lang=\"EN-US\"> Linux </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">设备。基于</span><span lang=\"EN-US\"> Qt</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">的应用程序直接写入</span><span lang=\"EN-US\"> Linux </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">帧缓冲，解除了您对</span><span lang=\"EN-US\"> X11 </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">视窗系统的需求。</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">减少内存消耗，内存占用更小</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">可以编译移除不常使用的组件与功能</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">可以利用硬件加速图形</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">在桌面系统上的虚拟帧缓冲可用于嵌入式开发与调试</span>\n\n**<span lang=\"EN-US\">5.</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">对象间通讯：</span>**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">在开发用户图形界面中，一个常见的、重复发生系统崩溃与问题的症结根源是如何在不同组件之间进行通信。对于该问题，</span><span lang=\"EN-US\">Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">的解决方案是信号与槽机制，即执行</span><span lang=\"EN-US\">Observer</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">设计模式。我们可以简单理解为当特殊事件发生的时候，信号就被发出了，一个插槽就是一个函数，被称作特定信号的响应。</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">信号与槽机制是类型安全的</span><span lang=\"EN-US\">(type safe)</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">任意信号都可以连接任意或多个插槽，或跨多个线程</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">简化真正的组件编程</span>\n\n**<span lang=\"EN-US\">6.2D</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">图形：</span>**<span lang=\"EN-US\">Qt</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">给您提供一个功能强大的</span><span lang=\"EN-US\">2D</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">图形画布，用以管理和集成大量的图形元素。</span>\n\n<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">高精度可视化大量元素</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">将窗体互动嵌入至图形场景中</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">支持缩放、旋转、动画与透视变换</span>\n\n**<span lang=\"EN-US\">7.</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">多媒体框架：</span>**<span lang=\"EN-US\">Qt</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">使用</span><span lang=\"EN-US\"> Phonon</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">多媒体框架为众多的多媒体格式提供跨桌面与嵌入式操作系统的回放功能。</span><span lang=\"EN-US\">Phonon</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">可以轻松将音频与视频回放功能加入到</span><span lang=\"EN-US\">Qt</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">应用程序当中，并且在每个目标平台上提取多媒体格式与框架。</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">以平台独立的方式提供多媒体内容</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">从本地文件读取媒体或读取网络上的流媒体</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">提取</span><span lang=\"EN-US\">Mac</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">上的</span><span lang=\"EN-US\"> QuickTime® </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">，</span><span lang=\"EN-US\">Windows </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">上的</span><span lang=\"EN-US\">DirectShow® </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">以及</span><span lang=\"EN-US\"> Linux </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">上的</span><span lang=\"EN-US\">Gstreamer</span>\n\n**<span lang=\"EN-US\">8.WebKit</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">集成：</span>**<span lang=\"EN-US\">Qt WebKit</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">集成，即</span><span lang=\"EN-US\">Qt</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">集成了</span><span lang=\"EN-US\">WebKit</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">功能，</span><span lang=\"EN-US\">WebKit</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">是</span><span lang=\"EN-US\">KDE</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">项目下基于</span><span lang=\"EN-US\"> KHTML</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">的开放源</span><span lang=\"EN-US\">web</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">浏览器引擎。目前</span><span lang=\"EN-US\"> Apple®</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">，</span><span lang=\"EN-US\">Google™ </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">与</span><span lang=\"EN-US\">Nokia</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">等公司使用</span><span lang=\"EN-US\">Qt WebKit</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">集成。</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">将</span><span lang=\"EN-US\">web</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">与本地内容和服务整合在单一的富应用程序当中</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">快速创建整合实时</span><span lang=\"EN-US\">web</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">内容与服务的应用程序</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">使用集成在本地代码中的</span><span lang=\"EN-US\"> HTML </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">与</span><span lang=\"EN-US\">Java Script</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">完全控制跨平台的浏览器环境</span>\n\n**<span lang=\"EN-US\">9.</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">网络连接：</span>**<span lang=\"EN-US\">Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">让您网络编程更简单，并支持跨平台网络编程。</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">完整的客户</span><span lang=\"EN-US\">/</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">服务器插口提取</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">支持</span><span lang=\"EN-US\"> HTTP</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">，</span><span lang=\"EN-US\">FTP</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">，</span><span lang=\"EN-US\">DNS </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">与异步</span><span lang=\"EN-US\"> HTTP 1.1</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">无论</span><span lang=\"EN-US\">HTML </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">和</span><span lang=\"EN-US\">XML</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">或图象与媒体文件，它都可以存取所有类型的数据</span>\n\n**<span lang=\"EN-US\">10\\. XML</span>**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">：</span><span lang=\"EN-US\">Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">为</span><span lang=\"EN-US\">XML </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">文件以及</span><span lang=\"EN-US\">SAX </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">和</span><span lang=\"EN-US\"> DOM </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">协议的</span><span lang=\"EN-US\">C++</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">实现，提供了一个流媒体文件读写器。同时</span><span lang=\"EN-US\"> Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">还包含了</span> <span lang=\"EN-US\">XQuery – </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">一个简单的类似</span><span lang=\"EN-US\"> SQL</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">的查询语言，用于解析</span><span lang=\"EN-US\">XML</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">文件来选择和聚合所需要的</span><span lang=\"EN-US\">XML</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">元素，并且将它们转换成</span><span lang=\"EN-US\">XML</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">输出或其它格式的输出。</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">仅需少数几行代码便可实现先进的</span><span lang=\"EN-US\"> XML </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">查询</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">完全支持</span><span lang=\"EN-US\"> XQuery 1.0 </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">和</span><span lang=\"EN-US\"> XPath 2.0</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">在您自己的应用程序中从</span><span lang=\"EN-US\">XML</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">查询、抽取和转换数据</span>\n\n**<span lang=\"EN-US\">11.</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">脚本引擎：</span>**<span lang=\"EN-US\">Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">包含一个完全集成</span><span lang=\"EN-US\"> ECMA </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">标准的脚本引擎。</span><span lang=\"EN-US\"> QtScript </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">提供</span><span lang=\"EN-US\"> QObject </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">集成，把</span><span lang=\"EN-US\"> Qt</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">的信号与槽机制整合成脚本，并且实现了</span><span lang=\"EN-US\">C++ </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">与脚本的集成。</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">基于</span><span lang=\"EN-US\">ECMA </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">标准的脚本语言</span> <span lang=\"EN-US\">(ECMAScript 3</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">是</span><span lang=\"EN-US\">JavaScript 1.5</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">的基础</span><span lang=\"EN-US\">)</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">为简化的对象间通讯使用</span><span lang=\"EN-US\">Qt</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">的信号与槽机制</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">开创新的契机将脚本与您的</span><span lang=\"EN-US\">Qt</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">应用程序相集成</span>\n\n**<span lang=\"EN-US\">12.</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">数据库：</span>**<span lang=\"EN-US\">Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">帮助您将数据库与您的</span><span lang=\"EN-US\">Qt</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">应用程序无缝集成。</span><span lang=\"EN-US\">Qt</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">支持所有主要的数据驱动，并可让您将</span><span lang=\"EN-US\">SQL</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">发送到数据库服务器，或者让</span><span lang=\"EN-US\"> Qt SQL</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">类自动生成</span><span lang=\"EN-US\"> SQL </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">查询。</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">支持所有主要的数据库驱动</span>\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\">n</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">以多种视图或数据识别表单方式显示数据</span>\n\n**<span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体;\"><span style=\"mso-list: Ignore;\">七、</span></span>****<span lang=\"EN-US\">Qt Quick</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">介绍</span>**\n\n<span lang=\"EN-US\" style=\"color: #3366ff;\">Qt Quick</span><span style=\"font-family: 宋体; color: #3366ff; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">是在</span><span lang=\"EN-US\" style=\"color: #3366ff;\">Qt 4.7</span><span style=\"font-family: 宋体; color: #3366ff; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">中被引进的一项技术。</span><span lang=\"EN-US\" style=\"color: #3366ff;\">Qt Quick </span><span style=\"font-family: 宋体; color: #3366ff; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">是一种高级用户界面技术，开发人员和设计人员可用它协同创建动画触摸式用户界面和应用程序。它由三部分构成：</span><span lang=\"EN-US\" style=\"color: #3366ff;\">1.QML</span><span style=\"font-family: 宋体; color: #3366ff; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">：像</span><span lang=\"EN-US\" style=\"color: #3366ff;\"> JavaScript </span><span style=\"font-family: 宋体; color: #3366ff; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">一样的声明式语言；</span><span lang=\"EN-US\" style=\"color: #3366ff;\">2\\. Qt Creator</span><span style=\"font-family: 宋体; color: #3366ff; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">：在</span><span lang=\"EN-US\" style=\"color: #3366ff;\"> Qt IDE</span><span style=\"font-family: 宋体; color: #3366ff; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">中的直观工具；</span><span lang=\"EN-US\" style=\"color: #3366ff;\">3\\. Qt Declarative</span><span style=\"font-family: 宋体; color: #3366ff; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">：强大的</span><span lang=\"EN-US\" style=\"color: #3366ff;\"> C++ </span><span style=\"font-family: 宋体; color: #3366ff; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">模块。</span>\n\n**<span lang=\"EN-US\">1.</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">主要组成：</span>**\n\n![](http://173.234.48.113/wp-content/uploads/2013/05/wpid-9e0053678da7581f17cd73c760a42eb8_clip_image013.gif)\n\n<span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span style=\"mso-list: Ignore;\"><span style=\"font: 7pt 'Times New Roman';\"> </span></span></span>\n\n**<span lang=\"EN-US\">QML</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">：</span>**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">基于</span><span lang=\"EN-US\" style=\"text-indent: -21pt;\"> JavaScript </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">的直观语言</span><span lang=\"EN-US\" style=\"text-indent: -21pt;\">  </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">：</span><span lang=\"EN-US\" style=\"text-indent: -21pt;\">QML </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">是一种简便易用的语言，开发人员与用户界面设计人员无需任何</span><span lang=\"EN-US\" style=\"text-indent: -21pt;\"> C++ </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">知识，即可用其描绘出用户界面的外观和功能。</span>\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">面向开发人员和设计人员的共享工具：</span>**<span lang=\"EN-US\">Qt Creator IDE 2.1 </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">版将集成一套开发人员与用户界面设计人员可共享，用以创建和实施</span><span lang=\"EN-US\"> Qt Quick </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">项目的通用工具。</span>\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">通过</span><span lang=\"EN-US\"> C++ </span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">推动</span><span lang=\"EN-US\"> QML </span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">应用程序：</span>**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">在</span><span lang=\"EN-US\"> Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">库中的全新</span><span lang=\"EN-US\"> Declarative </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">模块支持生成动态可定制的用户界面，以及通过</span><span lang=\"EN-US\"> C++ </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">拓展</span><span lang=\"EN-US\"> QML </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">应用程序。</span>\n\n**<span lang=\"EN-US\">2.</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">功能特点：</span>**\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">快速开发动画式流畅多变的用户界面：</span>**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">通过直观的</span><span lang=\"EN-US\"> QML </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">语言和一套丰富的</span><span lang=\"EN-US\"> QML Elements——UI </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">和行为生成块</span><span lang=\"EN-US\">——</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">您可以快速创建出令人印象深刻的用户界面，比您想象的还要快。</span>\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">无需</span><span lang=\"EN-US\"> C++ </span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">知识：</span>**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">如果您具有</span><span lang=\"EN-US\"> JavaScript </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">的经验或掌握基本的网络技术</span><span lang=\"EN-US\"> (</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">如</span><span lang=\"EN-US\"> HTML </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">和</span><span lang=\"EN-US\"> CSS)</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">，您就可以通过</span><span lang=\"EN-US\"> QML </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">取得非常不错的成果。</span>\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">瞄准数以百万计的触摸屏设备：</span>**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">使用</span><span lang=\"EN-US\"> Qt Quick</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">，您可以为数以百万计的</span><span lang=\"EN-US\"> Symbian </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">和</span><span lang=\"EN-US\"> MeeGo </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">设备生成应用程序，或为各种类型的触摸屏消费类电子设备创建用户界面。</span>\n\n**<span lang=\"EN-US\">3.</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">应用领域：</span>**\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">汽车信息娱乐系统</span><span lang=\"EN-US\"> UI</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">：</span>**<span lang=\"EN-US\">Cybercom Group </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">的用户界面设计人员与开发人员尝试使用</span><span lang=\"EN-US\"> Qt Quick </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">为其汽车信息娱乐平台设计</span><span lang=\"EN-US\"> UI——</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">并取得了令人满意的结果。</span>\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">社交媒体电视：</span>**<span lang=\"EN-US\">mixd.tv </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">使用</span><span lang=\"EN-US\"> Qt Quick </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">为其跨平台网络电视应用程序创建</span><span lang=\"EN-US\"> UI</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">，其用户可以通过社交媒体频道访问和共享在线视频的内容。</span>\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">联网汽车：</span>**<span lang=\"EN-US\">Qt </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">的认证合作伙伴</span><span lang=\"EN-US\"> Digia </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">很快学会了</span><span lang=\"EN-US\"> Qt Quick </span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">并用其创建出了包括导航、电话、游戏和音乐功能的高级汽车</span><span lang=\"EN-US\"> UI</span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">。</span>\n\n**<span lang=\"EN-US\" style=\"mso-bidi-font-family: 宋体;\"><span style=\"mso-list: Ignore;\">八、</span></span>****<span lang=\"EN-US\">Qt</span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">授权</span>**\n\n**<span lang=\"EN-US\">![](http://173.234.48.113/wp-content/uploads/2013/05/wpid-9e0053678da7581f17cd73c760a42eb8_clip_image014.jpg)</span>**\n\n**<span lang=\"EN-US\"><span lang=\"EN-US\" style=\"font-family: Wingdings; mso-bidi-font-family: Wingdings; mso-fareast-font-family: Wingdings;\"><span><span style=\"font: 7pt 'Times New Roman';\"> </span></span></span><b><span lang=\"EN-US\">Qt Commercial Developer License</span>**</span></b>\n\n<span lang=\"EN-US\" style=\"color: red;\">The Qt Commercial Developer License is the correct license to use for the development of proprietary and/or commercial software with Qt where you do not want to share any source code.</span>\n\n<span lang=\"EN-US\" style=\"color: red;\">You must purchase a Qt Commercial Developer License from us or from one of our authorized resellers before you start developing commercial software as you are not permitted to begin your development with an open source licensed Qt version and convert to the commercially license version at a later . The Qt Commercial Developer License includes a restriction that prevents the combining of code developed with the Qt GNU LGPL v. 2.1 or GNU GPL v. 3.0 license versions with commercially licensed Qt code.</span>\n\n**<span lang=\"EN-US\">Qt GNU LGPL v. 2.1 Version</span>**\n\n<span lang=\"EN-US\" style=\"color: green;\">This version is available for development of proprietary and commercial applications in accordance with the terms and conditions of the GNU Lesser General Public License version 2.1. </span>\n\n<span lang=\"EN-US\" style=\"color: green;\">Support services are available separately for purchase.</span>\n\n**<span lang=\"EN-US\">Qt GNU GPL v. 3.0 Version</span>**\n\n<span lang=\"EN-US\" style=\"color: green;\">This version is freely available for the development of open source software governed by the GNU General Public License version  3.0 (“GPL”). </span>\n\n<span lang=\"EN-US\" style=\"color: green;\">Support services are available separately for purchase.</span>\n\n**<span lang=\"EN-US\">License Comparison Chart</span>**\n\n<table class=\"MsoNormalTable\" style=\"border-collapse: collapse; mso-border-left-alt: solid #E0E8E5 .75pt; mso-border-bottom-alt: solid #E0E8E5 .75pt;\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\">\n<thead>\n<tr style=\"mso-yfti-irow: 0; mso-yfti-firstrow: yes;\">\n<td style=\"padding-bottom: 3pt; padding-left: 6pt; padding-right: 6pt; background: #eff3f2; padding-top: 3pt; mso-border-alt: solid #E0E8E5 .75pt; border: #e0e8e5 1pt solid;\">\n\n<span lang=\"EN-US\"> </span>\n\n</td>\n<td style=\"border-bottom: #e0e8e5 1pt solid; border-left: medium none; padding-bottom: 3pt; padding-left: 6pt; padding-right: 6pt; background: #eff3f2; border-top: #e0e8e5 1pt solid; border-right: #e0e8e5 1pt solid; padding-top: 3pt; mso-border-bottom-alt: solid #E0E8E5 .75pt; mso-border-top-alt: solid #E0E8E5 .75pt; mso-border-right-alt: solid #E0E8E5 .75pt;\">\n\n<span lang=\"EN-US\">Commercial </span>\n\n</td>\n<td style=\"border-bottom: #e0e8e5 1pt solid; border-left: medium none; padding-bottom: 3pt; padding-left: 6pt; padding-right: 6pt; background: #eff3f2; border-top: #e0e8e5 1pt solid; border-right: #e0e8e5 1pt solid; padding-top: 3pt; mso-border-bottom-alt: solid #E0E8E5 .75pt; mso-border-top-alt: solid #E0E8E5 .75pt; mso-border-right-alt: solid #E0E8E5 .75pt;\">\n\n<span lang=\"EN-US\">LGPL</span>\n\n</td>\n<td style=\"border-bottom: #e0e8e5 1pt solid; border-left: medium none; padding-bottom: 3pt; padding-left: 6pt; padding-right: 6pt; background: #eff3f2; border-top: #e0e8e5 1pt solid; border-right: #e0e8e5 1pt solid; padding-top: 3pt; mso-border-bottom-alt: solid #E0E8E5 .75pt; mso-border-top-alt: solid #E0E8E5 .75pt; mso-border-right-alt: solid #E0E8E5 .75pt;\">\n\n<span lang=\"EN-US\">GPL</span>\n\n</td>\n</tr>\n</thead>\n<tbody>\n<tr style=\"mso-yfti-irow: 1;\">\n<td style=\"border-bottom: #e0e8e5 1pt solid; border-left: #e0e8e5 1pt solid; background: #eff3f2; border-top: medium none; border-right: #e0e8e5 1pt solid; mso-border-alt: solid #E0E8E5 .75pt; mso-border-top-alt: solid #E0E8E5 .75pt; padding: 0.75pt;\">\n\n<span lang=\"EN-US\">License cost</span>\n\n</td>\n<td style=\"border-bottom: #e0e8e5 1pt solid; border-left: medium none; border-top: medium none; border-right: #e0e8e5 1pt solid; mso-border-left-alt: solid #E0E8E5 .75pt; mso-border-alt: solid #E0E8E5 .75pt; mso-border-top-alt: solid #E0E8E5 .75pt; padding: 6pt;\">\n\n<span lang=\"EN-US\">License fee charged</span>\n\n</td>\n<td style=\"border-bottom: #e0e8e5 1pt solid; border-left: medium none; padding-bottom: 3pt; padding-left: 6pt; padding-right: 6pt; border-top: medium none; border-right: #e0e8e5 1pt solid; padding-top: 3pt; mso-border-left-alt: solid #E0E8E5 .75pt; mso-border-alt: solid #E0E8E5 .75pt; mso-border-top-alt: solid #E0E8E5 .75pt;\">\n\n<span lang=\"EN-US\">No license fee</span>\n\n</td>\n<td style=\"border-bottom: #e0e8e5 1pt solid; border-left: medium none; padding-bottom: 0.75pt; padding-left: 6pt; padding-right: 6pt; border-top: medium none; border-right: #e0e8e5 1pt solid; padding-top: 0.75pt; mso-border-left-alt: solid #E0E8E5 .75pt; mso-border-alt: solid #E0E8E5 .75pt; mso-border-top-alt: solid #E0E8E5 .75pt;\">\n\n<span lang=\"EN-US\">No license fee</span>\n\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 2;\">\n<td style=\"border-bottom: #e0e8e5 1pt solid; border-left: #e0e8e5 1pt solid; background: #eff3f2; border-top: medium none; border-right: #e0e8e5 1pt solid; mso-border-alt: solid #E0E8E5 .75pt; mso-border-top-alt: solid #E0E8E5 .75pt; padding: 0.75pt;\">\n\n<span lang=\"EN-US\">Must provide source code changes to Qt</span>\n\n</td>\n<td style=\"border-bottom: #e0e8e5 1pt solid; border-left: medium none; border-top: medium none; border-right: #e0e8e5 1pt solid; mso-border-left-alt: solid #E0E8E5 .75pt; mso-border-alt: solid #E0E8E5 .75pt; mso-border-top-alt: solid #E0E8E5 .75pt; padding: 6pt;\">\n\n<span lang=\"EN-US\">No, modifications can be closed</span>\n\n</td>\n<td style=\"border-bottom: #e0e8e5 1pt solid; border-left: medium none; padding-bottom: 3pt; padding-left: 6pt; padding-right: 6pt; border-top: medium none; border-right: #e0e8e5 1pt solid; padding-top: 3pt; mso-border-left-alt: solid #E0E8E5 .75pt; mso-border-alt: solid #E0E8E5 .75pt; mso-border-top-alt: solid #E0E8E5 .75pt;\">\n\n<span lang=\"EN-US\">Source code must be provided</span>\n\n</td>\n<td style=\"border-bottom: #e0e8e5 1pt solid; border-left: medium none; padding-bottom: 0.75pt; padding-left: 6pt; padding-right: 6pt; border-top: medium none; border-right: #e0e8e5 1pt solid; padding-top: 0.75pt; mso-border-left-alt: solid #E0E8E5 .75pt; mso-border-alt: solid #E0E8E5 .75pt; mso-border-top-alt: solid #E0E8E5 .75pt;\">\n\n<span lang=\"EN-US\">Source code must be provided </span>\n\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 3;\">\n<td style=\"border-bottom: #e0e8e5 1pt solid; border-left: #e0e8e5 1pt solid; background: #eff3f2; border-top: medium none; border-right: #e0e8e5 1pt solid; mso-border-alt: solid #E0E8E5 .75pt; mso-border-top-alt: solid #E0E8E5 .75pt; padding: 0.75pt;\">\n\n<span lang=\"EN-US\">Can create proprietary applications</span>\n\n</td>\n<td style=\"border-bottom: #e0e8e5 1pt solid; border-left: medium none; border-top: medium none; border-right: #e0e8e5 1pt solid; mso-border-left-alt: solid #E0E8E5 .75pt; mso-border-alt: solid #E0E8E5 .75pt; mso-border-top-alt: solid #E0E8E5 .75pt; padding: 6pt;\">\n\n<span lang=\"EN-US\"> Yes - No source code must be disclosed</span>\n\n</td>\n<td style=\"border-bottom: #e0e8e5 1pt solid; border-left: medium none; padding-bottom: 3pt; padding-left: 6pt; padding-right: 6pt; border-top: medium none; border-right: #e0e8e5 1pt solid; padding-top: 3pt; mso-border-left-alt: solid #E0E8E5 .75pt; mso-border-alt: solid #E0E8E5 .75pt; mso-border-top-alt: solid #E0E8E5 .75pt;\">\n\n<span lang=\"EN-US\">Yes, in accordance with the LGPL v. 2.1 terms </span>\n\n</td>\n<td style=\"border-bottom: #e0e8e5 1pt solid; border-left: medium none; padding-bottom: 0.75pt; padding-left: 6pt; padding-right: 6pt; border-top: medium none; border-right: #e0e8e5 1pt solid; padding-top: 0.75pt; mso-border-left-alt: solid #E0E8E5 .75pt; mso-border-alt: solid #E0E8E5 .75pt; mso-border-top-alt: solid #E0E8E5 .75pt;\">\n\n<span lang=\"EN-US\">No, applications are subject to the GPL and source code must be made available </span>\n\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 4;\">\n<td style=\"border-bottom: #e0e8e5 1pt solid; border-left: #e0e8e5 1pt solid; background: #eff3f2; border-top: medium none; border-right: #e0e8e5 1pt solid; mso-border-alt: solid #E0E8E5 .75pt; mso-border-top-alt: solid #E0E8E5 .75pt; padding: 0.75pt;\">\n\n<span lang=\"EN-US\"> Updates provided</span>\n\n</td>\n<td style=\"border-bottom: #e0e8e5 1pt solid; border-left: medium none; border-top: medium none; border-right: #e0e8e5 1pt solid; mso-border-left-alt: solid #E0E8E5 .75pt; mso-border-alt: solid #E0E8E5 .75pt; mso-border-top-alt: solid #E0E8E5 .75pt; padding: 6pt;\">\n\n<span lang=\"EN-US\"> Yes, immediate notice sent to those with a valid support and update agreement</span>\n\n</td>\n<td style=\"border-bottom: #e0e8e5 1pt solid; border-left: medium none; padding-bottom: 3pt; padding-left: 6pt; padding-right: 6pt; border-top: medium none; border-right: #e0e8e5 1pt solid; padding-top: 3pt; mso-border-left-alt: solid #E0E8E5 .75pt; mso-border-alt: solid #E0E8E5 .75pt; mso-border-top-alt: solid #E0E8E5 .75pt;\">\n\n<span lang=\"EN-US\">Yes, made available</span>\n\n</td>\n<td style=\"border-bottom: #e0e8e5 1pt solid; border-left: medium none; padding-bottom: 0.75pt; padding-left: 6pt; padding-right: 6pt; border-top: medium none; border-right: #e0e8e5 1pt solid; padding-top: 0.75pt; mso-border-left-alt: solid #E0E8E5 .75pt; mso-border-alt: solid #E0E8E5 .75pt; mso-border-top-alt: solid #E0E8E5 .75pt;\">\n\n<span lang=\"EN-US\">Yes, made available </span>\n\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 5;\">\n<td style=\"border-bottom: #e0e8e5 1pt solid; border-left: #e0e8e5 1pt solid; background: #eff3f2; border-top: medium none; border-right: #e0e8e5 1pt solid; mso-border-alt: solid #E0E8E5 .75pt; mso-border-top-alt: solid #E0E8E5 .75pt; padding: 0.75pt;\">\n\n<span lang=\"EN-US\">Support</span>\n\n</td>\n<td style=\"border-bottom: #e0e8e5 1pt solid; border-left: medium none; border-top: medium none; border-right: #e0e8e5 1pt solid; mso-border-left-alt: solid #E0E8E5 .75pt; mso-border-alt: solid #E0E8E5 .75pt; mso-border-top-alt: solid #E0E8E5 .75pt; padding: 6pt;\">\n\n<span lang=\"EN-US\">Yes, to those with a valid support and update agreement</span>\n\n</td>\n<td style=\"border-bottom: #e0e8e5 1pt solid; border-left: medium none; padding-bottom: 3pt; padding-left: 6pt; padding-right: 6pt; border-top: medium none; border-right: #e0e8e5 1pt solid; padding-top: 3pt; mso-border-left-alt: solid #E0E8E5 .75pt; mso-border-alt: solid #E0E8E5 .75pt; mso-border-top-alt: solid #E0E8E5 .75pt;\">\n\n<span lang=\"EN-US\">Not included but available separately for purchase </span>\n\n</td>\n<td style=\"border-bottom: #e0e8e5 1pt solid; border-left: medium none; padding-bottom: 0.75pt; padding-left: 6pt; padding-right: 6pt; border-top: medium none; border-right: #e0e8e5 1pt solid; padding-top: 0.75pt; mso-border-left-alt: solid #E0E8E5 .75pt; mso-border-alt: solid #E0E8E5 .75pt; mso-border-top-alt: solid #E0E8E5 .75pt;\">\n\n<span lang=\"EN-US\">Not included but available separately for purchase</span>\n\n</td>\n</tr>\n<tr style=\"mso-yfti-irow: 6; mso-yfti-lastrow: yes;\">\n<td style=\"border-bottom: #e0e8e5 1pt solid; border-left: #e0e8e5 1pt solid; background: #eff3f2; border-top: medium none; border-right: #e0e8e5 1pt solid; mso-border-alt: solid #E0E8E5 .75pt; mso-border-top-alt: solid #E0E8E5 .75pt; padding: 0.75pt;\">\n\n<span lang=\"EN-US\">Charge for Runtimes</span>\n\n</td>\n<td style=\"border-bottom: #e0e8e5 1pt solid; border-left: medium none; border-top: medium none; border-right: #e0e8e5 1pt solid; mso-border-left-alt: solid #E0E8E5 .75pt; mso-border-alt: solid #E0E8E5 .75pt; mso-border-top-alt: solid #E0E8E5 .75pt; padding: 6pt;\">\n\n<span lang=\"EN-US\">Yes, for some embedded uses</span>\n\n</td>\n<td style=\"border-bottom: #e0e8e5 1pt solid; border-left: medium none; padding-bottom: 3pt; padding-left: 6pt; padding-right: 6pt; border-top: medium none; border-right: #e0e8e5 1pt solid; padding-top: 3pt; mso-border-left-alt: solid #E0E8E5 .75pt; mso-border-alt: solid #E0E8E5 .75pt; mso-border-top-alt: solid #E0E8E5 .75pt;\">\n\n<span lang=\"EN-US\">No</span>\n\n</td>\n<td style=\"border-bottom: #e0e8e5 1pt solid; border-left: medium none; padding-bottom: 0.75pt; padding-left: 6pt; padding-right: 6pt; border-top: medium none; border-right: #e0e8e5 1pt solid; padding-top: 0.75pt; mso-border-left-alt: solid #E0E8E5 .75pt; mso-border-alt: solid #E0E8E5 .75pt; mso-border-top-alt: solid #E0E8E5 .75pt;\">\n\n<span lang=\"EN-US\">No</span>\n\n</td>\n</tr>\n</tbody>\n</table>","mtime":1386290932000,"source":"_posts/qt介绍.md"},"1pxjwu92ggtthsoi":{"_id":"1pxjwu92ggtthsoi","content":"title: \"There is no Action mapped for namespace / and action name UserAction\"\nid: 995\ndate: 2013-11-04 15:49:43\ntags: \ncategories: \n- 程序人生\n---\n\n最近在重新温习Struts2的框架，发现如下的错误，甚至纠结。\n\nThere is no Action mapped for namespace / and action name UserAction\n\n经过Google，发现原来是struts.xml位置放错，移到src目录下就可以了。\n\n&nbsp;","mtime":1386290932000,"source":"_posts/there-is-no-action-mapped-for-namespace-and-action-name-useraction.md"},"zdxtmgiaousejm0z":{"_id":"zdxtmgiaousejm0z","content":"title: \"wordpress代码高亮插件WP Code Highlight\"\nid: 537\ndate: 2013-01-25 13:21:49\ntags: \ncategories: \n- wordpress\n- 程序人生\n---\n\n它是一个用于在wordpress中插入代码并提供代码高亮的插件，且符合W3C验证标准，你只需要将代码放在&lt;pre&gt;和&lt;pre&gt;中间即可，插件可以自动识别你所粘贴代码的语言并高亮，所以不需要额外指定语言，使用起来更方便，WP Code Highlight还可以在wordpress的Html编辑器插入一个名为“WP-Code-Highlight”的按钮，方便你插入代码，其实就是方便你插入一个pre标签，另外如果你以前是使用WP-Syntax的，不用担心，你现在仍然可以使用原来的方法插入代码，WP Code Highlight完全兼容WP-Syntax的代码插入风格，因为我自己原来也是用它的，但是它太大了，非常消耗资源，所以自己开发了这个轻便的，并做到插件过渡无忧。WP Code Highlight使用的是轻便的Google Code Prettify代码着色库。我们可以在插件设置页面开关行号，也可以更换代码高亮主题或随机显示高亮主题。感谢荒野无灯帮助纠正Bug。当你万一需要卸载此插件时，WP Code Highlight会自动删除在数据库中的设置数据，做到绿色无污染。\n\n### ==WP Code Highlight插件安装与使用==\n\n（1）下载后解压得到wp-code-highlight文件夹，上传至 /wp-content/plugins/ 目录，然后在后台“插件”那里启用。\n\n（2）因为wordpress的可视化编辑器会将代码来回转义，所以最好禁用，方法：登入后→用户→点击你的帐户→把第一个选项勾上“禁用可视化编辑器”\n\n（3）对插件进行个性化的设置，方法：登入后→设置→WP Code Highlight\n\n（4）写文章时将代码放在&lt;pre&gt;和&lt;/pre&gt;中间即可（Html编辑器中已经提供了一个名为WP-Code-Highlight的按钮，方便你插入代码）。\n\n（5）如果你以前是使用WP-Syntax的，你现在仍然可以使用原来的方法插入代码，WP Code Highlight完全兼容WP-Syntax的代码插入风格。可以保证你过渡无忧。\n\n（6）“Code Button”：勾选“enable”则在Html编辑器中插入一个名为“WP-Code-Highlight”的按钮，方便我们插入代码。\n\n（7）“Highlight Themes”：可以选择4种不同的代码高亮主题，也可以勾选“random”则随机显示代码高亮主题。另外，WP Code Highlight支持在当前wordpress主题文件夹中寻找“wp-code-highlight.css”文件，如果wp-code-highlight.css存在则会自动调用。所以如果你对样式不满意想自己定制，只需要自己写一个wp-code-highlight.css文件放入当前你使用的wordpress主题文件夹即可，写法可参考插件文件夹css目录中的wp-code-highlight.css文件。\n\n（8）“Line Numbers”：勾选“enable”则显示代码行号，勾选“disable”则不显示代码行号。\n\n（9）“Delete Options”：勾选后可以在禁用此插件时自动删除在数据库中的设置选项，做到绿色化。\n\n### ==WP Code Highlight代码高亮演示==\n\n文章或评论中输入：\n\n&lt;pre&gt;\n#include&lt;iostream&gt;\nusing namespace std;\nvoid main(void)\n{\ncout&lt;&lt;\"Hello World\"&lt;&lt;'\\n';\n}\n&lt;/pre&gt;\n\n效果如下：\n<pre>#include\nusing namespace std;\nvoid main(void)\n{\ncout&lt;&lt;\"Hello World\"&lt;&lt;'\\n';\n}</pre>\n\n### ==FAQ常见问题解答==\n\n① 哪些角色可以在文章中贴代码？\n答：只有角色为“管理员”的用户可以，用pre标签包裹代码即可。wordpress对角色非管理员的用户进行了输入限制，比如含PHP尖括号的代码在保 存数据库之前就已经被处理掉，这是为了安全考虑，而对于管理员则没有输入限制，只是在前台显示时进行处理，此时代码高亮插件的作用就发挥出来了，可以避免 管理员的代码在前台显示时被处理掉。\n\n② 哪些角色可以在评论中贴代码？\n答：依然只有角色为“管理员”的用户可以，用pre标签包裹代码即可。对于非管理员或普通访客都不行，理由同上。有人也许会好奇我下面的评论框为什么任何人包括访客都可以贴代码，这个不是插件的功能，处理起来相当麻烦。\n\n③ 为什么没看到“代码按钮”？\n答：代码插入按钮显示在HTML编辑器，名为“WP-Code-Highlight”，其实就是方便你插入pre标签。对于经常需要贴代码的朋友建议你禁 用可视化编辑器，方法上面有，因为来回切换会将代码来回转义，凌乱不堪，而且可视化编辑器写出的文章源代码冗余繁杂。而HTML编辑器写出的文章源代码则 整洁规范。\n\n④ WP Code Highlight插件支持哪些编程语言？\n答：提出这个问题的朋友估计都是被其它的代码高亮插件折腾烦了，因为其它的插件都需要一堆标签属性，很欣慰地告诉你，在WP Code Highlight插件中不存在支不支持哪种语言的说法，不需要指定语言，所有的编程语言都支持，只要pre标签包裹就行，因为原理就是先让pre标签包 裹的代码能在前台正常显示，然后再采用js对语法特征进行着色，语言种类的不同对于这个插件来说仅仅是着色不同而已，对于“类似C、类似Bash、类似 XML”风格的编程语言着色很丰富，其它风格的编程语言仅仅是着色略显单调而已，不影响代码正常显示。这也正是我开发这个插件的初衷，就是为了使用方便。\n下载地址：[http://wordpress.org/extend/plugins/wp-code-highlight/](http://wordpress.org/extend/plugins/wp-code-highlight/)\n转载于:[http://boliquan.com/wp-code-highlight/](http://boliquan.com/wp-code-highlight/)","mtime":1386290932000,"source":"_posts/wordpress-wp-code-highlight.md"},"r41cpptx9kdh6xo7":{"_id":"r41cpptx9kdh6xo7","content":"title: \"WordPress代码高亮插件SyntaxHighlighter终极使用详解\"\nid: 626\ndate: 2013-06-05 09:55:27\ntags: \n- 代码高亮\n- 官方推荐\n- 插件\n- 高亮\ncategories: \n- wordpress\n- 程序人生\n---\n\n子曰： 工欲善其事，必先利其器。作为码农一枚，再加上站长这个已经不再光鲜的称呼，岂能没有一款经济实用、操作简单、而且功能必须强大、样式也必须好看的Wordpress代码高亮插件？！作为一个视代码如生命的码农，把代码整的漂漂亮亮是一件多么神圣和伟大的事情啊！\n\n今天就给大家推荐一款这样的代码高亮插件：SyntaxHighlighter Evolved。相信我， 功这款插件能强足够大、并且简单易用，绝对值得推荐。本站就是用的这款插件，大家可以看看[“生病的JavaScript代码”](http://www.diguage.com/archives/52.html)，这就是最好的例子。\n\n#### 插件介绍\n\n**插件名称：**SyntaxHighlighter Evolved\n\n**插件作者：**Viper007Bond, automattic\n\n**作者主页：**[http://www.viper007bond.com/wordpress-plugins/syntaxhighlighter/](http://www.viper007bond.com/wordpress-plugins/syntaxhighlighter/)\n\n**插件类型：**代码高亮\n\n**中文支持：**支持\n\n**安装环境：**WordPress2.7或以上版本，经过我自己的测试，在3.3和3.4上都可以正常运行\n\n**下载地址：**[点击这里下载最新版](http://downloads.wordpress.org/plugin/syntaxhighlighter.zip)\n\nSyntaxHighlighter Evolved基于开源的JS核心库：SyntaxHighlighter JavaScript package by Alex Gorbatchev二次开发扩展的。安装后只需简单设置一下，不用修改任何代码即可达到很好的效果。\n\n#### 功能特效\n\n说起SyntaxHighlighter Evolved的特效，忍不住要“炫耀”一下。不说不足以让你感受到SyntaxHighlighter Evolved的强悍功能。SyntaxHighlighter Evolved的功能特效如下：\n\n1.  代码高亮\n2.  支持Eclips、Emacs等多种样式，可搭配不同风格的主题\n3.  特色——显示工具条。右上角显示工具条，可以”查看源代码”、”复制源代码”、”打印源代码”。（只有第2版支持）\n4.  显示行号\n5.  长代码自动换行（只有第2版支持）\n6.  可以点击代码中的超文本链接\n7.  可以收缩代码框\n8.  高亮显示模式—某一行高亮\n9.  设置开始行号\n10.  自定义样式\n\n#### 特效演示\n\n只要做Web应用的，无论是JSP，还是PHP,甚至ASP.NET，都会用JavaScript代码。所以，就是用JavaScript代码来演示SyntaxHighlighter的功能吧。要实现的功能是计算第N个斐波纳契数列（Fibonacci Sequence）数列的值。同时，我们要求文件名显示为：FibonacciSequence.js；代码的第二行高亮显示。则实例如下：\n<div id=\"highlighter_612535\">[js]\nfunction fib(n) {\n    return n&lt;2 ? n : fib(n-1) + fib(n-2);\n}[/js]\n\n</div>\n怎么样，你是不是已经被SyntaxHighlighter强大功能震撼了？也许你已经好奇，这是如何实现的？我们接下来就介绍SyntaxHighlighter的使用方法。\n\n#### 安装方法\n\n只需要在后台插件里搜索“SyntaxHighlighter Evolved”之后点击安装，启用即可。\n\n#### 使用方法\n\n使用方法很简单。在发布文章时，在“HTML”编辑模式下（注意：不是CKEditor等富文本编辑模式；防止让这些富文本编辑器把代码转义了。），使用如下代码，把需要展示的代码包含起来即可：（注意：把前面的@符号去掉。）\n\n1.  推荐使用这种方式。这种使用方式，见[\"最佳实践\"](http://www.diguage.com/archives/59.html#bestPractice)\n其实，在网上，搜“SyntaxHighlighter 使用方法”就会出现一堆结果，里面大多时对于这些使用方法的罗列。很少去讲解这些配置项的意思和说明。下面，我将针对这些配置进行详细说明。同时，针对这些配置的使用，我总结了SyntaxHighlighter使用方法的最佳实践。如果急于知道结果，可以直接查看[“最佳实践”](http://www.diguage.com/archives/59.html#bestPractice)。\n\n#### 配置详解\n\n##### 代码样式配置\n\n<table width=\"98%\" border=\"1\"><caption>表-1-SyntaxHighlighter配置参数表</caption>\n<tbody>\n<tr>\n<th scope=\"col\" width=\"70px\">简码</th>\n<th scope=\"col\" width=\"55px\">默认值</th>\n<th scope=\"col\">含义说明</th>\n<th scope=\"col\" width=\"60px\">V2支持</th>\n<th scope=\"col\" width=\"60px\">V3支持</th>\n</tr>\n<tr>\n<td>lang</td>\n<td>无</td>\n<td>说明代码块是哪种语言？</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>autolinks</td>\n<td>true</td>\n<td>Toggle automatic URL linking. 是否自动将网址转换为链接。 默认转换。可以后台管理页面修改默认值。 [示例：点击查看](http://alexgorbatchev.com/SyntaxHighlighter/manual/demo/auto-links.html)</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>classname</td>\n<td>无</td>\n<td>Add an additional CSS class to the code box. 允许你添加一个或多个自定义的样式。 默认没有。可以后台管理页面修改默认值。[示例：点击查看](http://alexgorbatchev.com/SyntaxHighlighter/manual/demo/class-name.html)</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>collapse</td>\n<td></td>\n<td>Toggle collapsing the code box by default, requiring a click to expand it. Good for large code posts. 是否默认折叠代码段。如果折叠，这需要一个“点击”操作，才能展开。非常适合有大段代码的文章。默认不折叠。可以后台管理页面修改默认值。 [示例：点击查看](http://alexgorbatchev.com/SyntaxHighlighter/manual/demo/collapse.html)</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>firstline</td>\n<td>1</td>\n<td>An interger specifying what number the first line should be (for the line numbering). 设置起始行的行号。[示例：点击查看](http://alexgorbatchev.com/SyntaxHighlighter/manual/demo/first-line.html)</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>gutter</td>\n<td></td>\n<td>Toggle the left-side line numbering. 是否显示行号。默认显示。可以后台管理页面修改默认值。 [示例：点击查看](http://alexgorbatchev.com/SyntaxHighlighter/manual/demo/gutter.html)</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>highlight</td>\n<td>无</td>\n<td>A comma-sperated list of line numbers to highlight. You can also specify a range. Example: 2,5-10,12 需要高亮显示并使用逗号分隔的行号。同时，也支持区间（开始行号-结束行号）。例如：2,5-10,12。 [示例：点击查看](http://alexgorbatchev.com/SyntaxHighlighter/manual/demo/highlight.html)</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>htmlscript</td>\n<td></td>\n<td>Toggle highlighting any extra HTML/XML. Good for when you're mixing HTML/XML with another language, such as having PHP inside an HTML web page. The above preview has it enabled for example. This only works with certain languages. 是否高亮显示功能任何额外的HTML / XML。特别适合混合HTML/XML与另一种语言混合的情况下。如在HTML代码中含有部分PHP代码。注意，这仅仅适用于特定的语言。[示例：点击查看](http://alexgorbatchev.com/SyntaxHighlighter/manual/demo/html-script.html)</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>light</td>\n<td>false</td>\n<td> Toggle light mode which disables the gutter and toolbar all at once. 是否显示高亮模式。默认是关闭。可以后台管理页面修改默认值。</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>padlinenumbers</td>\n<td>off</td>\n<td>Controls line number padding. 设置行号的格式化，前面是否补零。默认是关闭。可以后台管理页面修改默认值。</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>title</td>\n<td>无</td>\n<td>Sets some text to show up before the code. 设置文本的标题。默认没有。可以后台管理页面修改默认值。</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>toolbar</td>\n<td>false</td>\n<td> Toggle the toolbar (buttons in v2, the about question mark in v3) 默认不显示。可以后台管理页面修改默认值。 [示例：点击查看](http://alexgorbatchev.com/SyntaxHighlighter/manual/demo/toolbar.html)</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>wraplines</td>\n<td>false</td>\n<td>Toggle line wrapping. 是否开启自动换行。可以后台管理页面修改默认值。</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>smarttabs</td>\n<td>true</td>\n<td>Allows you to turn smart tabs feature on and off. [Click here](http://alexgorbatchev.com/SyntaxHighlighter/manual/demo/smart-tabs.html) for a demo.智能制表符</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>tabsize</td>\n<td>4</td>\n<td>Allows you to adjust tab size. [Click here](http://alexgorbatchev.com/SyntaxHighlighter/manual/demo/tab-size.html) for a demo.制表符的长度。</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table>\n\n##### 颜色主题\n\n目前IT行业中，常用的语言有几十种；使用的开发环境也多种多样，比如开发Java的也许用Eclipse的比较多；但是在Linux下做C/C++开发的也许用Emacs等。见过这些开发环境的人都知道，这些开发环境的高亮模式、颜色等都是不一样的。习惯了Eclipse的人很难适应Emacs；反之亦然。SyntaxHighlighter考虑的很周全，她在内部直接继承了大概其中这样的颜色主题来供大家选择。大家可以在后台的管理页面轻松的选择自己喜欢的“颜色主题”来进行显示。“颜色主题”列表如下：（排名部分前后。呵呵）\n\n*   Default\n*   Django\n*   Eclipse\n*   Emacs\n*   Fade to Grey\n*   Midnight\n*   RDark\n*   None\n\n##### 语言别名\n\n从事IT行业的朋友也许都知道，由于历史等原因，一个语言可能有好几个名字。比如JavaScript，微软山寨了个JScript；后来经过ECMA标准化之后，名字又称了ECMAScript；我们大家平时还简称成JS。这就给我们在使用SyntaxHighlighter的语言代号时，造成了一定的困难：不知道到底该用哪个名字才是“正确”的。\n\n其实，这点SyntaxHighlighter也考虑到了。她通过“语言别名”的方式很好的解决了这个问题。\n<table width=\"98%\" border=\"1\"><caption>表-2-SyntaxHighlighter中“语言别名”和“语言代码”对应表</caption>\n<tbody>\n<tr>\n<th scope=\"col\" width=\"26%\">语言别名</th>\n<th scope=\"col\" width=\"26%\">语言代码</th>\n<th scope=\"col\">说明</th>\n</tr>\n<tr>\n<td>as3</td>\n<td>as3</td>\n<td rowspan=\"2\">不知道是否支持AS2？</td>\n</tr>\n<tr>\n<td>actionscript3</td>\n<td>as3</td>\n</tr>\n<tr>\n<td>bash</td>\n<td>bash</td>\n<td rowspan=\"2\">竟然还支持Shell.</td>\n</tr>\n<tr>\n<td>shell</td>\n<td>bash</td>\n</tr>\n<tr>\n<td>coldfusion</td>\n<td>coldfusion</td>\n<td rowspan=\"2\"></td>\n</tr>\n<tr>\n<td>cf</td>\n<td>coldfusion</td>\n</tr>\n<tr>\n<td>clojure</td>\n<td>clojure</td>\n<td></td>\n</tr>\n<tr>\n<td>clj</td>\n<td>clojure</td>\n<td></td>\n</tr>\n<tr>\n<td>cpp</td>\n<td>cpp</td>\n<td></td>\n</tr>\n<tr>\n<td>c</td>\n<td>cpp</td>\n<td></td>\n</tr>\n<tr>\n<td>c-sharp</td>\n<td>csharp</td>\n<td rowspan=\"2\"></td>\n</tr>\n<tr>\n<td>csharp</td>\n<td>csharp</td>\n</tr>\n<tr>\n<td>css</td>\n<td>css</td>\n<td></td>\n</tr>\n<tr>\n<td>delphi</td>\n<td>delphi</td>\n<td rowspan=\"3\">看来Delphi和Pascal确实有一腿啊！</td>\n</tr>\n<tr>\n<td>pas</td>\n<td>delphi</td>\n</tr>\n<tr>\n<td>pascal</td>\n<td>delphi</td>\n</tr>\n<tr>\n<td>diff</td>\n<td>diff</td>\n<td></td>\n</tr>\n<tr>\n<td>patch</td>\n<td>diff</td>\n<td></td>\n</tr>\n<tr>\n<td>erl</td>\n<td>erlang</td>\n<td></td>\n</tr>\n<tr>\n<td>erlang</td>\n<td>erlang</td>\n<td></td>\n</tr>\n<tr>\n<td>fsharp</td>\n<td>fsharp</td>\n<td></td>\n</tr>\n<tr>\n<td>groovy</td>\n<td>groovy</td>\n<td></td>\n</tr>\n<tr>\n<td>java</td>\n<td>java</td>\n<td></td>\n</tr>\n<tr>\n<td>jfx</td>\n<td>javafx</td>\n<td rowspan=\"2\"></td>\n</tr>\n<tr>\n<td>javafx</td>\n<td>javafx</td>\n</tr>\n<tr>\n<td>js</td>\n<td>jscript</td>\n<td rowspan=\"3\">从这里可以看出，针对JavaScript的代码，写js行，写javascript行，甚至是微软的jscript都行。</td>\n</tr>\n<tr>\n<td>jscript</td>\n<td>jscript</td>\n</tr>\n<tr>\n<td>javascript</td>\n<td>jscript</td>\n</tr>\n<tr>\n<td>latex</td>\n<td>latex</td>\n<td>Not used as a shortcode</td>\n</tr>\n<tr>\n<td>tex</td>\n<td>latex</td>\n<td></td>\n</tr>\n<tr>\n<td>matlab</td>\n<td>matlabkey</td>\n<td></td>\n</tr>\n<tr>\n<td>objc</td>\n<td>objc</td>\n<td rowspan=\"2\"></td>\n</tr>\n<tr>\n<td>obj-c</td>\n<td>objc</td>\n</tr>\n<tr>\n<td>perl</td>\n<td>perl</td>\n<td rowspan=\"2\"></td>\n</tr>\n<tr>\n<td>pl</td>\n<td>perl</td>\n</tr>\n<tr>\n<td>php</td>\n<td>php</td>\n<td></td>\n</tr>\n<tr>\n<td>plain</td>\n<td>plain</td>\n<td></td>\n</tr>\n<tr>\n<td>text</td>\n<td>plain</td>\n<td></td>\n</tr>\n<tr>\n<td>ps</td>\n<td>powershell</td>\n<td rowspan=\"2\"></td>\n</tr>\n<tr>\n<td>powershell</td>\n<td>powershell</td>\n</tr>\n<tr>\n<td>py</td>\n<td>python</td>\n<td rowspan=\"2\"></td>\n</tr>\n<tr>\n<td>python</td>\n<td>python</td>\n</tr>\n<tr>\n<td>r</td>\n<td>r</td>\n<td>Not used as a shortcode</td>\n</tr>\n<tr>\n<td>splus</td>\n<td>r</td>\n<td></td>\n</tr>\n<tr>\n<td>rails</td>\n<td>ruby</td>\n<td rowspan=\"4\">针对Ruby的。</td>\n</tr>\n<tr>\n<td>rb</td>\n<td>ruby</td>\n</tr>\n<tr>\n<td>ror</td>\n<td>ruby</td>\n</tr>\n<tr>\n<td>ruby</td>\n<td>ruby</td>\n</tr>\n<tr>\n<td>scala</td>\n<td>scala</td>\n<td></td>\n</tr>\n<tr>\n<td>sql</td>\n<td>sql</td>\n<td></td>\n</tr>\n<tr>\n<td>vb</td>\n<td>vb</td>\n<td rowspan=\"2\"></td>\n</tr>\n<tr>\n<td>vbnet</td>\n<td>vb</td>\n</tr>\n<tr>\n<td>xml</td>\n<td>xml</td>\n<td rowspan=\"5\">针对XML、HTML以及XHTML等，其实都是按照XML来处理的</td>\n</tr>\n<tr>\n<td>xhtml</td>\n<td>xml</td>\n</tr>\n<tr>\n<td>xslt</td>\n<td>xml</td>\n</tr>\n<tr>\n<td>html</td>\n<td>xml</td>\n</tr>\n<tr>\n<td>xhtml</td>\n<td>xml</td>\n</tr>\n</tbody>\n</table>\n从这个表中，我们也可以看出SyntaxHighlighter支持的编程语言多达二十五种语言：AppleScript、 ActionScript、 Bash、 ColdFusion、 C /C++、 C#、 CSS、 Delphi、 Diff（不知道这是不是一种编程语言）、 Erlang、 Groovy、 Java、 JavaFX、 JavaScript、 Perl、 PHP、 PowerShell、 Python、 Ruby、 Sass、 Scala、 SQL、 VB、 XML。\n\n#### <a id=\"bestPractice\" name=\"bestPractice\"></a>最佳实践\n\n经过配置的讲解，我们可以明白，SyntaxHighlighter已经遵循了软件工程中的最佳实践“约定大于配置”。其实，我们并不需要过多地去设定SyntaxHighlighter的配置，只需要设定一些“实在没办法约定”的配置项即可。比如：title、highlight等。另外，经过我自己的实际测试，我还发现了第五种使用方法，其实，我们可以在[代码名称]这个标签中，添加刚刚讲到的配置配置项。当然，lang就没必要了。因为这里已经通过“标签名”指定过了。综上所述，SyntaxHighlighter使用方法的最佳实践如下：（下面以Java代码为例）\n\n**[@java title=\"自定义的文件名\" highlight=\"高亮的行\"]　这里写你的代码　[/java]**\n\n有时，我们并不需要一定有高亮强调的行，这是highlight就可以省略掉。另外，如果你需要自定义样式，可以添加class属性。不过，我个人觉得必要性不大。\n\n#### 特效扩展\n\n大家在 [\"生病的JavaScript代码\"](http://www.diguage.com/archives/52.html) 也许会发现高亮部分的背景颜色比较深，也许有一些人看着不舒服（我个人就觉得颜色有点深）。也许就有人想修改高亮行的背景色。这是，就可以通过修改插件自带的CSS文件，来实现自定义样式的功能。\n\n在线操作方式是：登录Wordpress后台管理页面，插件-编辑-选择SyntaxHighlighter-选择syntaxhighlighter/syntaxhighlighter2/styles/shThemeDefault.css-找到\n\n[css]\n.syntaxhighlighter .line.highlighted.alt1,\n.syntaxhighlighter .line.highlighted.alt2\n{\n    background-color: #e0e0e0 !important;\n}\n[/css]\n\n将其修改为：\n\n[css]\n.syntaxhighlighter .line.highlighted.alt1,\n.syntaxhighlighter .line.highlighted.alt2\n{\n    background-color: #6CE26C !important;\n}\n[/css]\n\n重起见，D瓜哥不建议做这个修改。如果以后修改“颜色主题”可能会带来一点的不良影响。\n\nSyntaxHighlighter的“容器”样式是一个方方正正。也许不如圆角、立体阴影效果漂亮。这个效果也很容易实现。只需要修改syntaxhighlighter的样式即可；不过，这个修改是在主题的style.css文件做的。修改方式如下：将以下代码添加到主题的style.css文件里面：\n\n[css]\n.syntaxhighlighter{\n     padding: 10px 0 !important;\n     box-shadow: 1px 1px 3px #ccc;\n    -webkit-box-shadow: 1px 1px 3px #ccc;\n    -moz-box-shadow: 1px 1px 3px #ccc;\n    border-radius: 5px;\n   -webkit-border-radius: 5px;\n    -moz-border-radius: 5px;\n }\n[/css]\n<div id=\"highlighter_63428\"></div>\n参考资料：\n\n*   [代码高亮插件SyntaxHighlighter Evolved的使用方法](http://www.msland.cn/syntaxhighlighter.html)\n*   [WordPress代码高亮插件SyntaxHighlighter Evolved](http://lovesoo.org/wordpress-code-highlight-plugin-syntaxhighlighter-evolved.html)\n*   [SyntaxHighlighter配置详解B SyntaxHighlighter.defaults](http://blog.lichenliang.com/syntaxhighlighterb-syntaxhighlighter-defaults.html)\n*   [SYNTAXHIGHLIGHTER配置详解](http://www.isolution.me/syntaxhighlighter-config)\n*   [维基百科中关于“斐波那契数列”的介绍](http://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97)\n<div></div>\n<div id=\"postCopyright\">作 者：[ D瓜哥，http://www.diguage.com/](http://www.diguage.com/)\n原文链接：[http://www.diguage.com/archives/59.html](http://www.diguage.com/archives/59.html \"地瓜哥网-WordPress代码高亮插件SyntaxHighlighter终极使用详解\")</div>","mtime":1386290932000,"source":"_posts/wordpress代码高亮插件syntaxhighlighter终极使用详解.md"},"5upa7ubv04jog6sb":{"_id":"5upa7ubv04jog6sb","content":"title: \"WordPress博客挣广告费?\"\nid: 584\ndate: 2013-05-30 15:16:45\ntags: \n- wordpress\n- 广告费\ncategories: \n- wordpress\n---\n\n我们都知道，大部分的博主开设独立博客的动机是因为个人兴趣，但是跟人兴趣并不能让一个独立博客健康长久的维持下去。很多草根博主的博客每天也就几 十个ip，多的时候几百个ip，这样少的流量显然不足以赢利，博主们辛辛苦苦更新文章、支付主机和域名的费用却没有回报，长此以往，博主们的热情也就消退 了，坚持几个月之后也就将博客置之一旁不在更新了。我09年看过一份外文刊物上的调查报告，名字很骇人听闻，意思是博客即将在SNS社区的冲击下消亡，他 们更是列出了一份数据，显示70%的博客刚刚建设完成就被放弃了，而放弃博客的原因就是因为不能实现盈利。\n博客的门槛低，维护起来也容易，所以想赚钱的站长大部分是不屑于做博客 的。但是博客真的不能盈利吗?显然不是!据我所知，煎蛋网、月光博客、卢松松博客都获得了成功。新手博主们大多对博客的盈利能力毫无概念，望着前辈们动辄 上万的ip很快丧失了信心，觉得自己的博客想要赚钱恐怕要下辈子了。因此Arlen专门写了这篇文章，对博客流量和盈利能力做一个分析，用事实证明实现盈 利并不是你想象的那么难。\n首先，我把博客划分为几个等级(违规博客、专业性质博客、商业博客、作弊、垃圾站不在此列，仅仅指个人博客)\n起步阶段：0—1000ip(负收益)\n初级阶段：1000—8000ip(收支持平)\n中级阶段：8000—20000ip(有所收获)\n高级阶段：20000——10万ip(收获颇丰)\n终极阶段：10万以上(发了)\n0—1000ip(月预期收益0)\n这是起步阶段，绝大多数博主都挣扎在这一阶段。有些博主偶尔某天做到7、8百个ip，但这也说明不了什么，因为做到这样的成绩并不难。用一个方法就 很容易实现：在如在几个与你博客内容相关的论坛贴吧注册个账号，在自己的博客发布一些热门资源种子，如：《死神来了5》高清视频种子，然后转帖到贴吧论坛 里，留下自己的链接。这样花两个小时通过复制粘贴发布30个推广链接，你当天的访问量至少会到500(每天都在2、3十个ip的博友可以试试)。既然流量 来的容易，理所当然价值也就不高，回头客很少，下载完了基本就不会再来了。所以说这个阶段Arlen建议大家不要放广告，因为这个阶段最重要的是吸引访 客，给大家留下一个好印象。而且就算你放了广告联盟的广告估计也会因为广告费太少而提不出钱来。不要去做阿里妈妈联盟的CPS广告，根本没有什么收益的。 先忍耐一个月吧，每天去http://top.baidu.com/查看热门关键字，通过挑选关键字来发布一些相关文章，很快就会见到效果的。\n1000ip—3000ip (月预期收入150—500元)\n首先恭喜你，坚持了一个月(甚至更长时间)以后，你的网站终于像个样子了。现在你们天都会有一些固定访客(查看网站回访率)，网站的内容也已经初步 充实了。现在你可以考虑加入一些广告联盟来弥补你的支出了。我首先推荐的是google adsense和百度联盟，以你现在的访问量，通过这两个联盟的审核应该不难，如果通过不了就多申请几遍。谷歌联盟普遍比百度联盟的广告费多一些，美元更 值钱嘛。广告代码投放有专门的教程，我这里就不再详细讲了。google一般每天收入0.3—3美元不等，百度一般0.5——4元不等。两个广告联盟都放 上去，收入会比较理想。这样一来，主机费用和域名费用基本可以用广告费弥补了。(当然也有例外，比如Arlen的博客是一个纯图片站，这个博客消耗的流量 是同样访问量的博客消耗流量的十几倍甚至是数十倍，逼不得已我只能采用部分图片外链来减轻压力)\n3000—8000ip (月预期收入500—1200元)\n这一阶段和上一阶段一样，还是通过广告联盟实现收入。不过这时候一般就会有广告商主动联系你了。有几次广告联盟会联系我QQ问我是否愿意投放弹窗广 告，我最终没有同意，在访客对你的网站没有足够的依赖度之前，弹窗广告足以把一个网站毁掉。所以大家还是不要放弹窗广告的好，否则无异于杀鸡取卵。每个页 面广告数量最好不要多于五个。以“萝莉萌图网”为例，页面顶部通栏广告位一个、侧边栏广告位一个、文章底部广告位一个，留言框底部广告位一个、还有一个悬 浮广告(这个可以去掉)。如果再多就会让人产生反感了。\n8000—20000ip(月预期收入1200— 5000元)\n8000IP是一个门槛，预示着你的博客正式步入持续发展阶段。月收入上了一个档次，实现了四位数收入。现在你的博客收入已经可以满足你的一些基本 需求，甚至可以挣点零花钱。网站的盈利方式开始多样化：可以撤掉一些盈利少的广告联盟联系某些有意向的人按月出售部分广告位、也可以出售部分友情链接。总 之，流量摆在那里，盈利方式是很多的，可以看看月光博客和卢松松博客是怎么做的(早在2004年5月，月光博客广告收入开始超过工作收入; 2007年7月，月光博客透露他上月仅feedburner的广告收入就有435美元，还不包括google adsense广告收入; 2007年10月，月光博客透露他上月的google adsense推荐收入就有760美元，现在月收入肯定过万了)。\n20000ip以上的我们就不讨论了，那时候你已经在独立博客界成神了，做到这一步的人可不多。\n具体收入与各种因素有关：点击率、广告位优化、网站内容与广告相关度，所以上面的数据仅仅可以作为参考，大家也不要迷信数据。\n提高访问量的最主要的因素：内容。与其到处做宣传不如好好做内容，“内容为皇”这句话可不是随便说说，你的博客一共只有十几篇文章是绝对吸引不来流量的。另外多做做关键词优化，会有意想不到的惊喜。\n\n———————————-分割线————————————\n以下为C++爱好者博主的观点：\nbtw，关于上面说的0-1000的ip，文中举例说搜搜百度热门榜，对应的发一些文章，论坛里发发链接什么的，轻松可以做到。这个观点是没有错的，但是我们当初建立博客的目的只是为了有个抒写自己文章的地方，盈利确实没有考虑，但是支出却放在眼前，所以我们不得不开始考虑盈利了。但是我们却不能为了IP而每天发发热点事件，如果某天你发现热门事件新闻没人看了，大家都在新闻门户看了，那你就悲剧了，所以还是得写你自己喜欢的和遇到的内容，这样一直有内容可写，而且也有经验，同时有特色，会吸引一批兴趣相同的人来看的。\n总之，做个人博客还是不要急，像月光博客和异次元都是做出特色了才有高盈利的，所以要专注。","mtime":1386290932000,"source":"_posts/wordpress博客挣广告费.md"},"b9kkzybg5fyeyqcw":{"_id":"b9kkzybg5fyeyqcw","content":"title: \"Xampp 端口被占用问题\"\nid: 940\ndate: 2013-10-06 16:17:10\ntags: \n- xampp 端口\n- 端口占用\ncategories: \n- PHP5\n---\n\n<div id=\"zoomtext\">ampp要修改两个地方才能启动Apache。不然就把模块Mod_SSL注释掉。就可以不用理443这个了。\nXAMPP修改80和443端口</div><!-- more -->\n<div></div>\n<div>在启动XAMPP时，如果报80/443端口被占，可以修改此软件的端口</div>\n<div>打开D:\\Program Files\\xampp\\apache\\conf\\httpd.conf文件把80修改为8080；</div>\n<div>打开D:\\Program Files\\xampp\\apache\\conf\\extra\\httpd-ssl.conf文件把443修改为4433或者关闭SSL扩展；</div>\n<div></div>\n<div>可以在命令行下输入“netstat -nab”查看当前端口使用情况.</div>\n<div>XAMPP启动出现问题时，可以查看下列日志，帮助查找原因\nD:\\Program Files\\xampp\\apache\\error下文件；D:\\Program Files\\xampp\\apache\\logs下文件。</div>\n<div></div>","mtime":1386739075000,"source":"_posts/xampp-端口被占用问题.md"},"51608oa68uhhvvv2":{"_id":"51608oa68uhhvvv2","content":"title: \"【MyBatis学习笔记】系列之二：MyBatis增删改查示例\"\nid: 883\ndate: 2013-06-19 11:06:29\ntags: \n- mybatis\n- mybatis增删改查\ncategories: \n- mybatis\n---\n\n在系列一的基础上，我们实现mybatis的增删改查操作。查询操作在上一节已经实现，可以先去看看哈。\n\n1、为了方便地获取SqlSessionFactory实例，先写一个工具类SqlSessionFactoryGen，用以生成SqlSessionFactory实例，代码如下：\n<!-- more -->\n{%codeblock lang:java%}\npackage com.hanfeng.demo.utils;\n\nimport java.io.Reader;\n\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\n\n/**\n* 工具类SqlSessionFactoryGen，用以生成SqlSessionFactory实例\n* @author hanfeng\n*\n*/\npublic class SqlSessionFactoryGen {\n private static SqlSessionFactory factory;\n //静态代码块。在类初始化时被执行，如第一次\n //引用类的静态变量，创建类的第一个实例\n static{\n //与configuration.xml中的mapper配置类似，告诉MyBatis应读取的核心配置文件\n String resource = &quot;main/resources/config/configuration.xml&quot;;\n Reader reader = null;\n try {\n reader = Resources.getResourceAsReader(resource);\n } catch (Exception e) {\n e.printStackTrace();\n }\n factory = new SqlSessionFactoryBuilder().build(reader);\n }\n\npublic static SqlSessionFactory getSqlSessionFactory()\n {\n return factory;\n }\n}\n{%endcodeblock%}\n\n由于整个程序只需要一个SqlSessionFactory实例，因此通过调用SqlSessionFactoryGen的getSqlSessionFactory()方法获取的是同一个SqlSessionFactory实例。\n\n2、新建执行测试类StudentManagerTest\n\n[java]\npackage com.hanfeng.demo.pojo.test;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport com.hanfeng.demo.dao.StudentMapper;\nimport com.hanfeng.demo.pojo.Student;\nimport com.hanfeng.demo.utils.SqlSessionFactoryGen;\npublic class StudentManagerTest {\n //获取SqlSessionFactory实例\n private static SqlSessionFactory factory = SqlSessionFactoryGen.getSqlSessionFactory();\n public static void main(String[] args) {\n }\n}\n\n[/java]\n\n我们会在测试类的基础上逐步增加方法哈，查询方法见上一节。\n\n3、增加方法\n首先在接口StudentMapper中声明执行增加、编辑、删除操作的方法，代码如下所示：\n\n[java]\n//添加新的学生\n public void add(Student student);\n //编辑学生信息\n public void update(Student student);\n //根据ID删除信息\n public void delete(int id);\n\n[/java]\n\n接着在StudentMapper.xml中编写相应的SQL语句\n\n[xml]\n&lt;!--与StudentMapper接口中的getById方法对应，包括方法名和参数类型。SQL语句中以“#{}”的形式引用参数--&gt;\n &lt;select id=&quot;getById&quot; parameterType=&quot;int&quot; resultMap=&quot;studentResultMap&quot;&gt;\n SELECT *\n FROM student WHERE id = #{id}\n &lt;/select&gt;\n &lt;!-- 新增学生 --&gt;\n &lt;!--执行增加操作的SQL语句。id和parameterType分别与StudentMapper接口中的add方法的名字和\n 参数类型一致。以#{name}的形式引用Student参数的name属性，MyBatis将使用反射读取Student参数\n 的此属性。#{name}中name大小写敏感。引用其他 的gender等属性与此一致。seGeneratedKeys设置\n 为&quot;true&quot;表明要MyBatis获取由数据库自动生成的主 键；keyProperty=&quot;id&quot;指定把获取到的主键值注入\n 到Student的id属性--&gt;\n &lt;insert id=&quot;add&quot; parameterType=&quot;Student&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;\n insert into student(name,gender,major,grade)values(#{name},#{gender},#{major},#{grade})\n &lt;/insert&gt;\n\n &lt;!-- 编辑学生信息 --&gt;\n &lt;!--执行修改操作的SQL语句。id和parameterType属性以及“#{}”的形式的含义与上述insert语句一致。--&gt;\n &lt;update id=&quot;update&quot; parameterType=&quot;Student&quot;&gt;\n update student set name=#{name},\n gender=#{gender},\n major=#{major},\n grade=#{grade}\n where id=#{id}\n &lt;/update&gt;\n\n &lt;!-- 删除学生信息 --&gt;\n &lt;delete id=&quot;delete&quot; parameterType=&quot;int&quot;&gt;\n delete from student where id = #{id}\n &lt;/delete&gt;\n\n[/xml]\n\n测试类完整代码：\n\n[java]\npackage com.hanfeng.demo.pojo.test;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport com.hanfeng.demo.dao.StudentMapper;\nimport com.hanfeng.demo.pojo.Student;\nimport com.hanfeng.demo.utils.SqlSessionFactoryGen;\npublic class StudentManagerTest {\n //获取SqlSessionFactory实例\n private static SqlSessionFactory factory = SqlSessionFactoryGen.getSqlSessionFactory();\n\n //实现增加学生\n public void add(){\n SqlSession sqlSession = factory.openSession();\n try {\n Student student = new Student();\n student.setName(&quot;陈静&quot;);\n student.setGender(&quot;女&quot;);\n student.setMajor(&quot;计算机科学与技术&quot;);\n student.setGrade(&quot;2008&quot;);\n\n StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);\n mapper.add(student);\n\n //提交事务，否则无法实际保存到数据库\n sqlSession.commit();\n\n System.out.println(&quot;数据库生成ID:&quot;+student.getId());\n } catch (Exception e) {\n e.printStackTrace();\n }finally{\n sqlSession.close();\n }\n }\n //根据ID查询学生\n public void QueryStudentById(){\n SqlSession sqlSession = factory.openSession();\n try {\n StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);\n Student student = mapper.getById(4);\n if (student != null) {\n System.out.println(&quot;姓名：&quot;+student.getName()+&quot;\\n专业：&quot;+student.getMajor());\n }else{\n System.out.println(&quot;没有找到相关记录！&quot;);\n }\n } catch (Exception e) {\n e.printStackTrace();\n }finally{\n sqlSession.close();\n }\n }\n\n //编辑学生信息\n public void updateInfo(){\n SqlSession sqlSession = factory.openSession();\n try {\n StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);\n Student student = mapper.getById(3);\n System.out.println(&quot;修改前信息：&quot;+student.getName()+&quot;--&quot;+student.getGender()+&quot;--&quot;+student.getMajor()+&quot;--&quot;+student.getGrade());\n student.setMajor(&quot;数控技术&quot;);\n mapper.update(student);\n sqlSession.commit();\n System.out.println(&quot;修改后信息：&quot;+student.getName()+&quot;--&quot;+student.getGender()+&quot;--&quot;+student.getMajor()+&quot;--&quot;+student.getGrade());\n } catch (Exception e) {\n e.printStackTrace();\n }finally{\n sqlSession.close();\n }\n }\n\n //删除学生信息\n public void deleteInfo(){\n SqlSession sqlSession = factory.openSession();\n try {\n StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);\n mapper.delete(4);\n System.out.println(&quot;删除成功&quot;);\n sqlSession.commit();\n } catch (Exception e) {\n e.printStackTrace();\n }finally{\n sqlSession.close();\n }\n }\n public static void main(String[] args) {\n StudentManagerTest test = new StudentManagerTest();\n //执行增加学生的方法\n// test.add();\n //执行学生查询\n// test.QueryStudentById();\n //执行学生信息修改\n// test.updateInfo();\n // 执行学生信息删除\n test.deleteInfo();\n }\n}\n\n[/java]\n\n源代码：[http://pan.baidu.com/share/link?shareid=1347967662&amp;uk=4161616584](http://pan.baidu.com/share/link?shareid=1347967662&amp;uk=4161616584)","mtime":1386293541000,"source":"_posts/【mybatis学习笔记】系列之二：mybatis增删改查示例.md"},"76liogq8k512g55p":{"_id":"76liogq8k512g55p","content":"title: \"【php中级】PHP Cookies（19）\"\nid: 712\ndate: 2013-06-05 15:12:26\ntags: \ncategories: \n- PHP\n- 程序人生\n---\n\n## 什么是 Cookie？\n\ncookie 常用于识别用户。cookie 是服务器留在用户计算机中的小文件。每当相同的计算机通过浏览器请求页面时，它同时会发送 cookie。通过 PHP，您能够创建并取回 cookie 的值。\n\n## 如何创建 cookie？\n\nsetcookie() 函数用于设置 cookie。\n\n注释：setcookie() 函数必须位于 &lt;html&gt; 标签之前。\n\n### 语法\n\n[php]setcookie(name, value, expire, path, domain);[/php]</pre>\n\n### 例子\n\n在下面的例子中，我们将创建名为 \"user\" 的 cookie，把为它赋值 \"hello\"。我们也规定了此 cookie 在一小时后过期：\n\n[php]\n&lt;?php \nsetcookie(&quot;user&quot;, &quot;hello&quot;, time()+3600);\n?&gt;\n\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n[/php]\n\n注释：在发送 cookie 时，cookie 的值会自动进行 URL 编码，在取回时进行自动解码（为防止 URL 编码，请使用 setrawcookie() 取而代之）\n\n## 如何取回 Cookie 的值？\n\nPHP 的 $_COOKIE 变量用于取回 cookie 的值。\n\n在下面的例子中，我们取回了名为 \"user\" 的 cookie 的值，并把它显示在了页面上：\n\n[php]\n&lt;pre&gt;&lt;?php\n// Print a cookie\necho $_COOKIE[&quot;user&quot;];\n\n// A way to view all cookies\nprint_r($_COOKIE);\n?&gt;\n[/php]\n\n使用 isset() 函数来确认是否已设置了 cookie：\n[php]&lt;/pre&gt;\n&lt;?php\n\nif(isset($_COOKIE[&quot;user&quot;]))\n{\n echo $_COOKIE[&quot;user&quot;];\n}else{\n echo &quot;welcome guest!&quot;;\n}\n?&gt;\n&lt;pre&gt;[/php]\n\n## 如何删除 cookie？\n\n当删除 cookie 时，您应当使过期日期变更为过去的时间点。\n\n[php]\n\n&lt;?php\n setcookie(&quot;user&quot;,&quot;hello&quot;,time()-360);\n?&gt;\n\n[/php]\n\n&nbsp;","mtime":1386290932000,"source":"_posts/【php中级】php-cookies（19）.md"},"j0mst3696mvy3cf0":{"_id":"j0mst3696mvy3cf0","content":"title: \"【php中级】PHP Date()函数（15）\"\nid: 695\ndate: 2013-06-05 14:05:10\ntags: \ncategories: \n- PHP\n- 程序人生\n---\n\n**PHP 的 date() 函数用于格式化时间或日期。**\n\n&nbsp;\n\n## PHP Date() 函数\n\nPHP Date() 函数可把时间戳格式化为可读性更好的日期和时间。\n\n### 语法\n\n<pre>date(format,timestamp)</pre>\n<table>\n<tbody>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n<tr>\n<td>format</td>\n<td>必需。规定时间戳的格式。</td>\n</tr>\n<tr>\n<td>timestamp</td>\n<td>可选。规定时间戳。默认是当前的日期和时间。</td>\n</tr>\n</tbody>\n</table>\n<div>\n\n## PHP 日期 - 什么是时间戳（Timestamp）？\n\n时间戳是自 1970 年 1 月 1 日（00:00:00 GMT）以来的秒数。它也被称为 Unix 时间戳（Unix Timestamp）。\n\n## PHP 日期 - 格式化日期\n\ndate() 函数的第一个参数规定了如何格式化日期/时间。它使用字母来表示日期和时间的格式。这里列出了一些可用的字母：\n\n*   d - 月中的天 (01-31)\n*   m - 当前月，以数字计 (01-12)\n*   Y - 当前的年（四位数）\n您可以在我们的 PHP Date 参考手册中，找到格式参数中可以使用的所有字母。\n\n可以在字母之间插入其他字符，比如 \"/\"、\".\" 或者 \"-\"，这样就可以增加附加格式了：\n\n[php]\n\n&lt;?php\n echo date(&quot;y/m/d&quot;);\n echo &quot;&lt;br/&gt;&quot;;\n echo date(&quot;y.m.d&quot;);\n echo &quot;&lt;br/&gt;&quot;;\n echo date(&quot;y-m-d&quot;);\n?&gt;\n\n[/php]\n\n## PHP 日期 - 添加时间戳\n\ndate() 函数的第二个参数规定了一个时间戳。此参数是可选的。如果您没有提供时间戳，当前的时间将被使用。\n\n在我们的例子中，我们将使用 mktime() 函数为明天创建一个时间戳。\n\nmktime() 函数可为指定的日期返回 Unix 时间戳。\n\n### 语法\n\n[php]mktime(hour,minute,second,month,day,year,is_dst)[/php]\n\n如需获得某一天的时间戳，我们只要设置 mktime() 函数的 day 参数就可以了：\n\n[php]\n\n&lt;?php\n $tomorrow = mktime(0,0,0,date(&quot;m&quot;),date(&quot;d&quot;)+1,date(&quot;y&quot;));\n echo &quot;Tomorrwo is &quot;.date(&quot;y/m/d&quot;,$tomorrow);\n?&gt;\n\n[/php]\n\n## PHP 日期 - 参考手册\n\n如需更多有关 PHP 日期函数的信息，请访问 W3School 为您提供的 [PHP Date 参考手册](http://www.w3school.com.cn/php/php_ref_date.asp \"PHP Date / Time 函数\")。\n\n&nbsp;\n\n</div>","mtime":1386290932000,"source":"_posts/【php中级】php-date函数（15）.md"},"mjv2gxgkkuf8dwvc":{"_id":"mjv2gxgkkuf8dwvc","content":"title: \"【php中级】PHP Include 文件（16）\"\nid: 698\ndate: 2013-06-05 14:12:05\ntags: \ncategories: \n- PHP\n- 程序人生\n---\n\n**服务器端包含 (SSI) 用于创建可在多个页面重复使用的函数、页眉、页脚或元素。**\n\n## PHP include 和 require 语句\n\n在 PHP 中，您能够在服务器执行 PHP 文件之前把该文件插入另一个 PHP 文件中。\n\ninclude 和 require 语句用于在执行流中向其他文件插入有用的的代码。\n\ninclude 和 require 很相似，除了在错误处理方面的差异：\n\n*   <span style=\"color: #ff0000;\">require 会产生致命错误 (E_COMPILE_ERROR)，并停止脚本</span>\n*   <span style=\"color: #ff0000;\">include 只会产生警告 (E_WARNING)，脚本将继续</span>\n因此，如果您希望继续执行，并向用户输出结果，即使包含文件已丢失，那么请使用 include。否则，在框架、CMS 或者复杂的 PHP 应用程序编程中，请始终使用 require 向执行流引用关键文件。这有助于提高应用程序的安全性和完整性，在某个关键文件意外丢失的情况下。\n\n包含文件省去了大量的工作。这意味着您可以为所有页面创建标准页头、页脚或者菜单文件。然后，在页头需要更新时，您只需更新这个页头包含文件即可。\n\n### 语法\n\n<pre>include '_filename_';</pre>\n或者\n<pre>require '_filename_';</pre>\nPHP include 和 require 语句\n\n### 基础实例\n\n假设您有一个标准的页头文件，名为 \"header.php\"。如需在页面中引用这个页头文件，请使用 include/require：\n\n[php]\n&lt;pre&gt;&lt;html&gt;\n&lt;body&gt;\n\n&lt;code&gt;&lt;?php include 'header.php'; ?&gt;&lt;/code&gt;\n&lt;h1&gt;Welcome to my home page!&lt;/h1&gt;\n&lt;p&gt;Some text.&lt;/p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n[/php]\n\n### 例子 2\n\n假设我们有一个在所有页面中使用的标准菜单文件：\n\n[php]\n&lt;pre&gt;&quot;menu.php&quot;:\n\necho '&lt;a href=&quot;/default.php&quot;&gt;Home&lt;/a&gt;\n&lt;a href=&quot;/tutorials.php&quot;&gt;Tutorials&lt;/a&gt;\n&lt;a href=&quot;/references.php&quot;&gt;References&lt;/a&gt;\n&lt;a href=&quot;/examples.php&quot;&gt;Examples&lt;/a&gt;\n&lt;a href=&quot;/about.php&quot;&gt;About Us&lt;/a&gt;\n&lt;a href=&quot;/contact.php&quot;&gt;Contact Us&lt;/a&gt;';\n[/php]\n\n网站中的所有页面均应引用该菜单文件。这是具体的做法：\n\n[php]\n&lt;pre&gt;&lt;html&gt;\n&lt;body&gt;\n\n&lt;div&gt;\n&lt;code&gt;&lt;?php include 'menu.php'; ?&gt;&lt;/code&gt;\n&lt;/div&gt;\n\n&lt;h1&gt;Welcome to my home page.&lt;/h1&gt;\n&lt;p&gt;Some text.&lt;/p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n[/php]\n\n### 例子 3\n\n假设我们有一个定义变量的包含文件 (\"vars.php\")：\n\n[php]\n&lt;pre&gt;&lt;?php\n$color='red';\n$car='BMW';\n?&gt;\n[/php]\n\n这些变量可用在调用文件中：\n\n[php]\n&lt;pre&gt;&lt;html&gt;\n&lt;body&gt;\n\n&lt;h1&gt;Welcome to my home page.&lt;/h1&gt;\n&lt;?&lt;code&gt;php include 'vars.php';&lt;/code&gt;\necho &quot;I have a $color $car&quot;; // I have a red BMW\n?&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n[/php]","mtime":1386290932000,"source":"_posts/【php中级】php-include-文件（16）.md"},"z3a8h9641bjohvqd":{"_id":"z3a8h9641bjohvqd","content":"title: \"【php中级】PHP Sessions（20）\"\nid: 715\ndate: 2013-06-05 15:22:31\ntags: \n- Session\ncategories: \n- PHP\n- 程序人生\n---\n\n**PHP session 变量用于存储有关用户会话的信息，或更改用户会话的设置。Session 变量保存的信息是单一用户的，并且可供应用程序中的所有页面使用。**\n\n## PHP Session 变量\n\n当您运行一个应用程序时，您会打开它，做些更改，然后关闭它。这很像一次会话。计算机清楚你是谁。它知道你何时启动应用程序，并在何时终止。但是在因特网上，存在一个问题：服务器不知道你是谁以及你做什么，这是由于 HTTP 地址不能维持状态。\n\n通过在服务器上存储用户信息以便随后使用，PHP session 解决了这个问题（比如用户名称、购买商品等）。不过，会话信息是临时的，在用户离开网站后将被删除。如果您需要永久储存信息，可以把数据存储在数据库中。\n\nSession 的工作机制是：为每个访问者创建一个唯一的 id (UID)，并基于这个 UID 来存储变量。UID 存储在 cookie 中，亦或通过 URL 进行传导。\n\n## 开始 PHP Session\n\n在您把用户信息存储到 PHP session 中之前，首先必须启动会话。\n\n注释：session_start() 函数必须位于 &lt;html&gt; 标签之前：\n\n[php]\n&lt;pre&gt;&lt;?php session_start(); ?&gt;&lt;/pre&gt;\n[/php]\n\n上面的代码会向服务器注册用户的会话，以便您可以开始保存用户信息，同时会为用户会话分配一个 UID。\n\n## 存储 Session 变量\n\n存储和取回 session 变量的正确方法是使用 PHP $_SESSION 变量：\n\n[php]\n\n&lt;?php\n session_start();\n $_SESSION['views'] = 1;\n?&gt;\n\n[/php]\n\n## 终结 Session\n\n如果您希望删除某些 session 数据，可以使用 unset() 或 session_destroy() 函数。\n\nunset() 函数用于释放指定的 session 变量：\n\n[php]\n&lt;?php\nunset($_SESSION['views']);\n?&gt;\n[/php]\n\n您也可以通过 session_destroy() 函数彻底终结 session：\n\n[php]\n&lt;?php\nsession_destroy();\n?&gt;[/php]\n\n注释：session_destroy() 将重置 session，您将失去所有已存储的 session 数据。","mtime":1386290932000,"source":"_posts/【php中级】php-sessions（20）.md"},"tfpmmzwea523o9xm":{"_id":"tfpmmzwea523o9xm","content":"title: \"【PHP中级】PHP 文件上传（18）\"\nid: 708\ndate: 2013-06-05 14:52:38\ntags: \n- 文件上传\ncategories: \n- PHP\n- 程序人生\n---\n\n**通过 PHP，可以把文件上传到服务器。**\n\n## 创建一个文件上传表单\n\n允许用户从表单上传文件是非常有用的。\n\n请看下面这个供上传文件的 HTML 表单：\n\n[php]\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;form action=&quot;upload_file.php&quot; method=&quot;post&quot;\nenctype=&quot;multipart/form-data&quot;&gt;\n&lt;label for=&quot;file&quot;&gt;Filename:&lt;/label&gt;\n&lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot; /&gt;\n&lt;br /&gt;\n&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submit&quot; /&gt;\n&lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n[]\n请留意如下有关此表单的信息：\n\n&lt;form&gt; 标签的 enctype 属性规定了在提交表单时要使用哪种内容类型。在表单需要二进制数据时，比如文件内容，请使用 &quot;multipart/form-data&quot;。\n\n&lt;input&gt; 标签的 type=&quot;file&quot; 属性规定了应该把输入作为文件来处理。举例来说，当在浏览器中预览时，会看到输入框旁边有一个浏览按钮。\n\n注释：允许用户上传文件是一个巨大的安全风险。请仅仅允许可信的用户执行文件上传操作。&lt;/pre&gt;\n&lt;h2&gt;创建上传脚本&lt;/h2&gt;\n&lt;pre&gt;\n&quot;upload_file.php&quot; 文件含有供上传文件的代码：\n\n[php]\n&lt;?php\nif ($_FILES[&quot;file&quot;][&quot;error&quot;] &gt; 0)\n  {\n  echo &quot;Error: &quot; . $_FILES[&quot;file&quot;][&quot;error&quot;] . &quot;&lt;br /&gt;&quot;;\n  }\nelse\n  {\n  echo &quot;Upload: &quot; . $_FILES[&quot;file&quot;][&quot;name&quot;] . &quot;&lt;br /&gt;&quot;;\n  echo &quot;Type: &quot; . $_FILES[&quot;file&quot;][&quot;type&quot;] . &quot;&lt;br /&gt;&quot;;\n  echo &quot;Size: &quot; . ($_FILES[&quot;file&quot;][&quot;size&quot;] / 1024) . &quot; Kb&lt;br /&gt;&quot;;\n  echo &quot;Stored in: &quot; . $_FILES[&quot;file&quot;][&quot;tmp_name&quot;];\n  }\n?&gt;\n[/php]\n\n通过使用 PHP 的全局数组 $_FILES，你可以从客户计算机向远程服务器上传文件。\n\n第一个参数是表单的 input name，第二个下标可以是 \"name\", \"type\", \"size\", \"tmp_name\" 或 \"error\"。就像这样：\n\n*   $_FILES[\"file\"][\"name\"] - 被上传文件的名称\n*   $_FILES[\"file\"][\"type\"] - 被上传文件的类型\n*   $_FILES[\"file\"][\"size\"] - 被上传文件的大小，以字节计\n*   $_FILES[\"file\"][\"tmp_name\"] - 存储在服务器的文件的临时副本的名称\n*   $_FILES[\"file\"][\"error\"] - 由文件上传导致的错误代码\n这是一种非常简单文件上传方式。基于安全方面的考虑，您应当增加有关什么用户有权上传文件的限制。\n\n## 上传限制\n\n在这个脚本中，我们增加了对文件上传的限制。用户只能上传 .gif 或 .jpeg 文件，文件大小必须小于 20 kb：\n\n[php]\n\n&lt;?php\n if ((($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/gif&quot;)\n|| ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/jpeg&quot;)\n|| ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/pjpeg&quot;))\n&amp;&amp; ($_FILES[&quot;file&quot;][&quot;size&quot;] &lt; 200000))\n{\n if($_FILES[&quot;file&quot;][&quot;error&quot;]&gt;0)\n {\n echo &quot;ERROR:&quot;.$_FILES[&quot;file&quot;][&quot;error&quot;].&quot;&lt;br/&gt;&quot;;\n }else\n {\n echo &quot;Upload:&quot;.$_FILES[&quot;file&quot;][&quot;name&quot;].&quot;&lt;br/&gt;&quot;;\n echo &quot;Type:&quot;.$_FILES[&quot;file&quot;][&quot;type&quot;].&quot;&lt;br/&gt;&quot;;\n echo &quot;Size:&quot;.($_FILES[&quot;file&quot;][&quot;size&quot;]/1024).&quot;&lt;br/&gt;&quot;;\n echo &quot;Stored in:&quot;.$_FILES[&quot;file&quot;][&quot;tmp_name&quot;];\n }\n}else\n{\n echo &quot;Invalid file&quot;;\n}\n?&gt;\n\n[/php]\n\n## 保存被上传的文件\n\n上面的例子在服务器的 PHP 临时文件夹创建了一个被上传文件的临时副本。\n\n这个临时的复制文件会在脚本结束时消失。要保存被上传的文件，我们需要把它拷贝到另外的位置：\n\n[php]\n\n&lt;?php\n if ((($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/gif&quot;)\n|| ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/jpeg&quot;)\n|| ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/pjpeg&quot;))\n&amp;&amp; ($_FILES[&quot;file&quot;][&quot;size&quot;] &lt; 200000))\n{\n if($_FILES[&quot;file&quot;][&quot;error&quot;]&gt;0)\n {\n echo &quot;ERROR:&quot;.$_FILES[&quot;file&quot;][&quot;error&quot;].&quot;&lt;br/&gt;&quot;;\n }else\n {\n echo &quot;Upload:&quot;.$_FILES[&quot;file&quot;][&quot;name&quot;].&quot;&lt;br/&gt;&quot;;\n echo &quot;Type:&quot;.$_FILES[&quot;file&quot;][&quot;type&quot;].&quot;&lt;br/&gt;&quot;;\n echo &quot;Size:&quot;.($_FILES[&quot;file&quot;][&quot;size&quot;]/1024).&quot;&lt;br/&gt;&quot;;\n echo &quot;Stored in:&quot;.$_FILES[&quot;file&quot;][&quot;tmp_name&quot;];\n\n if (file_exists(&quot;upload/&quot;.$_FILES[&quot;file&quot;][&quot;name&quot;])) {\n # code...\n echo $_FILES[&quot;file&quot;][&quot;name&quot;].&quot;already exists&quot;;\n }else\n {\n move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;], &quot;upload/&quot;.$_FILES[&quot;file&quot;][&quot;name&quot;]);\n echo &quot;Stored in:&quot;.&quot;upload/&quot;.$_FILES[&quot;file&quot;][&quot;name&quot;];\n }\n }\n}else\n{\n echo &quot;Invalid file&quot;;\n}\n?&gt;\n\n[/php]","mtime":1386290932000,"source":"_posts/【php中级】php-文件上传（18）.md"},"hgjj819ujf1df6l1":{"_id":"hgjj819ujf1df6l1","content":"title: \"【php中级】PHP 异常处理（22）\"\nid: 721\ndate: 2013-06-05 16:18:46\ntags: \n- 异常处理\ncategories: \n- PHP\n- 程序人生\n---\n\n**异常（Exception）用于在指定的错误发生时改变脚本的正常流程。**\n\n## 什么是异常？\n\nPHP 5 提供了一种新的面向对象的错误处理方法。\n\n异常处理用于在指定的错误（异常）情况发生时改变脚本的正常流程。这种情况称为异常。\n\n当异常被触发时，通常会发生：\n\n*   当前代码状态被保存\n*   代码执行被切换到预定义的异常处理器函数\n*   根据情况，处理器也许会从保存的代码状态重新开始执行代码，终止脚本执行，或从代码中另外的位置继续执行脚本\n我们将展示不同的错误处理方法：\n\n*   异常的基本使用\n*   创建自定义的异常处理器\n*   多个异常\n*   重新抛出异常\n*   设置顶层异常处理器\n<div>\n\n## 异常的基本使用\n\n当异常被抛出时，其后的代码不会继续执行，PHP 会尝试查找匹配的 \"catch\" 代码块。\n\n如果异常没有被捕获，而且又没用使用 set_exception_handler() 作相应的处理的话，那么将发生一个严重的错误（致命错误），并且输出 \"Uncaught Exception\" （未捕获异常）的错误消息。\n\n让我们尝试抛出一个异常，同时不去捕获它：\n\n[php]\n\n&lt;?php\n function checkNum($num)\n {\n if($num&gt;1)\n {\n throw new Exception(&quot;Value must be 1 or below&quot;);\n }\n return true;\n }\n\ncheckNum(2);\n\n?&gt;\n\n[/php]\n\n上面的代码会获得类似这样的一个错误：\n<table dir=\"ltr\" border=\"1\" cellspacing=\"0\" cellpadding=\"1\">\n<tbody>\n<tr>\n<th colspan=\"5\" align=\"left\" bgcolor=\"#f57900\">( ! ) Fatal error: Uncaught exception 'Exception' with message 'Value must be 1 or below' in D:\\wamp\\www\\php\\catch.php on line _6_</th>\n</tr>\n<tr>\n<th colspan=\"5\" align=\"left\" bgcolor=\"#f57900\">( ! ) Exception: Value must be 1 or below in D:\\wamp\\www\\php\\catch.php on line _6_</th>\n</tr>\n</tbody>\n</table>\n\n### Try, throw 和 catch\n\n要避免上面例子出现的错误，我们需要创建适当的代码来处理异常。\n\n处理处理程序应当包括：\n\n1.  Try - 使用异常的函数应该位于 \"try\" 代码块内。如果没有触发异常，则代码将照常继续执行。但是如果异常被触发，会抛出一个异常。\n2.  Throw - 这里规定如何触发异常。每一个 \"throw\" 必须对应至少一个 \"catch\"\n3.  Catch - \"catch\" 代码块会捕获异常，并创建一个包含异常信息的对象\n让我们触发一个异常：\n\n[php]\n\n&lt;?php\n function checkNum($num)\n {\n if($num&gt;1)\n {\n throw new Exception(&quot;Value must be 1 or below&quot;);\n }\n return true;\n }\n\ntry{\n checkNum(2);\n echo &quot;if you ...&quot;;\n }catch(Exception $e)\n {\n echo 'Message:'.$e-&gt;getMessage();\n }\n?&gt;\n\n[/php]\n\n### 例子解释：\n\n上面的代码抛出了一个异常，并捕获了它：\n\n1.  创建 checkNum() 函数。它检测数字是否大于 1。如果是，则抛出一个异常。\n2.  在 \"try\" 代码块中调用 checkNum() 函数。\n3.  checkNum() 函数中的异常被抛出\n4.  \"catch\" 代码块接收到该异常，并创建一个包含异常信息的对象 ($e)。\n5.  通过从这个 exception 对象调用 $e-&gt;getMessage()，输出来自该异常的错误消息\n不过，为了遵循“每个 throw 必须对应一个 catch”的原则，可以设置一个顶层的异常处理器来处理漏掉的错误。\n\n## 创建一个自定义的 Exception 类\n\n创建自定义的异常处理程序非常简单。我们简单地创建了一个专门的类，当 PHP 中发生异常时，可调用其函数。该类必须是 exception 类的一个扩展。\n\n这个自定义的 exception 类继承了 PHP 的 exception 类的所有属性，您可向其添加自定义的函数。\n\n我们开始创建 exception 类：\n\n[php]\n\n&lt;?php\n class customException extends Exception\n {\n public function errorMessage()\n {\n $errorMsg = 'Error on line '.$this-&gt;getLine().' in '.$this-&gt;getFile().': &lt;b&gt;'.$this-&gt;getMessage().'&lt;/b&gt; is not a valid E-Mail address';\n return $errorMsg;\n }\n }\n $email = &quot;qq@123.com&quot;;\n\ntry\n {\n //check if\n if(filter_var($email, FILTER_VALIDATE_EMAIL) === FALSE)\n {\n //throw exception if email is not valid\n throw new customException($email);\n }\n }\n\ncatch (customException $e)\n {\n //display custom message\n echo $e-&gt;errorMessage();\n }\n?&gt;\n\n[/php]\n\n## 多个异常\n\n可以为一段脚本使用多个异常，来检测多种情况。\n\n可以使用多个 if..else 代码块，或一个 switch 代码块，或者嵌套多个异常。这些异常能够使用不同的 exception 类，并返回不同的错误消息：\n\n[php]&lt;?php\nclass customException extends Exception\n{\npublic function errorMessage()\n{\n//error message\n$errorMsg = 'Error on line '.$this-&gt;getLine().' in '.$this-&gt;getFile()\n.': &lt;b&gt;'.$this-&gt;getMessage().'&lt;/b&gt; is not a valid E-Mail address';\nreturn $errorMsg;\n}\n}\n\n$email = &quot;someone@example.com&quot;;\n\ntry\n {\n //check if \n if(filter_var($email, FILTER_VALIDATE_EMAIL) === FALSE)\n  {\n  //throw exception if email is not valid\n  throw new customException($email);\n  }\n //check for &quot;example&quot; in mail address\n if(strpos($email, &quot;example&quot;) !== FALSE)\n  {\n  throw new Exception(&quot;$email is an example e-mail&quot;);\n  }\n }\n\ncatch (customException $e)\n {\n echo $e-&gt;errorMessage();\n }\n\ncatch(Exception $e)\n {\n echo $e-&gt;getMessage();\n }\n?&gt;[/php]\n\n### 例子解释：\n\n上面的代码测试了两种条件，如何任何条件不成立，则抛出一个异常：\n\n1.  customException() 类是作为旧的 exception 类的一个扩展来创建的。这样它就继承了旧类的所有属性和方法。\n2.  创建 errorMessage() 函数。如果 e-mail 地址不合法，则该函数返回一个错误消息。\n3.  执行 \"try\" 代码块，在第一个条件下，不会抛出异常。\n4.  由于 e-mail 含有字符串 \"example\"，第二个条件会触发异常。\n5.  \"catch\" 代码块会捕获异常，并显示恰当的错误消息\n如果没有捕获 customException，紧紧捕获了 base exception，则在那里处理异常。\n<div>\n\n## 重新抛出异常\n\n有时，当异常被抛出时，您也许希望以不同于标准的方式对它进行处理。可以在一个 \"catch\" 代码块中再次抛出异常。\n\n脚本应该对用户隐藏系统错误。对程序员来说，系统错误也许很重要，但是用户对它们并不感兴趣。为了让用户更容易使用，您可以再次抛出带有对用户比较友好的消息的异常：\n\n[php]&lt;?php\nclass customException extends Exception\n {\n public function errorMessage()\n  {\n  //error message\n  $errorMsg = $this-&gt;getMessage().' is not a valid E-Mail address.';\n  return $errorMsg;\n  }\n }\n\n$email = &quot;someone@example.com&quot;;\n\ntry\n {\n try\n  {\n  //check for &quot;example&quot; in mail address\n  if(strpos($email, &quot;example&quot;) !== FALSE)\n   {\n   //throw exception if email is not valid\n   throw new Exception($email);\n   }\n  }\n catch(Exception $e)\n  {\n  //re-throw exception\n  throw new customException($email);\n  }\n }\n\ncatch (customException $e)\n {\n //display custom message\n echo $e-&gt;errorMessage();\n }\n?&gt;[/php]\n\n### 例子解释：\n\n上面的代码检测在邮件地址中是否含有字符串 \"example\"。如果有，则再次抛出异常：\n\n1.  customException() 类是作为旧的 exception 类的一个扩展来创建的。这样它就继承了旧类的所有属性和方法。\n2.  创建 errorMessage() 函数。如果 e-mail 地址不合法，则该函数返回一个错误消息。\n3.  把 $email 变量设置为一个有效的邮件地址，但含有字符串 \"example\"。\n4.  \"try\" 代码块包含另一个 \"try\" 代码块，这样就可以再次抛出异常。\n5.  由于 e-mail 包含字符串 \"example\"，因此触发异常。\n6.  \"catch\" 捕获到该异常，并重新抛出 \"customException\"。\n7.  捕获到 \"customException\"，并显示一条错误消息。\n如果在其目前的 \"try\" 代码块中异常没有被捕获，则它将在更高层级上查找 catch 代码块。\n\n</div>\n<div>\n\n## 设置顶层异常处理器 （Top Level Exception Handler）\n\nset_exception_handler() 函数可设置处理所有未捕获异常的用户定义函数。\n\n[php]&lt;?php\nfunction myException($exception)\n{\necho &quot;&lt;b&gt;Exception:&lt;/b&gt; &quot; , $exception-&gt;getMessage();\n}\n\nset_exception_handler('myException');\n\nthrow new Exception('Uncaught Exception occurred');\n?&gt;[/php]\n\n以上代码的输出应该类似这样：\n<pre>Exception: Uncaught Exception occurred</pre>\n在上面的代码中，不存在 \"catch\" 代码块，而是触发顶层的异常处理程序。应该使用此函数来捕获所有未被捕获的异常。\n\n</div>\n<div>\n\n## 异常的规则\n\n*   需要进行异常处理的代码应该放入 try 代码块内，以便捕获潜在的异常。\n*   每个 try 或 throw 代码块必须至少拥有一个对应的 catch 代码块。\n*   使用多个 catch 代码块可以捕获不同种类的异常。\n*   可以在 try 代码块内的 catch 代码块中再次抛出（re-thrown）异常。\n**简而言之：如果抛出了异常，就必须捕获它。**\n\n</div>\n</div>","mtime":1386290932000,"source":"_posts/【php中级】php-异常处理（22）.md"},"7g25b29na3bfi5c1":{"_id":"7g25b29na3bfi5c1","content":"title: \"【php中级】PHP 文件处理（17）\"\nid: 701\ndate: 2013-06-05 14:14:22\ntags: \ncategories: \n- PHP\n- 程序人生\n---\n\n**fopen() 函数用于在 PHP 中打开文件。**\n\n## 打开文件\n\nfopen() 函数用于在 PHP 中打开文件。\n\n此函数的第一个参数含有要打开的文件的名称，第二个参数规定了使用哪种模式来打开文件：\n\n[php]\n&lt;pre&gt;&lt;html&gt;\n&lt;body&gt;\n\n&lt;?php\n$file=fopen(&quot;welcome.txt&quot;,&quot;r&quot;);\n?&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n[/php]\n\n文件可能通过下列模式来打开：\n<table>\n<tbody>\n<tr>\n<th>模式</th>\n<th>描述</th>\n</tr>\n<tr>\n<td>r</td>\n<td>只读。在文件的开头开始。</td>\n</tr>\n<tr>\n<td>r+</td>\n<td>读/写。在文件的开头开始。</td>\n</tr>\n<tr>\n<td>w</td>\n<td>只写。打开并清空文件的内容；如果文件不存在，则创建新文件。</td>\n</tr>\n<tr>\n<td>w+</td>\n<td>读/写。打开并清空文件的内容；如果文件不存在，则创建新文件。</td>\n</tr>\n<tr>\n<td>a</td>\n<td>追加。打开并向文件文件的末端进行写操作，如果文件不存在，则创建新文件。</td>\n</tr>\n<tr>\n<td>a+</td>\n<td>读/追加。通过向文件末端写内容，来保持文件内容。</td>\n</tr>\n<tr>\n<td>x</td>\n<td>只写。创建新文件。如果文件已存在，则返回 FALSE。</td>\n</tr>\n<tr>\n<td>x+</td>\n<td>读/写。创建新文件。如果文件已存在，则返回 FALSE 和一个错误。注释：如果 fopen() 无法打开指定文件，则返回 0 (false)。</td>\n</tr>\n</tbody>\n</table>\n\n### 例子\n\n如果 fopen() 不能打开指定的文件，下面的例子会生成一段消息：\n\n[php]\n&lt;pre&gt;&lt;html&gt;\n&lt;body&gt;\n\n&lt;?php\n$file=fopen(&quot;welcome.txt&quot;,&quot;r&quot;) or exit(&quot;Unable to open file!&quot;);\n?&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n[/php]\n<div>\n\n## 关闭文件\n\nfclose() 函数用于关闭打开的文件。\n\n[php]\n&lt;pre&gt;&lt;?php\n$file = fopen(&quot;test.txt&quot;,&quot;r&quot;);\n\n//some code to be executed\n\nfclose($file);\n?&gt;\n[/php]\n\n</div>\n<div>\n\n## 检测 End-of-file\n\nfeof() 函数检测是否已达到文件的末端 (EOF)。\n\n在循环遍历未知长度的数据时，feof() 函数很有用。\n\n注释：在 w 、a 以及 x 模式，您无法读取打开的文件！\n\n[php]if (feof($file)) echo &quot;End of file&quot;;[/php]\n\n</div>\n<div>\n\n## 逐行读取文件\n\nfgets() 函数用于从文件中逐行读取文件。\n\n注释：在调用该函数之后，文件指针会移动到下一行。\n\n### 例子\n\n下面的例子逐行读取文件，直到文件末端为止：\n\n[php]\n&lt;pre&gt;&lt;?php\n$file = fopen(&quot;welcome.txt&quot;, &quot;r&quot;) or exit(&quot;Unable to open file!&quot;);\n//Output a line of the file until the end is reached\nwhile(!feof($file))\n  {\n  echo fgets($file). &quot;&lt;br /&gt;&quot;;\n  }\nfclose($file);\n?&gt;\n[/php]\n\n</div>\n<div>\n\n## 逐字符读取文件\n\nfgetc() 函数用于从文件逐字符地读取文件。\n\n注释：在调用该函数之后，文件指针会移动到下一个字符。\n\n### 例子\n\n下面的例子逐字符地读取文件，直到文件末端为止：\n\n[php]\n&lt;pre&gt;&lt;?php\n$file=fopen(&quot;welcome.txt&quot;,&quot;r&quot;) or exit(&quot;Unable to open file!&quot;);\nwhile (!feof($file))\n  {\n  echo fgetc($file);\n  }\nfclose($file);\n?&gt;\n[/php]\n\n</div>\n<div>\n\n## PHP Filesystem 参考手册\n\n如需完整的 PHP 文件系统参考手册，请访问 W3School 提供的 [PHP Filesystem 参考手册](http://www.w3school.com.cn/php/php_ref_filesystem.asp \"PHP Filesystem 函数\")。\n\n</div>","mtime":1386290932000,"source":"_posts/【php中级】php-文件处理（17）.md"},"thdthaghe14tsca6":{"_id":"thdthaghe14tsca6","content":"title: \"【php中级】PHP过滤器（23）\"\nid: 731\ndate: 2013-06-05 17:10:17\ntags: \n- 过滤器\ncategories: \n- PHP\n- 程序人生\n---\n\n## 什么是 PHP 过滤器？\n\nPHP 过滤器用于验证和过滤来自非安全来源的数据。\n\n验证和过滤用户输入或自定义数据是任何 Web 应用程序的重要组成部分。\n\n设计 PHP 的过滤器扩展的目的是使数据过滤更轻松快捷。\n<div>\n\n## 为什么使用过滤器？\n\n几乎所有 web 应用程序都依赖外部的输入。这些数据通常来自用户或其他应用程序（比如 web 服务）。通过使用过滤器，您能够确保应有程序获得正确的输入类型。\n\n您应该始终对外部数据进行过滤！\n\n输入过滤是最重要的应用程序安全课题之一。\n\n### 什么是外部数据？\n\n*   来自表单的输入数据\n*   Cookies\n*   服务器变量\n*   数据库查询结果\n\n## 函数和过滤器\n\n如需过滤变量，请使用下面的过滤器函数之一：\n\n*   filter_var() - 通过一个指定的过滤器来过滤单一的变量\n*   filter_var_array() - 通过相同的或不同的过滤器来过滤多个变量\n*   filter_input - 获取一个输入变量，并对它进行过滤\n*   filter_input_array - 获取多个输入变量，并通过相同的或不同的过滤器对它们进行过滤\n在下面的例子中，我们用 filter_var() 函数验证了一个整数：\n\n[php]\n&lt;pre&gt;&lt;?php\n$int = 123;\n\nif(!&lt;code&gt;filter_var($int, FILTER_VALIDATE_INT)&lt;/code&gt;)\n {\n echo(&quot;Integer is not valid&quot;);\n }\nelse\n {\n echo(&quot;Integer is valid&quot;);\n }\n?&gt;[/php]\n\n上面的代码使用了 \"FILTER_VALIDATE_INT\" 过滤器来过滤变量。由于这个整数是合法的，因此代码的输出是：\"Integer is valid\"。\n\n假如我们尝试使用一个非整数的变量，则输出是：\"Integer is not valid\"。\n\n如需完整的函数和过滤器列表，请访问我们的 [PHP Filter 参考手册](http://www.w3school.com.cn/php/php_ref_filter.asp \"PHP Filter 函数\")。\n\n## Validating 和 Sanitizing\n\n有两种过滤器：\n\n### Validating 过滤器：\n\n*   用于验证用户输入\n*   严格的格式规则（比如 URL 或 E-Mail 验证）\n*   如果成功则返回预期的类型，如果失败则返回 FALSE\n\n### Sanitizing 过滤器：\n\n*   用于允许或禁止字符串中指定的字符\n*   无数据格式规则\n*   始终返回字符串\n\n## 选项和标志\n\n选项和标志用于向指定的过滤器添加额外的过滤选项。\n\n不同的过滤器有不同的选项和标志。\n\n在下面的例子中，我们用 filter_var() 和 \"min_range\" 以及 \"max_range\" 选项验证了一个整数：\n\n[php]\n&lt;?php\n$var=300;\n\n$int_options = array(\n&quot;options&quot;=&gt;array\n (\n &quot;min_range&quot;=&gt;0,\n &quot;max_range&quot;=&gt;256\n )\n);\n\nif(!&lt;code&gt;filter_var($var, FILTER_VALIDATE_INT, $int_options)&lt;/code&gt;)\n {\n echo(&quot;Integer is not valid&quot;);\n }\nelse\n {\n echo(&quot;Integer is valid&quot;);\n }\n?&gt;\n[/php]\n\n就像上面的代码一样，选项必须放入一个名为 \"options\" 的相关数组中。如果使用标志，则不需在数组内。\n\n由于整数是 \"300\"，它不在指定的范围内，以上代码的输出将是 \"Integer is not valid\"。\n\n如需完整的函数及过滤器列表，请访问 W3School 提供的 [PHP Filter 参考手册](http://www.w3school.com.cn/php/php_ref_filter.asp \"PHP Filter 函数\")。您可以看到每个过滤器的可用选项和标志。\n\n## 验证输入\n\n让我们试着验证来自表单的输入。\n\n我们需要作的第一件事情是确认是否存在我们正在查找的输入数据。\n\n然后我们用 filter_input() 函数过滤输入的数据。\n\n在下面的例子中，输入变量 \"email\" 被传到 PHP 页面：\n\n[php]\n&lt;?php\nif(!filter_has_var(INPUT_GET, &quot;email&quot;))\n {\n echo(&quot;Input type does not exist&quot;);\n }\nelse\n {\n if (!&lt;code&gt;filter_input(INPUT_GET, &quot;email&quot;, FILTER_VALIDATE_EMAIL)&lt;/code&gt;)\n  {\n  echo &quot;E-Mail is not valid&quot;;\n  }\n else\n  {\n  echo &quot;E-Mail is valid&quot;;\n  }\n }\n?&gt;\n[/php]\n\n### 例子解释：\n\n上面的例子有一个通过 \"GET\" 方法传送的输入变量 (email)：\n\n1.  检测是否存在 \"GET\" 类型的 \"email\" 输入变量\n2.  如果存在输入变量，检测它是否是有效的邮件地址\n\n## 净化输入\n\n让我们试着清理一下从表单传来的 URL。\n\n首先，我们要确认是否存在我们正在查找的输入数据。\n\n然后，我们用 filter_input() 函数来净化输入数据。\n\n在下面的例子中，输入变量 \"url\" 被传到 PHP 页面：\n\n[php]\n&lt;pre&gt;&lt;?php\nif(!filter_has_var(INPUT_POST, &quot;url&quot;))\n {\n echo(&quot;Input type does not exist&quot;);\n }\nelse\n {\n $url = &lt;code&gt;filter_input(INPUT_POST, &quot;url&quot;, FILTER_SANITIZE_URL)&lt;/code&gt;;\n }\n?&gt;\n[/php]\n\n### 例子解释：\n\n上面的例子有一个通过 \"POST\" 方法传送的输入变量 (url)：\n\n1.  检测是否存在 \"POST\" 类型的 \"url\" 输入变量\n2.  如果存在此输入变量，对其进行净化（删除非法字符），并将其存储在 $url 变量中\n\n假如输入变量类似这样：\"http://www.W3非o法ol.com.c字符n/\"，则净化后的 $url 变量应该是这样的：\n\n<pre>http://www.W3School.com.cn/</pre>\n\n## 过滤多个输入\n\n表单通常由多个输入字段组成。为了避免对 filter_var 或 filter_input 重复调用，我们可以使用 filter_var_array 或 the filter_input_array 函数。\n\n在本例中，我们使用 filter_input_array() 函数来过滤三个 GET 变量。接收到的 GET 变量是一个名字、一个年龄以及一个邮件地址：\n\n[php]\n&lt;?php\n$filters = array\n (\n &quot;name&quot; =&gt; array\n  (\n  &quot;filter&quot;=&gt;FILTER_SANITIZE_STRING\n  ),\n &quot;age&quot; =&gt; array\n  (\n  &quot;filter&quot;=&gt;FILTER_VALIDATE_INT,\n  &quot;options&quot;=&gt;array\n   (\n   &quot;min_range&quot;=&gt;1,\n   &quot;max_range&quot;=&gt;120\n   )\n  ),\n &quot;email&quot;=&gt; FILTER_VALIDATE_EMAIL,\n );\n\n$result = &lt;code&gt;filter_input_array(INPUT_GET, $filters)&lt;/code&gt;;\n\nif (!$result[&quot;age&quot;])\n {\n echo(&quot;Age must be a number between 1 and 120.&lt;br /&gt;&quot;);\n }\nelseif(!$result[&quot;email&quot;])\n {\n echo(&quot;E-Mail is not valid.&lt;br /&gt;&quot;);\n }\nelse\n {\n echo(&quot;User input is valid&quot;);\n }\n?&gt;[/php]\n\n### 例子解释：\n\n上面的例子有三个通过 \"GET\" 方法传送的输入变量 (name, age and email)\n\n1.  设置一个数组，其中包含了输入变量的名称，以及用于指定的输入变量的过滤器\n2.  调用 filter_input_array 函数，参数包括 GET 输入变量及刚才设置的数组\n3.  检测 $result 变量中的 \"age\" 和 \"email\" 变量是否有非法的输入。（如果存在非法输入，）\nfilter_input_array() 函数的第二个参数可以是数组或单一过滤器的 ID。\n\n如果该参数是单一过滤器的 ID，那么这个指定的过滤器会过滤输入数组中所有的值。\n\n如果该参数是一个数组，那么此数组必须遵循下面的规则：\n\n*   必须是一个关联数组，其中包含的输入变量是数组的键（比如 \"age\" 输入变量）\n*   此数组的值必须是过滤器的 ID ，或者是规定了过滤器、标志以及选项的数组\n<div>\n\n## 使用 Filter Callback\n\n通过使用 FILTER_CALLBACK 过滤器，可以调用自定义的函数，把它作为一个过滤器来使用。这样，我们就拥有了数据过滤的完全控制权。\n\n您可以创建自己的自定义函数，也可以使用已有的 PHP 函数。\n\n规定您准备用到过滤器函数的方法，与规定选项的方法相同。\n\n在下面的例子中，我们使用了一个自定义的函数把所有 \"_\" 转换为空格：\n\n[php]&lt;?php\nfunction convertSpace($string)\n{\nreturn str_replace(&quot;_&quot;, &quot; &quot;, $string);\n}\n\n$string = &quot;Peter_is_a_great_guy!&quot;;\n\necho &lt;code&gt;filter_var($string, FILTER_CALLBACK, array(&quot;options&quot;=&gt;&quot;convertSpace&quot;))&lt;/code&gt;;\n?&gt;[/php]\n\n以上代码的结果是这样的：\n<pre>Peter is a great guy!</pre>\n\n### 例子解释：\n\n上面的例子把所有 \"_\" 转换成空格：\n\n1.  创建一个把 \"_\" 替换为空格的函数\n2.  调用 filter_var() 函数，它的参数是 FILTER_CALLBACK 过滤器以及包含我们的函数的数组\n</div>\n</div>","mtime":1386290932000,"source":"_posts/【php中级】php过滤器（23）.md"},"9ilr8tcoe43vr807":{"_id":"9ilr8tcoe43vr807","content":"title: \"【php中级】PHP 错误处理（21）\"\nid: 718\ndate: 2013-06-05 15:41:22\ntags: \n- 错误处理\ncategories: \n- PHP\n- 程序人生\n---\n\n**在 PHP 中，默认的错误处理很简单。一条消息会被发送到浏览器，这条消息带有文件名、行号以及一条描述错误的消息。**\n\n## PHP 错误处理\n\n在创建脚本和 web 应用程序时，错误处理是一个重要的部分。如果您的代码缺少错误检测编码，那么程序看上去很不专业，也为安全风险敞开了大门。\n\n本教程介绍了 PHP 中一些最为重要的错误检测方法。\n\n我们将为您讲解不同的错误处理方法：\n\n*   简单的 \"die()\" 语句\n*   自定义错误和错误触发器\n*   错误报告\n\n## 基本的错误处理：使用 die() 函数\n\n第一个例子展示了一个打开文本文件的简单脚本：\n\n[php]\n&lt;pre&gt;&lt;?php\n$file=fopen(&quot;welcome.txt&quot;,&quot;r&quot;);\n?&gt;\n[/php]\n\n如果文件不存在，您会获得类似这样的错误：\n\n<pre>**&lt;pre&gt;\nWarning**: fopen(welcome.txt) [function.fopen]: failed to open stream: \nNo such file or directory in **C:\\webfolder\\test.php** on line **2\n&lt;/pre&gt;**</pre>\n为了避免用户获得类似上面的错误消息，我们在访问文件之前检测该文件是否存在：\n\n[php]\n&lt;pre&gt;&lt;?php\nif(!file_exists(&quot;welcome.txt&quot;))\n {\n die(&quot;File not found&quot;);\n }\nelse\n {\n $file=fopen(&quot;welcome.txt&quot;,&quot;r&quot;);\n }\n?&gt;\n[/php]\n\n现在，假如文件不存在，您会得到类似这样的错误消息：\n\n<pre>&lt;pre&gt;File not found&lt;/pre&gt;</pre>\n比起之前的代码，上面的代码更有效，这是由于它采用了一个简单的错误处理机制在错误之后终止了脚本。\n\n不过，简单地终止脚本并不总是恰当的方式。让我们研究一下用于处理错误的备选的 PHP 函数。\n\n## 创建自定义错误处理器\n\n创建一个自定义的错误处理器非常简单。我们很简单地创建了一个专用函数，可以在 PHP 中发生错误时调用该函数。\n\n该函数必须有能力处理至少两个参数 (error level 和 error message)，但是可以接受最多五个参数（可选的：file, line-number 以及 error context）：\n\n### 语法\n\n[php]error_function(error_level,error_message,\nerror_file,error_line,error_context)[/php]\n<table>\n<tbody>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n<tr>\n<td>error_level</td>\n<td>必需。为用户定义的错误规定错误报告级别。必须是一个值数。\n\n参见下面的表格：错误报告级别。</td>\n</tr>\n<tr>\n<td>error_message</td>\n<td>必需。为用户定义的错误规定错误消息。</td>\n</tr>\n<tr>\n<td>error_file</td>\n<td>可选。规定错误在其中发生的文件名。</td>\n</tr>\n<tr>\n<td>error_line</td>\n<td>可选。规定错误发生的行号。</td>\n</tr>\n<tr>\n<td>error_context</td>\n<td>可选。规定一个数组，包含了当错误发生时在用的每个变量以及它们的值。</td>\n</tr>\n</tbody>\n</table>\n\n### 错误报告级别\n\n这些错误报告级别是错误处理程序旨在处理的错误的不同的类型：\n<table>\n<tbody>\n<tr>\n<th>值</th>\n<th>常量</th>\n<th>描述</th>\n</tr>\n<tr>\n<td>2</td>\n<td>E_WARNING</td>\n<td>非致命的 run-time 错误。不暂停脚本执行。</td>\n</tr>\n<tr>\n<td>8</td>\n<td>E_NOTICE</td>\n<td>Run-time 通知。\n\n脚本发现可能有错误发生，但也可能在脚本正常运行时发生。</td>\n</tr>\n<tr>\n<td>256</td>\n<td>E_USER_ERROR</td>\n<td>致命的用户生成的错误。这类似于程序员使用 PHP 函数 trigger_error() 设置的 E_ERROR。</td>\n</tr>\n<tr>\n<td>512</td>\n<td>E_USER_WARNING</td>\n<td>非致命的用户生成的警告。这类似于程序员使用 PHP 函数 trigger_error() 设置的 E_WARNING。</td>\n</tr>\n<tr>\n<td>1024</td>\n<td>E_USER_NOTICE</td>\n<td>用户生成的通知。这类似于程序员使用 PHP 函数 trigger_error() 设置的 E_NOTICE。</td>\n</tr>\n<tr>\n<td>4096</td>\n<td>E_RECOVERABLE_ERROR</td>\n<td>可捕获的致命错误。类似 E_ERROR，但可被用户定义的处理程序捕获。(参见 set_error_handler())</td>\n</tr>\n<tr>\n<td>8191</td>\n<td>E_ALL</td>\n<td>所有错误和警告，除级别 E_STRICT 以外。\n\n（在 PHP 6.0，E_STRICT 是 E_ALL 的一部分）</td>\n</tr>\n</tbody>\n</table>\n现在，让我们创建一个处理错误的函数：\n\n[php]\n&lt;pre&gt;function customError($errno, $errstr)\n { \n echo &quot;&lt;b&gt;Error:&lt;/b&gt; [$errno] $errstr&lt;br /&gt;&quot;;\n echo &quot;Ending Script&quot;;\n die();\n }[/php]\n\n上面的代码是一个简单的错误处理函数。当它被触发时，它会取得错误级别和错误消息。然后它会输出错误级别和消息，并终止脚本。\n\n现在，我们已经创建了一个错误处理函数，我们需要确定在何时触发该函数。\n\n## Set Error Handler\n\nPHP 的默认错误处理程序是内建的错误处理程序。我们打算把上面的函数改造为脚本运行期间的默认错误处理程序。\n\n可以修改错误处理程序，使其仅应用到某些错误，这样脚本就可以不同的方式来处理不同的错误。不过，在本例中，我们打算针对所有错误来使用我们的自定义错误处理程序：\n[php]set_error_handler(&quot;customError&quot;);[/php]\n\n由于我们希望我们的自定义函数来处理所有错误，set_error_handler() 仅需要一个参数，可以添加第二个参数来规定错误级别。\n\n### 实例\n\n通过尝试输出不存在的变量，来测试这个错误处理程序：\n\n[php]\n\n&lt;pre&gt;&lt;?php\n//error handler function\nfunction customError($errno, $errstr)\n { \n echo &quot;&lt;b&gt;Error:&lt;/b&gt; [$errno] $errstr&quot;;\n }\n\n//set error handler\nset_error_handler(&quot;customError&quot;);\n\n//trigger error\necho($test);\n?&gt;\n[/php]\n\n以上代码的输出应该类似这样：\n[php]Error: [8] Undefined variable: test[/php]\n\n<div>\n\n## 触发错误\n\n在脚本中用户输入数据的位置，当用户的输入无效时触发错误的很有用的。在 PHP 中，这个任务由 trigger_error() 完成。\n\n### 例子\n\n在本例中，如果 \"test\" 变量大于 \"1\"，就会发生错误：\n\n[php]\n\n&lt;pre&gt;&lt;?php\n$test=2;\nif ($test&gt;1)\n{\ntrigger_error(&quot;Value must be 1 or below&quot;);\n}\n?&gt;[/php]\n\n以上代码的输出应该类似这样：\n[php]Notice: Value must be 1 or below\nin C:\\webfolder\\test.php on line 6[/php]\n\n您可以在脚本中任何位置触发错误，通过添加的第二个参数，您能够规定所触发的错误级别。\n\n### 可能的错误类型：\n\n*   E_USER_ERROR - 致命的用户生成的 run-time 错误。错误无法恢复。脚本执行被中断。\n*   E_USER_WARNING - 非致命的用户生成的 run-time 警告。脚本执行不被中断。\n*   E_USER_NOTICE - 默认。用户生成的 run-time 通知。脚本发现了可能的错误，也有可能在脚本运行正常时发生。\n\n### 例子\n\n在本例中，如果 \"test\" 变量大于 \"1\"，则发生 E_USER_WARNING 错误。如果发生了 E_USER_WARNING，我们将使用我们的自定义错误处理程序并结束脚本：\n\n[php]\n\n&lt;pre&gt;&lt;?php\n//error handler function\nfunction customError($errno, $errstr)\n { \n echo &quot;&lt;b&gt;Error:&lt;/b&gt; [$errno] $errstr&lt;br /&gt;&quot;;\n echo &quot;Ending Script&quot;;\n die();\n }\n\n//set error handler\nset_error_handler(&quot;customError&quot;,E_USER_WARNING);\n\n//trigger error\n$test=2;\nif ($test&gt;1)\n {\n trigger_error(&quot;Value must be 1 or below&quot;,E_USER_WARNING);\n }\n?&gt;\n[/php]\n\n以上代码的输出应该类似这样：\n\n<pre>Error: [512] Value must be 1 or below\nEnding Script</pre>\n现在，我们已经学习了如何创建自己的 error，以及如何触发它们，现在我们研究一下错误记录。\n\n</div>\n<div>\n\n## 错误记录\n\n默认地，根据在 php.ini 中的 error_log 配置，PHP 向服务器的错误记录系统或文件发送错误记录。通过使用 error_log() 函数，您可以向指定的文件或远程目的地发送错误记录。\n\n通过电子邮件向您自己发送错误消息，是一种获得指定错误的通知的好办法。\n\n### 通过 E-Mail 发送错误消息\n\n在下面的例子中，如果特定的错误发生，我们将发送带有错误消息的电子邮件，并结束脚本：\n\n[php]\n&lt;pre&gt;&lt;?php\n//error handler function\nfunction customError($errno, $errstr)\n { \n echo &quot;&lt;b&gt;Error:&lt;/b&gt; [$errno] $errstr&lt;br /&gt;&quot;;\n echo &quot;Webmaster has been notified&quot;;\n error_log(&quot;Error: [$errno] $errstr&quot;,1,\n &quot;someone@example.com&quot;,&quot;From: webmaster@example.com&quot;);\n}\n\n//set error handler\nset_error_handler(&quot;customError&quot;,E_USER_WARNING);\n\n//trigger error\n$test=2;\nif ($test&gt;1)\n {\n trigger_error(&quot;Value must be 1 or below&quot;,E_USER_WARNING);\n }\n?&gt;[/php]\n\n以上代码的输出应该类似这样：\n\n<pre>Error: [512] Value must be 1 or below\nWebmaster has been notified</pre>\n接收自以上代码的邮件类似这样：\n<pre>Error: [512] Value must be 1 or below</pre>\n这个方法不适合所有的错误。常规错误应当通过使用默认的 PHP 记录系统在服务器上进行记录。\n\n</div>","mtime":1386290932000,"source":"_posts/【php中级】php-错误处理（21）.md"},"oadfurtlatlqs7ek":{"_id":"oadfurtlatlqs7ek","content":"title: \"【PHP基础】PHP函数(十一)\"\nid: 679\ndate: 2013-06-05 11:59:39\ntags: \n- php函数\ncategories: \n- PHP\n- 程序人生\n---\n\n**PHP 的真正威力源自于它的函数。**\n\n**在 PHP 中，提供了超过 700 个内建的函数。**\n\n本内容讲解如何创建自己的函数，如果需要了解内建函数，请参考PHP手册哈。\n\n## 创建 PHP 函数\n\n函数是一种可以在任何被需要的时候执行的代码块。\n\n### 创建 PHP 函数：\n\n1.  所有的函数都使用关键词 \"function()\" 来开始\n2.  命名函数 - 函数的名称应该提示出它的功能。函数名称以字母或下划线开头。\n3.  添加 \"{\" - 开口的花括号之后的部分是函数的代码。\n4.  插入函数代码\n5.  添加一个 \"}\" - 函数通过关闭花括号来结束。\n\n### 例子\n\n一个简单的函数，在其被调用时能输出我的名称的：\n\n[php]\n\n&lt;?php\n function outputName()\n {\n echo &quot;Hello World &quot;;\n }\n\noutputName();\n?&gt;\n\n[/php]\n\n## 使用 PHP 函数\n\n现在，我们要在 PHP 脚本中使用这个函数了：\n\n[php]\n\n&lt;?php\n function outputName()\n {\n echo &quot;Hello World &quot;;\n }\n\necho &quot;test&lt;br/&gt;&quot;;\n echo &quot;my name is:&quot;;\n outputName();\n echo &quot;.&lt;br/&gt; That is right,&quot;;\n outputName();\n echo &quot;is my name.&quot;;\n\n?&gt;\n\n[/php]\n\n## PHP 函数 - 添加参数\n\n我们的第一个函数是一个非常简单的函数。它只能输出一个静态的字符串。\n\n通过可以添加参数，我们向函数添加更多的功能。参数类似一个变量。\n\n您可能注意到了，函数名称后面有一个括号，比如 writeMyName()。参数就是在括号中规定的。\n\n### 例子 1\n\n[php]\n\n&lt;?php\n function outputName($pName)\n {\n echo $pName.&quot; Hello World &quot;;\n }\n\necho &quot;test&lt;br/&gt;&quot;;\n echo &quot;my name is:&quot;;\n outputName(&quot;han&quot;);\n echo &quot;.&lt;br/&gt; That is right,&quot;;\n outputName(&quot;han&quot;);\n echo &quot;is my name.&quot;;\n?&gt;\n\n[/php]\n\n### 例子2\n\n函数多个参数\n\n[php]\n\n&lt;?php\n function outputName($pName,$pAge)\n {\n echo $pName.&quot; Hello World &quot;.$pAge;\n }\n\necho &quot;test&lt;br/&gt;&quot;;\n echo &quot;my name is:&quot;;\n outputName(&quot;han&quot;,&quot;20&quot;);\n echo &quot;.&lt;br/&gt; That is right,&quot;;\n outputName(&quot;han&quot;,&quot;10&quot;);\n echo &quot;is my name.&quot;;\n?&gt;\n\n[/php]\n\n## PHP 函数 - 返回值\n\n函数也能用于返回值。\n\n[php]\n\n&lt;?php\n function add($a,$b)\n {\n $total = $a +$b;\n return $total;\n }\n\necho add(10,20);\n?&gt;\n\n[/php]","mtime":1386290932000,"source":"_posts/【php基础】php函数十一.md"},"mqsntorlbrkyckqn":{"_id":"mqsntorlbrkyckqn","content":"title: \"【PHP基础】关于$_GET(13)\"\nid: 688\ndate: 2013-06-05 13:49:25\ntags: \n- $_GET\ncategories: \n- PHP\n- 程序人生\n---\n\n**$_GET 变量用于收集来自 method=\"get\" 的表单中的值。**\n\n## $_GET 变量\n\n$_GET 变量是一个数组，内容是由 HTTP GET 方法发送的变量名称和值。\n\n$_GET 变量用于收集来自 method=\"get\" 的表单中的值。从带有 GET 方法的表单发送的信息，对任何人都是可见的（会显示在浏览器的地址栏），并且对发送的信息量也有限制（最多 100 个字符）。\n\n[php]\n\n&lt;form action=&quot;welcome.php&quot; method=&quot;get&quot;&gt;\n Name:&lt;input type=&quot;text&quot; name=&quot;name&quot;/&gt;\n Pwd:&lt;input type=&quot;password&quot; name=&quot;pwd&quot;/&gt;\n &lt;input type=&quot;submit&quot;/&gt;\n &lt;/form&gt;\n\n[/php]\n\nmethod=\"get\",浏览器的地址栏会出现如下信息：\n\n[php]http://localhost/php/welcome.php?name=admin&amp;pwd=123[/php]\n\n\"welcome.php\" 文件现在可以通过 $_GET 变量来获取表单数据了（请注意，表单域的名称会自动成为 $_GET 数组中的 ID 键）\n\n[php]\n\nWelcome &lt;?php echo $_GET[&quot;name&quot;]?&gt; &lt;br/&gt;\nyour password is &lt;?php echo $_GET[&quot;pwd&quot;]?&gt;\n\n[/php]\n\n## 为什么使用 $_GET？\n\n注释：在使用 $_GET 变量时，所有的变量名和值都会显示在 URL 中。所以在发送密码或其他敏感信息时，不应该使用这个方法。不过，正因为变量显示在 URL 中，因此可以在收藏夹中收藏该页面。在某些情况下，这是很有用的。\n\n注释：HTTP GET 方法不适合大型的变量值；值是不能超过 100 个字符的。\n\n## $_REQUEST 变量\n\nPHP 的 $_REQUEST 变量包含了 $_GET, $_POST 以及 $_COOKIE 的内容。\n\nPHP 的 $_REQUEST 变量可用来取得通过 GET 和 POST 方法发送的表单数据的结果。\n\n[php]\n\nWelcome &lt;?php echo $_REQUEST[&quot;name&quot;]?&gt; &lt;br/&gt;\nyour password is &lt;?php echo $_REQUEST[&quot;pwd&quot;]?&gt;\n\n[/php]","mtime":1386290932000,"source":"_posts/【php基础】关于_get13.md"},"cnvtckf720816juf":{"_id":"cnvtckf720816juf","content":"title: \"【PHP基础】PHP循环（十）\"\nid: 676\ndate: 2013-06-05 11:50:01\ntags: \n- PHP循环\ncategories: \n- PHP\n- 程序人生\n---\n\n**PHP 中的循环语句用于执行相同的代码块指定的次数。**\n<div>\n\n## 循环\n\n在您编写代码时，您经常需要让相同的代码块运行很多次。您可以在代码中使用循环语句来完成这个任务。\n\n在 PHP 中，我们可以使用下列循环语句：\n\n<dl><dt>while</dt><dd>只要指定的条件成立，则循环执行代码块</dd><dt>do...while</dt><dd>首先执行一次代码块，然后在指定的条件成立时重复这个循环</dd><dt>for</dt><dd>循环执行代码块指定的次数</dd><dt>foreach</dt><dd>根据数组中每个元素来循环代码块</dd></dl></div>\n<div>\n\n## while 语句\n\n_只要指定的条件成立_，while 语句将重复执行代码块。\n\n### 语法\n\n[php]\n&lt;pre&gt;while (condition)\ncode to be executed;\n[/php]\n\n### 例子\n\n下面的例子示范了一个循环，只要变量 i 小于或等于 5，代码就会一直循环执行下去。循环每循环一次，变量就会递增 1：\n\n[php]\n&lt;pre&gt;&lt;html&gt;\n&lt;body&gt;\n\n&lt;?php \n$i=1;\nwhile($i&lt;=5)\n  {\n  echo &quot;The number is &quot; . $i . &quot;&lt;br /&gt;&quot;;\n  $i++;\n  }\n?&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n[/php]\n<div>\n\n## do...while 语句\n\ndo...while 语句会_至少执行一次代码_ - 然后，_只要条件成立_，就会重复进行循环。\n\n### 语法\n\n[php]\n&lt;pre&gt;do\n{\ncode to be executed;\n}\nwhile (condition);\n[/php]\n\n### 例子\n\n下面的例子将对 i 的值进行一次累加，然后，只要 i 小于 5 的条件成立，就会继续累加下去：\n\n[php]\n&lt;pre&gt;&lt;html&gt;\n&lt;body&gt;\n\n&lt;?php \n$i=0;\ndo\n  {\n  $i++;\n  echo &quot;The number is &quot; . $i . &quot;&lt;br /&gt;&quot;;\n  }\nwhile ($i&lt;5);\n?&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n[/php]\n\n</div>\n<div>\n\n## for 语句\n\n如果您已经确定了代码块的重复执行次数，则可以使用 for 语句。\n\n### 语法\n\n[php]\n&lt;pre&gt;for (initialization; condition; increment)\n{\n  code to be executed;\n}\n[/php]\n\n注释：for 语句有三个参数。第一个参数初始化变量，第二个参数保存条件，第三个参数包含执行循环所需的增量。如果 initialization 或 increment 参数中包括了多个变量，需要用逗号进行分隔。而条件必须计算为 true 或者 false。\n\n### 例子\n\n下面的例子会把文本 \"Hello World!\" 显示 5 次：\n\n[php]\n&lt;pre&gt;&lt;html&gt;\n&lt;body&gt;\n\n&lt;?php\nfor ($i=1; $i&lt;=5; $i++)\n{\n  echo &quot;Hello World!&lt;br /&gt;&quot;;\n}\n?&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n[/php]\n\n</div>\n<div>\n\n## foreach 语句\n\nforeach 语句用于循环遍历数组。\n\n每进行一次循环，当前数组元素的值就会被赋值给 value 变量（数组指针会逐一地移动） - 以此类推。\n\n### 语法\n\n[php]\n&lt;pre&gt;foreach (array as value)\n{\n    code to be executed;\n}\n[/php]\n\n### 例子\n\n下面的例子示范了一个循环，这个循环可以输出给定数组的值：\n\n[php]\n&lt;pre&gt;&lt;html&gt;\n&lt;body&gt;\n\n&lt;?php\n$arr=array(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;);\n\nforeach ($arr as $value)\n{\n  echo &quot;Value: &quot; . $value . &quot;&lt;br /&gt;&quot;;\n}\n?&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n[/php]\n\n</div>\n</div>","mtime":1386290932000,"source":"_posts/【php基础】php循环（十）.md"},"axl9la4hxbz17gvt":{"_id":"axl9la4hxbz17gvt","content":"title: \"【PHP基础】关于$_POST（14）\"\nid: 693\ndate: 2013-06-05 13:56:54\ntags: \ncategories: \n- PHP\n- 程序人生\n---\n\n**$_POST 变量用于收集来自 method=\"post\" 的表单中的值。**\n\n&nbsp;\n\n## $_POST 变量\n\n$_POST 变量是一个数组，内容是由 HTTP POST 方法发送的变量名称和值。\n\n$_POST 变量用于收集来自 method=\"post\" 的表单中的值。从带有 POST 方法的表单发送的信息，对任何人都是不可见的（不会显示在浏览器的地址栏），并且对发送信息的量也没有限制。\n\n### \n\n## 为什么使用 $_POST？\n\n*   通过 HTTP POST 发送的变量不会显示在 URL 中。\n*   变量没有长度限制。\n不过，由于变量不显示在 URL 中，所以无法把页面加入书签。\n\n## $_REQUEST 变量\n\nPHP 的 $_REQUEST 变量包含了 $_GET, $_POST 以及 $_COOKIE 的内容。\n\nPHP 的 $_REQUEST 变量可用来取得通过 GET 和 POST 方法发送的表单数据的结果。","mtime":1386290932000,"source":"_posts/【php基础】关于_post（14）.md"},"kg5zc8bppzjz5smo":{"_id":"kg5zc8bppzjz5smo","content":"title: \"【PHP基础篇】PHP If...Else 语句（七）\"\nid: 662\ndate: 2013-06-05 11:28:43\ntags: \n- 流程控制\ncategories: \n- PHP\n- 程序人生\n---\n\n**if、elseif 以及 else 语句用于执行基于不同条件的不同动作。**\n\n### 条件语句\n\n当您编写代码时，您常常需要为不同的判断执行不同的动作。\n\n您可以在代码中使用条件语句来完成此任务。\n\n<dl><dt>if...else 语句</dt><dd>在条件成立时执行一块代码，条件不成立时执行另一块代码</dd><dt>elseif 语句</dt><dd>与 if...else 配合使用，在若干条件之一成立时执行一个代码块</dd></dl>\n<div>\n\n### If...Else 语句\n\n如果您希望在某个条件成立时执行一些代码，在条件不成立时执行另一些代码，请使用 if....else 语句。\n\n#### 语法\n\n[php]\nif (condition)\n  code to be executed if condition is true;\nelse\n  code to be executed if condition is false;\n[/php]\n\n#### 实例\n\n如果当前日期是周五，下面的代码将输出 \"Have a nice weekend!\"，否则会输出 \"Have a nice day!\"：\n\n[php]\n&lt;pre&gt;&lt;html&gt;\n&lt;body&gt;\n\n&lt;?php\n$d=date(&quot;D&quot;);\nif ($d==&quot;Fri&quot;)\n  echo &quot;Have a nice weekend!&quot;;\nelse\n  echo &quot;Have a nice day!&quot;;\n?&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;&lt;/pre&gt;\n[/php]\n\n### ElseIf 语句\n\n如果希望在多个条件之一成立时执行代码，请使用 elseif 语句：\n\n#### 语法\n\n[php]\n&lt;pre&gt;if (condition)\n  code to be executed if condition is true;\nelseif (condition)\n  code to be executed if condition is true;\nelse\n  code to be executed if condition is false;\n[/php]\n\n#### 实例\n\n如果当前日期是周五，下面的例子会输出 \"Have a nice weekend!\"，如果是周日，则输出 \"Have a nice Sunday!\"，否则输出 \"Have a nice day!\"：\n\n[php]\n&lt;pre&gt;&lt;html&gt;\n&lt;body&gt;\n\n&lt;?php\n$d=date(&quot;D&quot;);\nif ($d==&quot;Fri&quot;)\n  echo &quot;Have a nice weekend!&quot;;\nelseif ($d==&quot;Sun&quot;)\n  echo &quot;Have a nice Sunday!&quot;;\nelse\n  echo &quot;Have a nice day!&quot;;\n?&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n[/php]\n\n</div>\n<dl><dd></dd><dd></dd></dl>","mtime":1386290932000,"source":"_posts/【php基础篇】php-if-else-语句（七）.md"},"oozvpr71ddhkus1f":{"_id":"oozvpr71ddhkus1f","content":"title: \"【PHP基础】表单输入（十二）\"\nid: 683\ndate: 2013-06-05 13:41:31\ntags: \n- $_GET\n- $_POST\n- 表单输入\ncategories: \n- PHP\n- 程序人生\n---\n\n**PHP 的 $_GET 和 $_POST 用于检索表单中的值，比如用户输入。**\n\n## PHP 表单处理\n\n### 表单实例：\n\n[php]\n\n&lt;form action=&quot;welcome.php&quot; method=&quot;post&quot;&gt;\n Name:&lt;input type=&quot;text&quot; name=&quot;name&quot;/&gt;\n Pwd:&lt;input type=&quot;password&quot; name=&quot;pwd&quot;/&gt;\n &lt;input type=&quot;submit&quot;/&gt;\n &lt;/form&gt;\n\n[/php]\n\n上面的 HTML 页面实例包含了两个输入框和一个提交按钮。当用户填写该表单并单击提交按钮时，表单的数据会被送往 \"welcome.php\" 这个文件。\n\n### \"welcome.php\" 文件类似这样：\n\n[php]\n\nWelcome &lt;?php echo $_POST[&quot;name&quot;]?&gt; &lt;br/&gt;\nyour password is &lt;?php echo $_POST[&quot;pwd&quot;]?&gt;\n\n[/php]\n\n上面这个脚本的输出样本类似这样：\n&lt;pre&gt;\nWelcome admin\nyour password is 1234\n&lt;/pre&gt;\n\n## 表单验证\n\n应该在任何可能的时候对用户输入进行验证。客户端的验证速度更快，并且可以减轻服务器的负载。\n\n不过，任何流量很高以至于不得不担心服务器资源的站点，也有必要担心站点的安全性。如果表单访问的是数据库，就非常有必要采用服务器端的验证。\n\n在服务器验证表单的一种好的方式是，把表单传给它自己，而不是跳转到不同的页面。这样用户就可以在同一张表单页面得到错误信息。用户也就更容易发现错误了。","mtime":1386290932000,"source":"_posts/【php基础】表单输入（十二）.md"},"1oqxsg7cizlwdlrl":{"_id":"1oqxsg7cizlwdlrl","content":"title: \"【PHP基础篇】PHP Switch 语句（八）\"\nid: 669\ndate: 2013-06-05 11:34:36\ntags: \ncategories: \n- PHP\n- 程序人生\n---\n\n**PHP 中的 Switch 语句用于执行基于多个不同条件的不同动作。**\n<div>\n\n## Switch 语句\n\n如果您希望有选择地执行若干代码块之一，请使用 Switch 语句。\n\n使用 Switch 语句可以避免冗长的 if..elseif..else 代码块。\n\n### 语法\n\n[php]\nswitch (expression)\n{\ncase label1:\n  code to be executed if expression = label1;\n  break;  \ncase label2:\n  code to be executed if expression = label2;\n  break;\ndefault:\n  code to be executed\n  if expression is different \n  from both label1 and label2;\n}\n[/php]\n\n### 实例\n\n工作原理：\n\n1.  对表达式（通常是变量）进行一次计算\n2.  把表达式的值与结构中 case 的值进行比较\n3.  如果存在匹配，则执行与 case 关联的代码\n4.  代码执行后，_break 语句_阻止代码跳入下一个 case 中继续执行\n5.  如果没有 case 为真，则使用 default 语句\n[php]\n&lt;?php\nswitch ($x)\n{\ncase 1:\n  echo &quot;Number 1&quot;;\n  break;\ncase 2:\n  echo &quot;Number 2&quot;;\n  break;\ncase 3:\n  echo &quot;Number 3&quot;;\n  break;\ndefault:\n  echo &quot;No number between 1 and 3&quot;;\n}\n?&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n[/php]\n\n</div>","mtime":1386290932000,"source":"_posts/【php基础篇】php-switch-语句（八）.md"},"idbx75naeex6u6kv":{"_id":"idbx75naeex6u6kv","content":"title: \"【PHP基础篇】PHP变量（四）\"\nid: 635\ndate: 2013-06-05 11:00:32\ntags: \ncategories: \n- PHP\n- 程序人生\n---\n\n**变量用于存储值，比如数字、字符串或函数的结果。**\n\n### PHP 中的变量\n\n变量用于存储值，比如数字、文本字符串或数组。\n\n一旦设置了某个变量，我们就可以在脚本中重复地使用它。\n\nPHP 中的所有变量都是以 $ 符号开始的。\n\n在 PHP 中设置变量的正确方法是：\n\n[php]\n$var_name = value;\n[/php]\n\nPHP 的入门者往往会忘记在变量的前面的 $ 符号。如果那样做的话，变量将是无效的。\n\n让我们试着创建一个存有字符串的变量，和一个存有数值的变量：\n\n[php]\n\n&lt;!--?php  $txt = &quot;Hello World&quot;;  $num = 20; ?--&gt;\n\n[/php]\n\n### PHP 是一门松散类型的语言（Loosely Typed Language）\n\n在 PHP 中，不需要在设置变量之前声明该变量。\n\n在上面的例子中，您看到了，不必向 PHP 声明该变量的数据类型。\n\n根据变量被设置的方式，PHP 会自动地把变量转换为正确的数据类型。\n\n在强类型的编程语言中，您必须在使用前声明变量的类型和名称。\n\n在 PHP 中，变量会在使用时被自动声明。\n\n### 变量的命名规则\n\n*   变量名必须以字母或下划线 \"_\" 开头。\n*   变量名只能包含字母数字字符以及下划线。\n*   变量名不能包含空格。如果变量名由多个单词组成，那么应该使用下划线进行分隔（比如 $my_string），或者以大写字母开头（比如 $myString）。","mtime":1386290932000,"source":"_posts/【php基础篇】php变量（四）.md"},"cltbsvi55rsnvori":{"_id":"cltbsvi55rsnvori","content":"title: \"【PHP基础篇】PHP 简介（一）\"\nid: 611\ndate: 2013-06-05 09:26:12\ntags: \n- php简介\ncategories: \n- PHP\n- 程序人生\n---\n\n## 什么是 PHP？\n\n*   PHP 指 PHP:超文本预处理器（译者注：PHP: Hypertext Preprocessor，递归命名）\n*   PHP 是一种服务器端的脚本语言，类似 ASP\n*   PHP 脚本在服务器上执行\n*   PHP 支持很多数据库（MySQL、Informix、Oracle、Sybase、Solid、PostgreSQL、Generic ODBC 等等）\n*   PHP 是一个开源的软件（open source software，OSS）\n*   PHP 可免费下载使用\n\n## 什么是 PHP 文件？\n\n*   PHP 文件可包含文本、HTML 标签以及脚本\n*   PHP 文件向浏览器返回纯粹的 HTML\n*   PHP 文件的文件后缀是 \".php\"、\".php3\" 或 \".phtml\"\n\n## 什么是 MySQL？\n\n*   MySQL 是一种数据库服务器\n*   MySQL 支持标准的 SQL\n*   MySQL 可在许多平台上编译\n*   MySQL 可免费下载使用\n\n## PHP + MySQL\n\nPHP 与 MySQL 的组合是跨平台的（意思是您可以在 Windows 环境进行开发，而在 Unix 平台上提供服务）\n\n## 为什么要使用 PHP？\n\n*   PHP 可在不同的平台上运行（Windows、Linux、Unix）\n*   PHP 与目前几乎所有的正在被使用的服务器相兼容（Apache、IIS 等）\n*   PHP 可从官方的 PHP 资源免费下载：www.php.net\n*   PHP 易于学习，并可高效地运行在服务器端\n\n## 从何处开始？\n\n*   在 Windows 或者 Linux 机器上安装 Apache 服务器\n*   在 Windows 或者 Linux 机器上安装 PHP\n*   在 Windows 或者 Linux 机器上安装 MySQL","mtime":1386290932000,"source":"_posts/【php基础篇】php-简介（一）.md"},"w0texoplvg9fovgu":{"_id":"w0texoplvg9fovgu","content":"title: \"【PHP基础篇】PHP字符串（五）\"\nid: 651\ndate: 2013-06-05 11:08:55\ntags: \n- 字符串\ncategories: \n- PHP\n- 程序人生\n---\n\n**字符串变量用于存储并处理文本片段。**\n\n### PHP 中的字符串\n\n字符串变量用于包含字符串的值。\n\n介绍 PHP 中用于操作字符串的最常用的函数和运算符。\n\n在创建字符串之后，我们就可以对它进行操作了。您可以直接在函数中使用字符串，或者把它存储在变量中。\n\n在下面，PHP 脚本把字符串 \"Hello World\" 赋值给名为 $txt 的字符串变量：\n\n[php]\n&lt;?php\n$txt=&quot;Hello World&quot;;\necho $txt;\n?&gt;\n[/php]\n\n以上代码的输出： Hello World\n\n### 并置运算符（Concatenation Operator）\n\n在 PHP 中，只有一个字符串运算符。\n\n并置运算符 (.) 用于把两个字符串值连接起来。\n\n要把两个变量连接在一起，请使用这个点运算符 (.) ：\n\n[php]\n&lt;?php\n$txt1=&quot;Hello World&quot;;\n$txt2=&quot;1234&quot;;\necho $txt1 . &quot; &quot; . $txt2;\n?&gt;&lt;/pre&gt;\n[/php]\n\n以上代码的输出： Hello World 1234\n\n您可以看到，我们在上面的例子中使用了两次并置运算符。这是由于我们需要插入第三个字符串。\n\n为了分隔这两个变量，我们在 $txt1 与 $txt2 之间插入了一个空格。\n\n### 使用 strlen() 函数\n\nstrlen() 函数用于计算字符串的长度。\n\n让我们算出字符串 \"Hello world!\" 的长度：\n\n[php]\n&lt;pre&gt;&lt;?php\necho strlen(&quot;Hello world!&quot;);\n?&gt;&lt;/pre&gt;\n[/php]\n\n字符串的长度信息常常用在循环或其他函数中，因为那时确定字符串何时结束是很重要的（例如，在循环中，我们需要在字符串中的最后一个字符之后结束循环）。\n\n### 使用 strpos() 函数\n\nstrpos() 函数用于在字符串内检索一段字符串或一个字符。\n\n如果在字符串中找到匹配，该函数会返回第一个匹配的位置。如果未找到匹配，则返回 FALSE。\n\n让我们试一下，是不是能在字符串中找到子字符串 \"world\"：\n\n[php]\n&lt;pre&gt;&lt;?php\necho strpos(&quot;Hello world!&quot;,&quot;world&quot;);\n?&gt; \n[/php]\n\n正如您看到的，在我们的字符串中，字符串 \"world\" 的位置是 6。返回 6 而不是 7，是由于字符串中的首个位置是 0，而不是 1。\n\n如果需要查看学习更多string相关函数，可以查看</pre>\n\n### 完整的 PHP String 参考手册\n\n如需完整的字符串函数参考手册，请访问我们的 [PHP String 参考手册](http://www.w3school.com.cn/php/php_ref_string.asp \"PHP String 函数\")。\n\n这个手册提供了每个函数的简要描述和实例！","mtime":1386290932000,"source":"_posts/【php基础篇】php字符串（五）.md"},"uss0ypvagm2ykhgc":{"_id":"uss0ypvagm2ykhgc","content":"title: \"【PHP基础篇】PHP数组（九）\"\nid: 672\ndate: 2013-06-05 11:42:05\ntags: \n- php数组\ncategories: \n- PHP\n- 程序人生\n---\n\n**数组能够在单独的变量名中存储一个或多个值。**\n<div>\n\n### 什么是数组？\n\n在使用 PHP 进行开发的过程中，或早或晚，您会需要创建许多相似的变量。\n\n无需很多相似的变量，你可以把数据作为元素存储在数组中。\n\n数组中的元素都有自己的 ID，因此可以方便地访问它们。\n\n### 有三种数组类型：\n\n<dl><dt>数值数组</dt><dd>带有数字 ID 键的数组</dd><dt>关联数组</dt><dd>数组中的每个 ID 键关联一个值</dd><dt>多维数组</dt><dd>包含一个或多个数组的数组</dd></dl></div>\n<div>\n\n### 数值数组\n\n数值数组存储的每个元素都带有一个数字 ID 键。\n\n可以使用不同的方法来创建数值数组：\n\n### 例子 1\n\n在这个例子中，会自动分配 ID 键：\n\n[php]\n&lt;pre&gt;$names = array(&quot;Peter&quot;,&quot;Quagmire&quot;,&quot;Joe&quot;);\n[/php]\n\n### 例子 2\n\n在这个例子中，我们人工分配的 ID 键：\n\n[php]\n\n&lt;pre&gt;$names[0] = &quot;Peter&quot;;\n$names[1] = &quot;Quagmire&quot;;\n$names[2] = &quot;Joe&quot;;\n[/php]\n\n可以在脚本中使用这些 ID 键：\n\n[php]\n\n&lt;pre&gt;&lt;?php\n\n$names[0] = &quot;Peter&quot;;\n$names[1] = &quot;Quagmire&quot;;\n$names[2] = &quot;Joe&quot;;\n\necho $names[1] . &quot; and &quot; . $names[2] . &quot; are &quot;. $names[0] . &quot;'s neighbors&quot;;\n?&gt;\n[/php]\n\n以上代码的输出：\n\n[php]Quagmire and Joe are Peter's neighbors[php]\n\n&lt;/pre&gt;\n&lt;h3&gt;关联数组&lt;/h3&gt;\n关联数组，它的每个 ID 键都关联一个值。\n\n在存储有关具体命名的值的数据时，使用数值数组不是最好的做法。\n\n通过关联数组，我们可以把值作为键，并向它们赋值。\n&lt;h3&gt;例子 1&lt;/h3&gt;\n在本例中，我们使用一个数组把年龄分配给不同的人：\n\n[php]$ages = array(&quot;Peter&quot;=&gt;32, &quot;Quagmire&quot;=&gt;30, &quot;Joe&quot;=&gt;34);[/php]\n\n### 例子 2\n\n本例与例子 1 相同，不过展示了另一种创建数组的方法：\n\n[php]\n&lt;pre&gt;$ages['Peter'] = &quot;32&quot;;\n$ages['Quagmire'] = &quot;30&quot;;\n$ages['Joe'] = &quot;34&quot;;\n[/php]\n\n可以在脚本中使用 ID 键：\n\n[php]\n&lt;pre&gt;&lt;?php\n\n$ages['Peter'] = &quot;32&quot;;\n$ages['Quagmire'] = &quot;30&quot;;\n$ages['Joe'] = &quot;34&quot;;\n\necho &quot;Peter is &quot; . $ages['Peter'] . &quot; years old.&quot;;\n?&gt;\n[/php]\n\n以上脚本的输出：\n\n[php]Peter is 32 years old.[/php]</pre>\n\n## 多维数组\n\n在多维数组中，主数组中的每个元素也是一个数组。在子数组中的每个元素也可以是数组，以此类推。\n\n### 例子 1\n\n在本例中，我们创建了一个带有自动分配的 ID 键的多维数组：\n\n[php]\n&lt;pre&gt;$families = array\n(\n  &quot;Griffin&quot;=&gt;array\n  (\n  &quot;Peter&quot;,\n  &quot;Lois&quot;,\n  &quot;Megan&quot;\n  ),\n  &quot;Quagmire&quot;=&gt;array\n  (\n  &quot;Glenn&quot;\n  ),\n  &quot;Brown&quot;=&gt;array\n  (\n  &quot;Cleveland&quot;,\n  &quot;Loretta&quot;,\n  &quot;Junior&quot;\n  )\n);\n[/php]\n\n如果输出这个数组的话，应该类似这样：\n\n[php]\n&lt;pre&gt;Array\n(\n[Griffin] =&gt; Array\n  (\n  [0] =&gt; Peter\n  [1] =&gt; Lois\n  [2] =&gt; Megan\n  )\n[Quagmire] =&gt; Array\n  (\n  [0] =&gt; Glenn\n  )\n[Brown] =&gt; Array\n  (\n  [0] =&gt; Cleveland\n  [1] =&gt; Loretta\n  [2] =&gt; Junior\n  )\n)\n[/php]\n\n### 例子 2\n\n让我们试着显示上面的数组中的一个单一的值：\n\n[php]\n&lt;pre&gt;echo &quot;Is &quot; . $families['Griffin'][2] . \n&quot; a part of the Griffin family?&quot;;\n[/php]\n\n以上代码的输出：\n\n[php]Is Megan a part of the Griffin family?[/php]\n\n</div>","mtime":1386290932000,"source":"_posts/【php基础篇】php数组（九）.md"},"xnjw06dsnjc3olt0":{"_id":"xnjw06dsnjc3olt0","content":"title: \"【PHP基础篇】PHP安装（二）\"\nid: 613\ndate: 2013-06-05 09:29:51\ntags: \ncategories: \n- PHP\n- 程序人生\n---\n\n如何安装PHP5，你可以参考官方的教程\n\n[http://www.php.net/manual/en/install.php](http://www.php.net/manual/en/install.php)\n\n我们必须下载如下东东\n\n### 下载 PHP\n\n从此处下载免费的 PHP：[http://www.php.net/downloads.php](http://www.php.net/downloads.php \"PHP Downloads\")\n\n### 下载 MySQL Database\n\n从此处下载免费的 MySQL：[http://www.mysql.com/downloads/](http://www.mysql.com/downloads/ \"MySQL ::  MySQL Downloads (Generally Available)\")\n\n### 下载 Apache Server\n\n从此处下载免费的 Apache：[http://httpd.apache.org/download.cgi](http://httpd.apache.org/download.cgi \"Download - The Apache HTTP Server Project\")\n\n配置比较繁琐点，我们学习阶段推荐使用集成环境[wampserver](http://173.234.48.113/)，下载地址：\n\n[http://www.wampserver.com/en/](http://www.wampserver.com/en/)\n\n&nbsp;\n\n安装比较简单，不懂的请Google","mtime":1386290932000,"source":"_posts/【php基础篇】php安装（二）.md"},"bs7qtrnfl6cqcu55":{"_id":"bs7qtrnfl6cqcu55","content":"title: \"【PHP基础篇】PHP语法（三）\"\nid: 615\ndate: 2013-06-05 09:32:49\ntags: \n- PHP语法\ncategories: \n- PHP\n- 程序人生\n---\n\n您无法在浏览器中通过查看源文档的方式来查看 PHP 的源代码 - 您只能看到 PHP 文件的输出，即纯粹的 HTML。这是因为在结果返回浏览器之前，脚本就已经在服务器执行了。\n\n## 基本的 PHP 语法\n\nPHP 的脚本块以 _&lt;?php_ 开始，以 _?&gt;_ 结束。您可以把 PHP 的脚本块放置在文档中的任何位置。\n\n当然，在支持简写的服务器上，您可以使用 &lt;? 和 ?&gt; 来开始和结束脚本块。\n\n不过，为了达到最好的兼容性，我们推荐您使用标准形式 (&lt;?php)，而不是简写形式。\n\n[php]\n&lt;?php\n?&gt;\n[/php]\n\nPHP 文件通常会包含 HTML 标签，就像一个 HTML 文件，以及一些 PHP 脚本代码。\n在下面，我们提供了一段简单的 PHP 脚本，它可以向浏览器输出文本 \"Hello World\"：\n\n[php]\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;?php\necho &quot;Hello World&quot;;\n?&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n[/php]\n\nPHP 中的每个代码行都必须以分号结束。分号是一种分隔符，用于把指令集区分开来。\n有两种通过 PHP 来输出文本的基础指令：echo 和 print。在上面的例子中，我们使用了 echo 语句来输出文本 \"Hello World\"。\nPHP 中的注释\n在 PHP 中，我们使用 // 来编写单行注释，或者使用 /* 和 */ 来编写大的注释块。\n\n[php]\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;?php\n\n//This is a comment\n\n/*\nThis is\na comment\nblock\n*/\n\n?&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n[/php]","mtime":1386290932000,"source":"_posts/【php基础篇】php语法（三）.md"},"unu0to8cjzh41llz":{"_id":"unu0to8cjzh41llz","content":"title: \"【PHP数据库】PHP的Mysqli扩展（37）\"\nid: 830\ndate: 2013-06-08 11:29:43\ntags: \n- mysqli\ncategories: \n- PHP\n- 程序人生\n---\n\n## 使用mysqli类\n\nmysqli类的对象主要控制PHP和MySql数据库服务器之间的连接、选择数据库、向mysql服务器发送sql语句，设置字符集等，这些任务都是通过该类中声明的构造方法、成员方法和成员属性完成的。\n\n**mysqli类中的成员方法**\n<pre>__construct():构造方法，用于创建一个mysqli对象，也可以建立一个连接。\n\nautocommit():开启或关闭数据库修改自动提交。\n\nchange_user():改变数据库连接所指定的用户。\n\ncharacter_set_name():返回数据库连接默认字符集。\n\nclose():关闭先前打开的连接。\n\ncommit():提交当前的事物。\n\nconnect():打开一个新的连接到mysql数据库服务器。\n\ndebug():执行调试操作。\n\ndump_debug_info():转储调试信息。\n\nget_client_info():返回客户端版本。\n\nget_host_info():返回一个字符串代表的连接使用类型，如：Localhost via UNIX socket\n\nget_server_info():返回mysql服务器版本。\n\nget_server_version():返回整数形式的mysql服务器版本。\n\ninit():初始化一个mysqli并返回一个资源。\n\ninfo():检索有关最近执行的查询。\n\nkill():杀死一个mysql线程。\n\nmulti_query():执行多个查询语句。\n\nmore_results():从多查询语句中检索是否有任何更多的查询结果。\n\nnext_result():从当前执行的多查询中读取下一个结果。\n\noptions():设置选项。\n\nping():如果没有连接，ping一台服务器连接或重新连接。\n\nprepare():准备一个sql语句的执行，返回mysqli_stmt对象。\n\nquery():与数据库交互都是通过查询进行的，该方法向数据库发送查询来执行，执行失败返回FALSE。\n\nreal_connect():试图打开一个连接到mysql数据库服务器。\n\nescape_string():转义特殊字符的字符串。\n\nrollback():回滚当前的事务。\n\nselect_db():为数据库查询选择一个默认的数据库。\n\nset_charset():设置默认客户端字符集。\n\nssl_set():使用ssl用于建立安全连接。\n\nstat():获取当前的系统状态。\n\nstmt_init():初始化一个声明，返回一个mysql_stmt对象。\n\nstore_result():从最后查询中转让结果集。\n\nthread_safe():是否考虑返回安全的线程。</pre>\n**mysql类中的成员属性**\n<pre>$affected_rows:前一个mysql操作中影响的行数。\n\n$client_info:mysql客户端版本(字符串)。\n\n$client_version:mysql客户端版本(整数)。\n\n$errno:最近函数调用的错误代码。\n\n$error:最近函数调用的错误信息字符串。\n\n$field_count():查询获取的列数。\n\n$host_info:连接类型使用(字符串)。\n\n$info:最近执行的查询。\n\n$insert_id:最后查询自动生成的编号。\n\n$protocol_version:mysql协议使用的版本。\n\n$sqlstate:包含SQLSTATE错误码的最后一个错误。\n\n$thread_id:当前连接线程ID。\n\n$warning_count:前一个sql语句执行过程中产生的警告数量。</pre>\n\n## 连接Mysql服务器\n\nPHP程序在于Mysql服务器交互前，需要成功滴连接。\n\n方法一：通过mysqli类的构造函数实例化对象。\n\n[php]\n&lt;span style=&quot;font-family: 宋体; font-size: medium;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;font-family: 宋体;&quot;&gt;&lt;span style=&quot;font-size: medium;&quot;&gt; mysqli {\n    __construct ( [string host [, string&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family: 宋体;&quot;&gt;&lt;span style=&quot;font-size: medium;&quot;&gt; username\n[, string passwd [, string&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family: 宋体;&quot;&gt;&lt;span style=&quot;font-size: medium;&quot;&gt; dbname\n              [, int port [, string&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-family: 宋体; font-size: medium;&quot;&gt; socket]]]]]] )\n}&lt;/span&gt;\n[/php]\n\n参数分别是:主机名、用户名、密码、数据库名称、端口、套接字文件；\n\n连接成功可以同mysqli对象中的select_db()方法为当前的连接改变它的默认数据库。\n\n[php]\n\n// $mysqli = new mysqli(&quot;127.0.0.1&quot;,&quot;root&quot;,&quot;&quot;,&quot;db_test&quot;); //连接成功返回mysqli对象\n\n[/php]\n\n还可以这样写：\n\n[php]\n\n&lt;!--?php  // $mysqli = new mysqli(&quot;127.0.0.1&quot;,&quot;root&quot;,&quot;&quot;,&quot;db_test&quot;); //连接成功返回mysqli对象  $mysqli = new mysqli();  $mysqli---&gt;connect(&quot;127.0.0.1&quot;,&quot;root&quot;,&quot;&quot;);\n $mysqli-&gt;select_db(&quot;db_test&quot;);\n if ($mysqli) {\n echo &quot;数据库连接成功！&quot;;\n }\n?&gt;\n\n[/php]\n\n如果想设置特有的连接选项还可以用如下代码：\n\n[php]\n\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\n&lt;!--?php $mysqli = mysqli_init();//创建连接对象  $mysqli---&gt;options(MYSQLI_INIT_COMMAND,&quot;SET AUTOCOMMIT=0&quot;);//连接成功执行\n $mysqli-&gt;options(MYSQLI_OPT_CONNECT_TIMEOUT,5);//设置倒计时\n\n//通过real_connect()方法连接\n $mysqli-&gt;real_connect(&quot;127.0.0.1&quot;,&quot;root&quot;,&quot;&quot;,&quot;db_test&quot;);\n if ($mysqli) {\n echo &quot;数据库连接成功！&quot;;\n }\n?&gt;\n\n[/php]\n\n## 处理连接错误报告\n\n在连接过程中难免会出现错误，应该及时让用户得到通知。在连接出错时mysqli对象并没有创建成功，所以不能调用mysqli对象中的成员获取这些错误信息，要通过mysqli扩展中的过程方式获取。使用mysqli_connect_errno()函数测试在建立连接的过程中是否发生错误，相关的出错消息由mysqli_connect_error()函数负责返回。如下代码所示：\n\n[php]\n\nif (mysqli_connect_errno()) {\n # code...\n printf(&quot;连接失败！：%s\\n&quot;,mysqli_connect_error());\n exit();\n }\n\n[/php]\n\n## 关闭与MYSQL的连接\n\n完成数据库访问工作，如果不再需要连接到数据库，应该明确地释放有关的mysqli对象。虽然脚本执行结束后，所有打开的数据库连接都将自动关闭，资源被回收。但是，在执行过程中，有可能页面需要多个数据库连接，各个连接要在适当的时候将其关闭。mysqli对象中的close()方法负责关闭打开的数据库连接，成功时返回TRUE，否则返回FALSE。\n\n[php]\n /* 关闭打开的数据库连接 */\n    $mysqli-&gt;close();\n[/php]\n\n## 执行SQL命令\n\n无论如何通过PHP脚本与MySQL数据库交互，过程都是一样的，创建一个SQL语句，再传递给执行查询的函数。在mysqli类中提供了几种执行SQL命令的方法，其中最常用的是query()方法。对于INSERT（插入）、UPDATE（更新）、DELETE（删除）等不会返回数据的SQL命令，query()方法在SQL命令执行成功时将返回TRUE。在此基础上，还可以通过mysqli对象中的affected_rows属性获取有多少条数据记录发生了变化。而且使用mysqli对象中的insert_id()属性可以返回最后一条INSQL命令生成的AUTO_INCREMENT编号值。\n\n[php]\n\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\n&lt;!--?php  $mysqli = new mysqli(&quot;127.0.0.1&quot;,&quot;root&quot;,&quot;&quot;,&quot;db_test&quot;); //连接成功返回mysqli对象 if (mysqli_connect_errno()) {  printf(&quot;连接失败！：%s\\n&quot;,mysqli_connect_error());  exit();  }else  {  echo &quot;连接成功！&quot;;  } if ($mysqli---&gt;query(&quot;insert into Persons(FirstName,LastName,Age) values('wang','hai','30')&quot;)) {\n echo &quot;插入成功！&quot;;\n echo &quot;改变的记录数：&quot;.$mysqli-&gt;affected_rows.&quot;\n&quot;;\n echo &quot;新插入的ID的值：&quot;.$mysqli-&gt;insert_id.&quot;\n&quot;;\n }else\n {\n echo &quot;插入失败&quot;;\n }\n $mysqli-&gt;close();\n?&gt;\n\n[/php]\n\n如果在执行SQL命令时发生错误，query()方法将返回FALSE，此时可以通过mysqli对象中的errno和error属性获得错误编号和错误原因。如果执行有返回数据的SQL命令SELECT（选择），执行成功后则返回一个mysqli_result对象.\n\nmysqli对象中的query()方法每次调用只能执行一条SQL命令，如果想一次执行多条命令，就必须使用mysqli对象中的multi_query()方法。如果想以不同的参数多次执行一条SQL命令，最有效率的办法是先对那条命令做一些预处理然后再执行。\n\n## 使用mysqli_result方法\n\n这个类的对象包含SELECT查询的结果，和获取结果集中数据的成员方法，以及和查询的结果有关的成员属性。\n\n**成员方法名  **\n<pre>close() 释放内存并关闭结果集\n\ndata_seek() 明确改变当前结果记录顺序\n\nfetch_field() 从结果集中获得某一个字段的信息\n\nfetch_fields() 从结果集中获得全部字段的信息\n\nfetch_field_direct() 从一个指定的列中获得类的详细信息，返回一个包含列信息的对象\n\nfetch_array() 将以一个普通索引数组和关联数组两种形式返回一条结果记录\n\nfetch_assoc() 将以一个普通关联数组的形式返回一条结果记录\n\nfetch_object() 将以一个对象的形式返回一条结果记录\n\nfetch_row() 将以一个普通索引数组的形式返回一条结果记录\n\nfield_seek() 设置结果集中字段的偏移位置</pre>\n**mysqli_result类中的成员属性**\n<pre>$current_field 获取当前结果中指向的字段偏移位置，是一个整数\n\n$field_count 从查询的结果中获取列的个数\n\n$lengths 返回一个数组，保存在结果集中获取当前行的每一个列的长度\n\n$num_rows 返回结果集中包含记录的行数</pre>\n\n## 创建结果集对象\n\nmysqli_result类的对象，默认是通过mysqli对象中的query()方法执行SELECT语句返回的，并把所有的结果数据从MySQL服务器取回到客户端，保存在该对象中。如果希望把结果暂时留在MySQL服务器上，在有需要时才一条条地读取记录过来，就需要在调用query()方法时，在第二个参数中提供一个MYSQL_USE_RESULT值。在处理的数据集合尺寸比较大或不适合一次全部取回到客户端的时候，使用这个参数比较有用。但是，要想知道本次查询到底找到了多少条记录，只能在所有的结果记录被全部读取完毕之后。使用mysqli对象中的query()方法获取结果集的代码。\n\n[php]\n\n$result = $mysqli-&gt;query(&quot;SELECT * FROM table1 LIMIT 10&quot;);                //将数据取回到客户端 $result = $mysqli-&gt;query(&quot;SELECT * FROM table1&quot;, MYSQLI_USE_RESULT);   //留在MySQL服务器上\n\n[/php]\n\n除了使用上面的方法声明所需的结果类型，也可以将mysqli对象中的real_query()方法与mysqli对象中的store_result()或use_result()方法一起使用获取结果集。real_query()方法与query()方法相同，只是无法确定所返回结果集的类型，可以使用store_result()方法获取整个结果集。将所有记录存储在一个对象中，在合适的时候加以解析，这称为缓冲结果集。可以在缓冲结果集的记录中向前和向后导航，甚至直接跳到任意一条记录上。\n\n[php]\n\n$mysqli-&gt;real_query(&quot;SELECT * FROM TABLE1 LIMIT 10&quot;);    //无法确定所返回结果集的类型\n\n$result = $mysqli-&gt;store_result();                             //获取一个缓冲结果集\n\n[/php]\n\n由于这种缓冲结果集是获取整个结果集，可能占用非常多的内存，所以一旦结果集操作结束，就要及时回收内存。而使用mysqli对象中的real_query()方法和use_result方法结合，也是从服务器获取结果集，但并不是获取整个集合，而是可以在适当的时候获取各条记录。因为这种方式只是开始结果集的获取，所以不仅无法确定集合中的记录总数，也无法向后导航或跳到某条记录。\n\n## 回收查询结果集\n\n在对结果集结束操作时，则有必要回收集合所需的内存，可以使用mysqli_result对象中的close()方法回收结果集占用的内存。注意，一旦执行了这个方法，结果集就不再可用。\n\n## 从结果集中解析数据\n\n执行查询并准备了结果集之后，就可以开始解析了。解析的内容包括：从结果集中获取需要的记录、字段信息以及整个表的属性等。\n\n与mysql功能扩展模块类似，mysqli接口在结果集对象中也提供了fetch_row()、fetch_array()、fetch_assoc()和fetch_object()四个彼此很相似的方法来依次读取结果数据行。\n\n**$result-&gt;fetch_row()**\n\n该方法从结果集中获取一条结果记录，将值存放在一个索引数组中，与其他三个方法相比是最方便的方法。它的各个字段需要以$row[$n]的方式访问，其中$row是从结果集中获取的一行记录返回的数组，$n为连续的整数下标。因为返回的是索引数组，所以还可以和list()函数结合在一起使用。\n\n[php]\n\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\n&lt;!--?php  $mysqli = new mysqli(&quot;127.0.0.1&quot;,&quot;root&quot;,&quot;&quot;,&quot;db_test&quot;); //连接成功返回mysqli对象 if (mysqli_connect_errno()) {  printf(&quot;连接失败！：%s\\n&quot;,mysqli_connect_error());  exit();  }else  {  echo &quot;连接成功！&quot;;  }  $mysqli---&gt;query(&quot;set names utf8&quot;);\n $result = $mysqli-&gt;query(&quot;select name,address from personinfo&quot;,MYSQLI_USE_RESULT);\n while(list($name,$address)=$result-&gt;fetch_row())\n {\n echo $name.&quot;===&gt;&quot;.$address.&quot;\n&quot;;\n }\n $result-&gt;close();\n $mysqli-&gt;close();\n?&gt;\n\n[/php]\n\n**$result-&gt;fetch_assoc()**\n\n该方法将以一个关联数组的形式返回一条结果记录，数据表的字段名表示键，字段内容表示值。\n\n[php]\n\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\n&lt;!--?php  $mysqli = new mysqli(&quot;127.0.0.1&quot;,&quot;root&quot;,&quot;&quot;,&quot;db_test&quot;); //连接成功返回mysqli对象 if (mysqli_connect_errno()) {  printf(&quot;连接失败！：%s\\n&quot;,mysqli_connect_error());  exit();  }else  {  echo &quot;连接成功！&quot;;  } $mysqli---&gt;query(&quot;set names utf8&quot;);\n $result = $mysqli-&gt;query(&quot;select * from personinfo&quot;,MYSQLI_USE_RESULT);\n\n while ($row = $result-&gt;fetch_assoc()) {\n echo $row[&quot;id&quot;].&quot;==&gt;&quot;.$row[&quot;name&quot;].&quot;==&gt;&quot;.$row[&quot;address&quot;].&quot;\n&quot;;\n }\n $result-&gt;close();\n $mysqli-&gt;close();\n?&gt;\n\n[/php]\n\n**$result-&gt;fetch_array()**\n\n该方法可以说是fetch_row()和fetch_assoc()两个方法的结合版本，可以将结果集的各条记录获取为一个关联数组或数值索引数组，或者同时获取为关联数组和索引数组。默认情况下，会同时获取这两种数组。可以通过在该方法的参数中传入如下不同的值来修改这种默认行为。\n\n*   MYSQLI_ASSOC：记录被作为关联数组返回，字段名为键，字段内容为值。\n*   MYSQLI_NUM：记录被作为索引数组返回，按查询中指定的字段名顺序排序。\n*   MYSQLI_BOTH：这是默认值，记录即作为关联数组又作为索引数组返回。\n因此，每个字段可以根据其索引偏移引用，也可以根据字段名来引用。 如果没有特殊要求，尽量不要去使用fetch_array()方法。使用前面介绍的fetch_row()或fetch_assoc()方法实现相同的功能，效率会更高一些。\n**$result-&gt;fetch_object() **\n\n该方法与前面三个方法不同，它将以一个对象的形式返回一条结果记录，而不是数组。它的各个字段需要以对象的方式进行访问，数据列的名字区分字母大小写情况。\n\n[php]\n\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\n&lt;!--?php  $mysqli = new mysqli(&quot;127.0.0.1&quot;,&quot;root&quot;,&quot;&quot;,&quot;db_test&quot;); //连接成功返回mysqli对象 if (mysqli_connect_errno()) {  printf(&quot;连接失败！：%s\\n&quot;,mysqli_connect_error());  exit();  }else  {  echo &quot;连接成功！&quot;;  } $mysqli---&gt;query(&quot;set names utf8&quot;);\n $result = $mysqli-&gt;query(&quot;select * from personinfo&quot;,MYSQLI_USE_RESULT);\n\n while($rowobj = $result-&gt;fetch_object())\n {\n echo $rowobj-&gt;id.&quot;==&gt;&quot;.$rowobj-&gt;name.&quot;==&gt;&quot;.$rowobj-&gt;address.&quot;\n&quot;;\n }\n $result-&gt;close();\n $mysqli-&gt;close();\n?&gt;\n\n[/php]\n\n以上四个结果集中遍历数据的方法，每次调用都将自动返回下一条结果记录。如果想改变这个读取的顺序，可以使用结果集对象中的data_seek()方法明确地改变当前记录位置。还可以使用结果集对象中的num_rows属性，给出结果数据表里的记录个数。还可以使用结果对象中的lengths属性返回一个组，该数组的各个元素是使用以上四个方法最后读取的结果记录中各字段里的字符个数。\n\n## 一次执行多条SQL语句\n\n使用mysqi对象中的query()方法每次调用只能执行一条SQL命令。如果需要一次执行多条SQL命令，就必须使用mysqli对象中的multi_query()方法。具体做法是把多条SQL命令写在同一个字符串里作为参数传递给multi_query()方法，多条SQL之间使用分号（;）分隔。如果第一条SQL命令在执行时没有出错，这个方法就会返回TRUE，否则将返回FALSE。\n\n因为multi_query()方法能够连接执行一个或多个查询，而每条SQL命令都可能返回一个结果，在必要时需要获取每一个结果集。所以对该方法返回结果的处理也有了一些变化，第一条查询命令的结果要用mysqli对象中的use_result()或store_result()方法来读取，当然，使用store_result()方法将全部结果立刻取回到客户端，这种做法效率更高。另外，可以用mysqli对象中的more_results()方法检查是否还有其他结果集。如果想对下一个结果集进行处理，应该调用mysqli对象中的next_result()方法，获取下一个结果集。这个方法返回TRUE（有下一个结果）或FALSE。如果有下一个结果集，也需要使用use_result()或store_result()方法来读取。\n\n[php]\n\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\n&lt;!--?php  $mysqli = new mysqli(&quot;127.0.0.1&quot;,&quot;root&quot;,&quot;&quot;,&quot;db_test&quot;); //连接成功返回mysqli对象 if (mysqli_connect_errno()) {  printf(&quot;连接失败！：%s\\n&quot;,mysqli_connect_error());  exit();  }else  {  echo &quot;连接成功！&quot;;  } $query = &quot;set names utf8;&quot;;  $query .=&quot;select current_user();&quot;;  $query .=&quot;select * from personinfo&quot;; if($mysqli---&gt;multi_query($query))\n {\n do{\n if($result = $mysqli-&gt;store_result()){\n while($row=$result-&gt;fetch_row()){\n foreach ($row as $data){\n echo $data.&quot;  &quot;;\n }\n echo &quot;\n&quot;;\n }\n $result-&gt;close();\n }\n if($mysqli-&gt;more_results()){\n echo &quot;---------------------&quot;;\n }\n }while($mysqli-&gt;next_result());\n }\n\n$mysqli-&gt;close();\n\n?&gt;\n\n[/php]\n\n## 使用mysqli_stmt类\n\n在生成网页时，许多PHP脚本通常都会执行除参数以外，其他部分完全相同的查询语句，针对这种重复执行一个查询，每次迭代使用不同的参数情况，MySQL从4.1版本开始提供了一种名为预处理语句（prepared statement）的机制。它可以将整个命令向MySQL服务器发送一次，以后只有参数发生变化，MySQL服务器只需对命令的结构做一次分析就够了。这不仅大大减少了需要传输的数据量，还提高了命令的处理效率。可以用mysqli扩展模式中提供的mysqli_stmt类的对象。\n\n**mysqli_stmt类中的成员方法**\n<pre>bind_param() 该方法把预处理语句各有关参数绑定到一些PHP变量上，注意参数的先后顺序\n\nbind_result() 预处理语句执行查询之后，利用该方法将变量绑定到所获取的字段\n\nclose() 一旦预处理语句使用结果之后，它所占用的资源可以通过该方法回收\n\ndata_seek() 在预处理语句中移动内部结果的指针\n\nexecute() 执行准备好的预处理语句\n\nfetch() 获取预处理语句结果的每条记录，并将相应的字段赋给绑定结果\n\nfree_result() 回收由该对象指定的语句占用的内存\n\nresult_metadata() 从预处理中返回结果集原数据\n\nprepare() 无论是绑定参数还是绑定结果，都需要使用该方法准备要执行的预处理语句\n\nsend_long_data() 发送数据块\n\nreset() 重新设置预处理语句\n\nstore_result() 从预处理语句中获取结果集</pre>\n** mysqli_stmt类中的成员属性**\n<pre>$affected_rows 返回该对象指定的最后一条语句所影响的记录数。注意，该方法只与插入、修改和删除三种查询句有关\n\n$errno 返回该对象指定最近所执行语句的错误代码\n\n$error 返回该对象指定最近所执行语句的错误描述字符串\n\n$param_count 返回给定的预处理语句中需要绑定的参数个数\n\n$sqlstate 从先前的预处理语句中返回SQL状态错误代码\n\n$num_rows 返回stmt对象指定的SELECT语句获取的记录数</pre>\n\n### 获取预处理语句对象\n\n在设计PHP程序时，使用预处理语句的最大好处是有关代码可以编写得更精巧、更易于理解，不必为各组参数分别构造一条SQL命令。可以使用mysqli对象中的prepare()方法准备要执行的SQL语句，获得一个mysqli_stmt对象。但要将准备的SQL语句中，各有关参数替换为占位符号，通常使用问号（?）作为占位符号。这条准备执行的SQL语句就被允许存储在MySQL服务器上，但还没有执行。mysqli_stmt对象是后面操作的基础，获取该对象的代码如下所示：\n\n[php]$stmt = $mysqli-&gt;prepare(&quot;INSERT INTO tableName VALUES (?, ?, ?, ?)&quot;);  //返回mysqli_stmt对象[/php]\n\n或者：\n\n[php]\n\n$stmt =  $mysqli-&gt;stmt_init();   //获取一个mysqli_stmt对象\n\n$stmt-&gt;prepare (&quot;INSERT INTO tableName VALUES (?, ?, ?, ?)&quot;);        //返回mysqli_stmt对象\n\n[/php]\n\n### 绑定参数\n\n创建完mysqli_stmt对象并准备了一个要执行的SQL语句之后，接下来，需要使用该对象中的bind_param()方法，把在预处理语句中使用占位符号问号（?）表示的各有关参数，绑定到一些PHP变量上，一定要注意它们的先后顺序是否正确。在bind_param()方法中，第一个参数是必需的，表示该方法中其后多个可选参数变量的数据类型。每个参数的数据类型必须用相应的字符明确给出。\n\n绑定变量的数据类型字符\ni:所有INTEGER类型\n\nd: DOUBLE和FLOAT类型\n\ns: 所有其他类型（包括字符串）\n\nb: 二进制数据类型（BLOB、二进制字节串）\n\n通过bind_param()方法将变量绑定到相应的字段之后，为了实际执行的那条SQL命令，还需要把参数值存入绑定的PHP变量。\n\n[php]\n\n$stmt = $mysqli-&gt;prepare(&quot;INSERT INTO 表名 VALUES (?, ?, ?, ?)&quot;); //获取一个mysqli_stmt对象\n\n$stmt-&gt;bind_param('issd', $var1, $var2, $var3, $var4); //绑定参数，其中'issd'表示4个变量类型\n\n$var1 = 整数值; //给第一个变量赋上整型数值\n\n$var2 = '字符串1'; //给第二个变量赋上字符串值\n\n$var3 = &quot;字符串2&quot;; //给第三个变量赋上字符串值\n\n$var4 = 浮点数值;\n\n[/php]\n\n### 准备执行语句\n\n准备好SQL语句并绑定参数，把那些参数放入几个简单的PHP变量之后，就可以调用mysqli_stmt对象中的execute()执行了。因为绑定参数的预处理语句并没有执行过，只是存储在MySQL服务器上，将迭代数据重复地发送给服务器，再将这些迭代数据集成到查询中来执行。\n\n### 回收资源\n\n等不再需要mysqli_stmt对象时，应该立刻明确地释放它占用的资源，可以通过该对象中的close()方法回收。这么做不仅从本地内存释放了这个对象，还通知MySQL服务器后面不会再有这样的命令了，删除它的预处理语句。\n\n### 简单实例\n\n[php]\n\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;\n&lt;?php\n $mysqli = new mysqli(&quot;127.0.0.1&quot;,&quot;root&quot;,&quot;&quot;,&quot;db_test&quot;); //连接成功返回mysqli对象\n\nif (mysqli_connect_errno()) {\n printf(&quot;连接失败！：%s\\n&quot;,mysqli_connect_error());\n exit();\n }else\n {\n echo &quot;连接成功！&quot;;\n }\n\n$query = &quot;insert into personinfo(id,name,departmentId,address) values(?,?,?,?)&quot; ;\n $stmt = $mysqli-&gt;prepare($query);\n\n$stmt-&gt;bind_param('isss',$id,$name,$departmentId,$address);\n\n$id=5;\n $name=&quot;帅哥&quot;;\n $departmentId=&quot;D05&quot;;\n $address=&quot;中国地区&quot;;\n\n$stmt-&gt;execute();\n\necho &quot;插入行数：&quot;.$stmt-&gt;affected_rows.&quot;&lt;br/&gt;&quot;;\n echo &quot;UID:&quot;.$mysqli-&gt;insert_id.&quot;&lt;br/&gt;&quot;;\n\n$id=6;\n $name=&quot;美女&quot;;\n $departmentId=&quot;D06&quot;;\n $address=&quot;中国地区&quot;;\n\n$stmt-&gt;execute();\n\necho &quot;插入行数：&quot;.$stmt-&gt;affected_rows.&quot;&lt;br/&gt;&quot;;\n echo &quot;UID:&quot;.$mysqli-&gt;insert_id.&quot;&lt;br/&gt;&quot;;\n\n$stmt-&gt;close();\n $mysqli-&gt;close();\n\n?&gt;\n\n[/php]\n\n## 使用预处理语句处理SELECT查询结果\n\nSELECT语句和其他的SQL查询命令不同，它需要处理查询结果。SQL语句的执行也需要使用mysqli_stmt对象中的execute()方法，但与mysqli对象中的query()方法不同，execute()方法的返回值并不是一个mysqli_result对象。mysqli_stmt对象提供了一种更为精巧的办法来处理SELECT语句查询结果：在使用execute()方法执行SQL语句完成查询之后，使用mysqli_stmt对象中的bind_result()方法，把查询结果的各个数据列绑定到一些PHP变量上；然后使用mysqli_stmt对象中的fetch()方法把下一条结果记录读取到这些变量里。如果成功地读入下一条记录fetch()方法返回TRUE，否则返回FALSE，或者已经读完所有的结果记录返回FALSE。\n\n默认情况下，SELECT查询结果将留在MySQL服务器上，等待fetch()方法把记录逐条取回到PHP程序中，赋给使用bind_result()方法绑定的PHP变量上。如果需要对所有记录而不只是一小部分进行处理，可以调用mysqli_stmt对象中的store_result()方法，把所有结果一次全部传回到PHP程序中。这样做不仅更有效率，而且能减轻服务器的负担。store_result()方法是可选的，除了读取数据不改变任何东西。以联系人信息表contactinfo为例，使用预处理语句处理SELECT查询结果的代码如下所示\n\n[php]\n\nquery = &quot;SELECT name, address, phone FROM contactinfo LIMIT 0,3&quot;; //声明SELECT语句\n\nif ($stmt = $mysqli-&gt;prepare($query)) {  //处理打算执行的SQL命令\n\n$stmt-&gt;execute(); //执行SQL语句\n$stmt-&gt;store_result(); //取回全部查询结果\necho &quot;记录个数：&quot;.$stmt-&gt;num_rows.&quot;行&lt;br&gt;&quot;; //输出查询的记录个数\n$stmt-&gt;bind_result($name, $address, $phone); //当查询结果绑定到变量中\nwhile ($stmt-&gt;fetch()) { //逐条从MySQL服务取数据\nprintf (&quot;%s (%s,%s)&lt;br&gt;&quot;, $name, $address, $phone); //格式化结果输出\n}\n$stmt-&gt;close(); //释放mysqli_stmt对象占用的资源 }\n$mysqli-&gt;close(); //关闭与MySQL数据库的连接\n\n[/php]\n\n## 数据库事务\n\n事务是确保数据库一致的机制，是一个或一系列的查询，作为一个单元的一组有序的数据库操作。如果组中的所有SQL语句都操作成功，则认为事务成功，事务则被提交，其修改将作用于所有其他数据库进程。即使在事务的组中只有一个环节操作失败，事务也不成功，则整个事务将被回滚，该事务中所有操作都将被取消。事务功能是企业级数据库的一个重要部分，因为很多业务过程都包括多个步骤。如果任何一个步骤失败，则所有步骤都不应发生。\n\n### 构建事务应用程序\n\n顾客要进行一次在线购物，选好一款产品，价格为RMB8000.00元，采用网上银行转账方式付款。假设用户userA向用户userB的账户转账，需要从userA账户中减去8000元人民币，并向userB账户加上8000人民币。首先，在demo数据库中准备一个InnoDB类型的数据表（account）。用于保存两个用户的账户信息，包括其姓名和可用现金数据。\n\n具体代码：\n\n[php]\n\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;\n&lt;?php\n $mysqli = new mysqli(&quot;127.0.0.1&quot;,&quot;root&quot;,&quot;&quot;,&quot;db_test&quot;); //连接成功返回mysqli对象\n\nif (mysqli_connect_errno()) {\n printf(&quot;连接失败！：%s\\n&quot;,mysqli_connect_error());\n exit();\n }else\n {\n echo &quot;连接成功！&quot;;\n }\n\n$success = true;//设置事务执行的状态\n $price = 8000; //转账金额\n\n$mysqli-&gt;autocommit(0);//关闭mysql事务机制的自动提交模式\n\n//从A账户减少金额，返回1表示成功，否则执行失败\n $result = $mysqli-&gt;query(&quot;update account set cash = cash-$price where name='userA'&quot;);\n //如果sql语句执行失败或没有改变记录中的值，将$success的值设置为false\n if (!$result or $mysqli-&gt;affected_rows !=1) {\n $success = false;\n }\n\n//从B账户增加金额，返回1表示成功，否则执行失败\n $result = $mysqli-&gt;query(&quot;update account set cash = cash+$price where name='userB'&quot;);\n //如果sql语句执行失败或没有改变记录中的值，将$success的值设置为false\n if (!$result or $mysqli-&gt;affected_rows !=1) {\n $success = false;\n }\n\nif ($success) {\n $mysqli-&gt;commit();//提交事务给数据库\n echo &quot;转账成功！&quot;;\n }else\n {\n $mysqli-&gt;rollback(); //回滚事务\n echo &quot;转账失败！&quot;;\n }\n $mysqli-&gt;autocommit(1);//开启事务机制的自动提交模式\n\n$mysqli-&gt;close();\n\n?&gt;\n\n[/php]\n\n&nbsp;","mtime":1386290932000,"source":"_posts/【php数据库】php的mysqli扩展（37）.md"},"hojwktlv4jfabnfd":{"_id":"hojwktlv4jfabnfd","content":"title: \"【PHP基础篇】PHP运算符（六）\"\nid: 655\ndate: 2013-06-05 11:23:12\ntags: \n- 运算符\ncategories: \n- PHP\n- 程序人生\n---\n\n## PHP 运算符\n\n本部分列出了在 PHP 中使用的各种运算符：\n\n**算数运算符**\n<table>\n<tbody>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>例子</th>\n<th>结果</th>\n</tr>\n<tr>\n<td>+</td>\n<td>Addition</td>\n<td>x=2\nx+2</td>\n<td>4</td>\n</tr>\n<tr>\n<td>-</td>\n<td>Subtraction</td>\n<td>x=2\n5-x</td>\n<td>3</td>\n</tr>\n<tr>\n<td>*</td>\n<td>Multiplication</td>\n<td>x=4\nx*5</td>\n<td>20</td>\n</tr>\n<tr>\n<td>/</td>\n<td>Division</td>\n<td>15/5\n5/2</td>\n<td>3\n2.5</td>\n</tr>\n<tr>\n<td>%</td>\n<td>Modulus (division remainder)</td>\n<td>5%2\n10%8\n10%2</td>\n<td>1\n2\n0</td>\n</tr>\n<tr>\n<td>++</td>\n<td>Increment</td>\n<td>x=5\nx++</td>\n<td>x=6</td>\n</tr>\n<tr>\n<td>--</td>\n<td>Decrement</td>\n<td>x=5\nx--</td>\n<td>x=4</td>\n</tr>\n</tbody>\n</table>\n**赋值运算符**\n<table>\n<tbody>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>例子</th>\n</tr>\n<tr>\n<td>=</td>\n<td>x=y</td>\n<td>x=y</td>\n</tr>\n<tr>\n<td>+=</td>\n<td>x+=y</td>\n<td>x=x+y</td>\n</tr>\n<tr>\n<td>-=</td>\n<td>x-=y</td>\n<td>x=x-y</td>\n</tr>\n<tr>\n<td>*=</td>\n<td>x*=y</td>\n<td>x=x*y</td>\n</tr>\n<tr>\n<td>/=</td>\n<td>x/=y</td>\n<td>x=x/y</td>\n</tr>\n<tr>\n<td>.=</td>\n<td>x.=y</td>\n<td>x=x.y</td>\n</tr>\n<tr>\n<td>%=</td>\n<td>x%=y</td>\n<td>x=x%y</td>\n</tr>\n</tbody>\n</table>\n**比较运算符**\n<table>\n<tbody>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>例子</th>\n</tr>\n<tr>\n<td>==</td>\n<td>is equal to</td>\n<td>5==8 returns false</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>is not equal</td>\n<td>5!=8 returns true</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>is greater than</td>\n<td>5&gt;8 returns false</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>is less than</td>\n<td>5&lt;8 returns true</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>is greater than or equal to</td>\n<td>5&gt;=8 returns false</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>is less than or equal to</td>\n<td>5&lt;=8 returns true</td>\n</tr>\n</tbody>\n</table>\n**逻辑运算符**\n<table>\n<tbody>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>例子</th>\n</tr>\n<tr>\n<td>&amp;&amp;</td>\n<td>and</td>\n<td>x=6\ny=3(x &lt; 10 &amp;&amp; y &gt; 1) returns true</td>\n</tr>\n<tr>\n<td>||</td>\n<td>or</td>\n<td>x=6\ny=3(x==5 || y==5) returns false</td>\n</tr>\n<tr>\n<td>!</td>\n<td>not</td>\n<td>x=6\ny=3!(x==y) returns true</td>\n</tr>\n</tbody>\n</table>\n&nbsp;\n\n内容比较基础，有编程经验的都知道哈，，不懂的自行google","mtime":1386290932000,"source":"_posts/【php基础篇】php运算符（六）.md"},"erhk2ccj0qvnuex0":{"_id":"erhk2ccj0qvnuex0","content":"title: \"【PHP数据库篇】PHP Database ODBC（32）\"\nid: 759\ndate: 2013-06-06 09:33:45\ntags: \ncategories: \n- PHP\n- 程序人生\n---\n\n**ODBC 是一种应用程序编程接口（Application Programming Interface，API），使我们有能力连接到某个数据源（比如一个 MS Access 数据库）。**\n\n## 创建 ODBC 连接\n\n通过一个 ODBC 连接，您可以连接到您的网络中的任何计算机上的任何数据库，只要 ODBC 连接是可用的。\n\n这是创建到达 MS Access 数据的 ODBC 连接的方法：\n\n1.  在控制面板中打开_管理工具_\n2.  双击其中的_数据源 (ODBC)_ 图标\n3.  选择系统 _DSN 选项卡_\n4.  点击系统 DSN 选项卡中的“_添加_”按钮\n5.  选择 _Microsoft Access Driver_。点击_完成_。\n6.  在下一个界面，点击“_选择_”来定位数据库。\n7.  为这个数据库取一个_数据源名 (DSN)_。\n8.  点击_确定_。\n\n## 连接到 ODBC\n\nodbc_connect() 函数用于连接到 ODBC 数据源。该函数有四个参数：数据源名、用户名、密码以及可选的指针类型参数。\n\nodbc_exec() 函数用于执行 SQL 语句。\n\n下面的例子创建了到达名为 northwind 的 DSN 的连接，没有用户名和密码。然后创建并执行一条 SQL 语句：\n\n[php]$conn=odbc_connect('northwind','','');\n$sql=&quot;SELECT * FROM customers&quot;; \n$rs=odbc_exec($conn,$sql);\n[/php]\n\n## 取回记录\n\nodbc_fetch_row() 函数用于从结果集中返回记录。如果能够返回行，则返回 true，否则返回 false。\n\n该函数有两个参数：ODBC 结果标识符和可选的行号：\n\n[php]odbc_fetch_row($rs)[/php]\n<div>\n\n## 从记录中取回字段\n\nodbc_result() 函数用于从记录中读取字段。该函数有两个参数：ODBC 结果标识符和字段编号或名称。\n\n下面的代码行从记录中返回第一个字段的值：\n\n[php]$compname=odbc_result($rs,1);&lt;/pre&gt;\nThe code line below returns the value of a field called &quot;CompanyName&quot;:\n&lt;pre&gt;$compname=odbc_result($rs,&quot;CompanyName&quot;);[/php]\n\n</div>\n<div>\n\n## 关闭 ODBC 连接\n\nodbc_close()函数用于关闭 ODBC 连接。\n\n[php]odbc_close($conn);[/php]\n\n</div>","mtime":1386290932000,"source":"_posts/【php数据库篇】php-database-odbc（32）.md"},"o7xenzt8amhji1jr":{"_id":"o7xenzt8amhji1jr","content":"title: \"【PHP数据库篇】PHP MySQL Insert Into（27）\"\nid: 743\ndate: 2013-06-06 08:54:32\ntags: \n- 数据库插入\ncategories: \n- PHP\n- 程序人生\n---\n\n## 向数据库表插入数据\n\nINSERT INTO 语句用于向数据库表添加新记录。\n\n### 语法\n\n[php]\n&lt;pre&gt;INSERT INTO table_name\nVALUES (value1, value2,....)\n[/php]\n\n您还可以规定希望在其中插入数据的列：\n\n[php]\n&lt;pre&gt;INSERT INTO table_name (column1, column2,...)\nVALUES (value1, value2,....)\n[/php]\n\n注释：SQL 语句对大小写不敏感。INSERT INTO 与 insert into 相同。\n\n为了让 PHP 执行该语句，我们必须使用 mysql_query() 函数。该函数用于向 MySQL 连接发送查询或命令。\n\n我们创建了一个名为 \"Persons\" 的表，有三个列：\"Firstname\", \"Lastname\" 以及 \"Age\"。我们将在本例中使用同样的表。下面的例子向 \"Persons\" 表添加了两个新记录：\n\n[php]\n\nmysql_query(&quot;insert into Persons(FirstName,LastName,Age)values('zhang','san',20)&quot;);\n mysql_query(&quot;insert into Persons(FirstName,LastName,Age)values('li','si',22)&quot;);\n\n[/php]\n\n## 把来自表单的数据插入数据库\n\n现在，我们创建一个 HTML 表单，这个表单可把新记录插入 \"Persons\" 表。\n\n这是这个 HTML 表单：\n\n[html]\n\n&lt;form action=&quot;mysql.php&quot; method=&quot;post&quot;&gt;\n FirstName:&lt;input type=&quot;text&quot; name=&quot;firstname&quot;/&gt;\n LastName:&lt;input type=&quot;text&quot; name=&quot;lastname&quot;/&gt;\n age:&lt;input type=&quot;text&quot; name=&quot;age&quot;/&gt;\n &lt;&lt;input type=&quot;submit&quot;/&gt;\n&lt;/form&gt;\n\n[/html]\n\n当用户点击上例中 HTML 表单中的提交按钮时，表单数据被发送到 \"mysql.php\"。\"mysql.php\" 文件连接数据库，并通过 $_POST 变量从表单取回值。然后，mysql_query() 函数执行 INSERT INTO 语句，一条新的记录会添加到数据库表中。\n\n[php]mysql_select_db(&quot;db_test&quot;,$con);\n\n$sql = &quot;insert into Persons(FirstName,LastName,Age)values(\n '$_POST[firstname]','$_POST[lastname]','$_POST[age]'\n )&quot;;\n if (!mysql_query($sql,$con)) {\n # code...\n die('错误:'.mysql_error());\n }\n echo &quot;成功插入一条数据！&quot;;\n\n[/php]","mtime":1386290932000,"source":"_posts/【php数据库篇】php-mysql-insert-into.md"},"5led8pklj0ma8fxv":{"_id":"5led8pklj0ma8fxv","content":"title: \"【PHP数据库篇】PHP MySQL Order By 关键词（30）\"\nid: 751\ndate: 2013-06-06 09:12:47\ntags: \n- order by 关键词\ncategories: \n- PHP\n- 程序人生\n---\n\n## ORDER BY 关键词\n\nORDER BY 关键词用于对记录集中的数据进行排序。\n\n### 语法\n\n[php]SELECT column_name(s)\nFROM table_name\nORDER BY column_name[/php]\n\n注释：SQL 对大小写不敏感。ORDER BY 与 order by 等效。\n\n## 升序或降序的排序\n\n如果您使用 ORDER BY 关键词，记录集的排序顺序默认是升序（1 在 9 之前，\"a\" 在 \"p\" 之前）。\n\n请使用 DESC 关键词来设定降序排序（9 在 1 之前，\"p\" 在 \"a\" 之前）：\n\n[php]SELECT column_name(s)\nFROM table_name\nORDER BY column_name DESC[/php]\n\n## 根据两列进行排序\n\n可以根据多个列进行排序。当按照多个列进行排序时，只有第一列相同时才使用第二列：\n\n[php]\nSELECT column_name(s)\nFROM table_name\nORDER BY column_name1, column_name2\n[/php]","mtime":1386290932000,"source":"_posts/【php数据库篇】php-mysql-order-by-关键词（30）.md"},"9epmstmvocpihutm":{"_id":"9epmstmvocpihutm","content":"title: \"【PHP数据库篇】PHP MySQL Select（28）\"\nid: 746\ndate: 2013-06-06 09:04:05\ntags: \n- PHP Select\ncategories: \n- PHP\n- 程序人生\n---\n\n## 从数据库表中选取数据\n\nSELECT 语句用于从数据库中选取数据。\n\n### 语法\n\n[php]SELECT column_name(s) FROM table_name[/php]\n\n注释：SQL 语句对大小写不敏感。SELECT 与 select 等效。\n\n为了让 PHP 执行上面的语句，我们必须使用 mysql_query() 函数。该函数用于向 MySQL 发送查询或命令。\n\n### 例子\n\n下面的例子选取存储在 \"Persons\" 表中的所有数据（* 字符选取表中所有数据）：\n\n[php]\n\n$result = mysql_query(&quot;select * from Persons&quot;);\n\nwhile ($row = mysql_fetch_array($result)) {\n # code...\n echo $row['FirstName'].&quot; &quot;.$row['LastName'].&quot; &quot;.$row['Age'];\n echo &quot;&lt;br/&gt;&quot;;\n }\n\n[/php]\n\n上面这个例子在 $result 变量中存放由 mysql_query() 函数返回的数据。接下来，我们使用 mysql_fetch_array() 函数以数组的形式从记录集返回第一行。每个随后对 mysql_fetch_array() 函数的调用都会返回记录集中的下一行。 while loop 语句会循环记录集中的所有记录。为了输出每行的值，我们使用了 PHP 的 $row 变量 ($row['FirstName'] 和 $row['LastName'])。\n\n## 在 HTML 表格中显示结果\n\n下面的例子选取的数据与上面的例子相同，但是将把数据显示在一个 HTML 表格中：\n\n[php]\n\n$result = mysql_query(&quot;select * from Persons&quot;);\n\necho &quot;&lt;table border='1'\n &lt;tr&gt;\n &lt;th&gt;FirstName&lt;/th&gt;\n &lt;th&gt;LastName&lt;/th&gt;\n &lt;th&gt;Age&lt;/th&gt;\n &lt;/tr&gt;&quot;;\n\nwhile ($row = mysql_fetch_array($result)) {\n # code...\n echo &quot;&lt;tr&gt;&quot;;\n echo &quot;&lt;td&gt;&quot;.$row['FirstName'].&quot;&lt;/td&gt;&quot;;\n echo &quot;&lt;td&gt;&quot;.$row['LastName'].&quot;&lt;/td&gt;&quot;;\n echo &quot;&lt;td&gt;&quot;.$row['Age'].&quot;&lt;/td&gt;&quot;;\n echo &quot;&lt;br/&gt;&quot;;\n }\n echo &quot;&lt;/table&gt;&quot;;\n\n[/php]","mtime":1386290932000,"source":"_posts/【php数据库篇】php-mysql-select（28）.md"},"pzv2el8szdnuw6eu":{"_id":"pzv2el8szdnuw6eu","content":"title: \"【PHP数据库篇】PHP MySQL Update and Delete From（31）\"\nid: 754\ndate: 2013-06-06 09:14:58\ntags: \ncategories: \n- PHP\n- 程序人生\n---\n\n## 更新数据库中的数据\n\nUPDATE 语句用于在数据库表中修改数据。\n\n### 语法\n\n[php]\nUPDATE table_name\nSET column_name = new_value\nWHERE column_name = some_value\n[/php]\n\n代码如下：\n\n[php]\nmysql_query(&quot;UPDATE Persons SET Age = '36'\nWHERE FirstName = 'Peter' AND LastName = 'Griffin'&quot;);\n[/php]\n\n## 删除数据库中的数据\n\nDELETE FROM 语句用于从数据库表中删除记录。\n\n### 语法\n\n[php]DELETE FROM table_name\nWHERE column_name = some_value\n[/php]\n\n代码如下：\n\n[php]mysql_query(&quot;DELETE FROM Persons WHERE LastName='Griffin'&quot;);[/php]","mtime":1386290932000,"source":"_posts/【php数据库篇】php-mysql-update（31）.md"},"kb4eti5qe3hyoiia":{"_id":"kb4eti5qe3hyoiia","content":"title: \"【PHP数据库篇】PHP MySQL Where 子句（29）\"\nid: 749\ndate: 2013-06-06 09:10:37\ntags: \n- where 字句\ncategories: \n- PHP\n- 程序人生\n---\n\n## WHERE 子句\n\n如需选取匹配指定条件的数据，请向 SELECT 语句添加 WHERE 子句。\n\n### 语法\n\n[php]\nSELECT column FROM table\nWHERE column operator value\n[/php]\n\n下面的运算符可与 WHERE 子句一起使用：\n<table>\n<tbody>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n<tr>\n<td>=</td>\n<td>等于</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不等于</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于或等于</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于或等于</td>\n</tr>\n<tr>\n<td>BETWEEN</td>\n<td>介于一个包含范围内</td>\n</tr>\n<tr>\n<td>LIKE</td>\n<td>搜索匹配的模式</td>\n</tr>\n</tbody>\n</table>\n注释：SQL 语句对大小写不敏感。WHERE 与 where 等效。\n\n为了让 PHP 执行上面的语句，我们必须使用 mysql_query() 函数。该函数用于向 SQL 连接发送查询和命令。\n\n[php]\n\n$result = mysql_query(&quot;select * from Persons where FirstName='zhang'&quot;);\n\n[/php]","mtime":1386290932000,"source":"_posts/【php数据库篇】php-mysql-where-子句（29）.md"},"2j52oguhc1c9ge4i":{"_id":"2j52oguhc1c9ge4i","content":"title: \"【PHP数据库篇】PHP MySQL 简介（24）\"\nid: 735\ndate: 2013-06-05 17:20:46\ntags: \ncategories: \n- PHP\n- 程序人生\n---\n\n**MySQL 是最流行的开源数据库服务器。**\n<div>\n\n## 什么是 MySQL？\n\nMySQL 是一种数据库。数据库定义了存储信息的结构。\n\n在数据库中，存在着一些表。类似 HTML 表格，数据库表含有行、列以及单元。\n\n在分类存储信息时，数据库非常有用。一个公司的数据库可能拥有这些表：\"Employees\", \"Products\", \"Customers\" 以及 \"Orders\"。\n\n</div>\n<div>\n\n## 数据库表\n\n数据库通常包含一个或多个表。每个表都一个名称（比如 \"Customers\" 或 \"Orders\"）。每个表包含带有数据的记录（行）。\n\n下面是一个名为 \"Persons\" 的表的例子：\n<table>\n<tbody>\n<tr>\n<th>LastName</th>\n<th>FirstName</th>\n<th>Address</th>\n<th>City</th>\n</tr>\n<tr>\n<td>Hansen</td>\n<td>Ola</td>\n<td>Timoteivn 10</td>\n<td>Sandnes</td>\n</tr>\n<tr>\n<td>Svendson</td>\n<td>Tove</td>\n<td>Borgvn 23</td>\n<td>Sandnes</td>\n</tr>\n<tr>\n<td>Pettersen</td>\n<td>Kari</td>\n<td>Storgt 20</td>\n<td>Stavanger</td>\n</tr>\n</tbody>\n</table>\n上面的表含有三个记录（每个记录是一个人）和四个列（LastName, FirstName, Address 以及 City）。\n\n</div>\n<div>\n\n## 查询\n\n查询是一种询问或请求。\n\n通过 MySQL，我们可以向数据库查询具体的信息，并得到返回的记录集。\n\n请看下面的查询：\n<pre>&lt;pre&gt;SELECT LastName FROM Persons&lt;/pre&gt;</pre>\n上面的查询选取了 Persons 表中 LastName 列的所有数据，并返回类似这样的记录集：\n<table>\n<tbody>\n<tr>\n<th>LastName</th>\n</tr>\n<tr>\n<td>Hansen</td>\n</tr>\n<tr>\n<td>Svendson</td>\n</tr>\n<tr>\n<td>Pettersen</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div>\n\n## 下载 MySQL 数据库\n\n如果您的 PHP 服务器没有 MySQL 数据库，可以在此下载 MySQL：[http://www.mysql.com/downloads/index.html](http://www.mysql.com/downloads/index.html \"MySQL  MySQL Downloads\")\n\n</div>\n<div>\n\n## Facts About MySQL Database\n\n关于 MySQL 的一点很棒的特性是，可以对它进行缩减，来支持嵌入的数据库应用程序。也许正因如此，许多人认为 MySQL 仅仅能处理中小型的系统。\n\n事实上，对于那些支持巨大数据和访问量的网站，MySQL 是事实上的标准数据库（比如 Friendster, Yahoo, Google）。这个地址提供了使用 MySQL 的公司的概览：[http://www.mysql.com/customers/](http://www.mysql.com/customers/ \"MySQL  MySQL Customers by Industry\")。\n\n</div>","mtime":1386290932000,"source":"_posts/【php数据库篇】php-mysql-简介（24）.md"},"cmeqjj8lef4gamcc":{"_id":"cmeqjj8lef4gamcc","content":"title: \"【PHP数据库篇】数据库连接（25）\"\nid: 738\ndate: 2013-06-06 08:28:25\ntags: \n- 数据库连接\ncategories: \n- PHP\n- 程序人生\n---\n\n## 连接到一个 MySQL 数据库\n\n在您能够访问并处理数据库中的数据之前，您必须创建到达数据库的连接。\n\n在 PHP 中，这个任务通过 mysql_connect() 函数完成。\n\n### 语法\n\n[php]mysql_connect(servername,username,password);[/php]\n<table>\n<tbody>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n<tr>\n<td>servername</td>\n<td>可选。规定要连接的服务器。默认是 \"localhost:3306\"。</td>\n</tr>\n<tr>\n<td>username</td>\n<td>可选。规定登录所使用的用户名。默认值是拥有服务器进程的用户的名称。</td>\n</tr>\n<tr>\n<td>password</td>\n<td>可选。规定登录所用的密码。默认是 \"\"。</td>\n</tr>\n</tbody>\n</table>\n注释：虽然还存在其他的参数，但上面列出了最重要的参数。请访问 W3School 提供的 [PHP MySQL 参考手册](http://www.w3school.com.cn/php/php_ref_mysql.asp \"PHP MySQL 函数\")，获得更多的细节信息。\n\n在下面的例子中，我们在一个变量中 ($con) 存放了在脚本中供稍后使用的连接。如果连接失败，将执行 \"die\" 部分：\n\n[php]\n\n&lt;?php\n\n$con = mysql_connect(&quot;127.0.0.1&quot;,&quot;root&quot;,&quot;&quot;);\n if (!$con) {\n # code...\n die(&quot;Could not connect:&quot;.mysql_error());\n }else\n {\n echo &quot;successed&quot;;\n }\n?&gt;\n\n[/php]\n\n## 关闭连接\n\n脚本一结束，就会关闭连接。如需提前关闭连接，请使用 mysql_close() 函数。\n\n[php]mysql_close($con);[/php]","mtime":1386290932000,"source":"_posts/【php数据库篇】数据库连接（25）.md"},"y2o15ngil8gx29we":{"_id":"y2o15ngil8gx29we","content":"title: \"【PHP面向对象篇】类与对象的基本概念(33)\"\nid: 770\ndate: 2013-06-06 11:01:43\ntags: \ncategories: \n- PHP\n- 程序人生\n---\n\n## 理解面向对象\n\n面向对象编程（Object Oriented Programming，OOP，面向对象程序设计）是一种计算机编程架构，OOP的一条基本原则是：计算机程序是由单个能够起到子程序作用的单元或对象组合而成，为了实现整体运算，每个对象都能够接收信息、处理数据和向其他对象发送消息。\n\n## 1.类与对象\n\n### 问题？\n\n<pre>小明家里养了2只小狗，1只白色，叫小白，今年1岁；1只黑色，叫小黑，今年2岁。\n请编写一个程序，当用户输入小狗的名字时候就显示小狗的详细信息，如名字，颜色，年龄等。\n如果没有查询到输入的小狗名字就显示错误信息。</pre>\n实例简单解决代码：\n\n[php]\n\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;\n&lt;?php\n class Dog\n {\n public $name;\n public $age;\n public $color;\n }\n\n $dog1 = new Dog();\n $dog1-&gt;name=&quot;小白&quot;;\n $dog1-&gt;age=1;\n $dog1-&gt;color=&quot;白色&quot;;\n\n $dog2 = new Dog();\n $dog2-&gt;name=&quot;小黑&quot;;\n $dog2-&gt;age=2;\n $dog2-&gt;color=&quot;黑色&quot;;\n $findName = &quot;小白&quot;;\n if($dog1-&gt;name==$findName)\n {\n echo $dog1-&gt;name.&quot;,&quot;.$dog1-&gt;age.&quot;,&quot;.$dog1-&gt;color.&quot;;&quot;;\n }\n?&gt;\n\n[/php]\n\n类与对象的关系就如模具和铸件的关系，类的实例化结果就是对象，对象的抽象就是类。类描述了一组有相同特性（属性）和相同行为（方法）的对象。在开发时，要先抽象类在用该类去创建对象，我们在程序中直接使用的是对象而不是类。\n\n### 什么是类？\n\n类是一个独立的程序单位，具有相同属性和服务的一组对象的集合。它为属于该类的所有对象提供了统一的抽象描述，其内部包括成员属性和服务的方法两个主要部分。\n\n### 什么是对象？\n\n客观世界里，所有的事物都是由对象和对象之间的联系组成的。对象是系统中用来描述客观事物的一个实体，它是构成系统的一个基本单位，一个对象就是由一组属性和有权对这些属性进行操作的一组服务的封装体。\n\n类其实就像我们现实世界事物分类一样，如车类，所有的车都归属于这个类，包括宝马、奔驰、保时捷。如人类，包括中国人，美国人，非洲人等。\n\n在程序设计中叶需要将一些相关的变量定义和函数声明为类，形成一个自定义的类型。通过这个类型可以创建多个实体，一个实体就是一个对象，每个对象都具有该类中定义的内容特性。\n\n开发一个面向对象的系统程序，就是把每个独立的功能模块抽象成类并实例化成对象，再由多个对象组成这个系统。这些对象之间都能够接受消息、处理数据和向其他对象发送信息等相互作用，就构成了面向对象的程序。\n\n### 如何抽象一个类？\n\n**1)类的声明**\n\n格式如下：\n\n[php]\n\n[修饰符] class 类名{\n\n类中成员;\n\n}[/php]\n\n类名和变量名还有函数名命名需要遵守PHP中自定义名称的命名规则。\n\n**2)成员属性**\n\n在类中直接声明变量就称为成员属性，可以在类中声明多个变量，即对象中有多个成员属性，每个变量都存储对象不同的属性信息。代码如下：\n\n[php]\n\nclass Person{\n\nvar $name;\n\nvar $age;\n\nvar $sex;\n\n}\n\n[/php]\n\n在上面的Person类中，我们可以看到变量前面多了一个关键字“var”来声明。声明变量是不需要任何关键字修饰，但是在类中声明成员属性时候，变量前面一定要关键字，如public、private、static等，关键字修饰的变量都有一定的意义，如果不需要特定意义的修饰就只好使用var关键字。\n\n**3)成员方法**\n在对象中需要声明一些可以操作本对象成员属性的一些方法，来完成对象的一些行为，在类中直接声明的函数就是成员方法，可以在类中声明多个函数，即对象中有多个成员方法。代码如下：\n\n[php]\nclass Person{\n      function say(){};\n      function eat($food){};\n      private function run(){};\n}\n[/php]\n\n对象就是把相关的属性和方法组织在一起形成一个集合。在声明类的时刻可以根据需求有选择的声明成员。用同样的方法可以声明你需要的类，只要能用属性和方法描述出来的事物都可以定义成类，然后实例化出对象为我们使用。\n\n### 通过类实例化对象\n\n面向对象程序的单位就是对象，但是对象又是通过类的实例出来的。所有同一个的对象可以接受相同的请求。\n\n**1)创建对象**\n\n将类实例化成对象非常简单，只要使用new关键字并在后面加上一个和类名同名的方法即可，格式如下：\n\n[php]$变量名 = new 类名([参数列表]);[/php]\n\n变量名是通过类所创建的一个对象的引用名称，后面通过这个引用来访问对象中的成员。new表明要创建一个新的对象，类名表示新对象的类型，而参数指定了类的构造方法用于初始化对象的值。代码如下：\n\n[php]\n\nclass Person{}\n\n$person1 = new Person();\n\n[/php]\n\n一个类可以实例化出多个对象，每个对象都是独立的。实例化的对象$person对象相当于开辟新的存储空间，具有独立性。\n\n**2)对象类型在内存中的分配**\n\n对象类型和整型、字符串等类型一样，也是PHP种的一种数据类型。都是在程序用于存储不同的类型数据使用，在程序运行时它的每部分内容都要先加载到内存中再被使用。首先了解下内存结构，逻辑上内存大体分为4段，分别是栈空间段、堆空间段、初始化数据段、代码段。程序中不同类型数据的声明会被存放在不同的内存段里面。\n\n栈空间段：空间小被CPU访问速度快，是用户存放程序中临时创建的变量。\n\n堆空间段：用于存放进程运行中被动态分配的内存段，大小不固定，可动态扩张或缩减，用于存储数据长度可变或占有内存较大的数据。如字符串、数组、对象等。\n\n数据段：用来存放可执行文件中以及初始化全局变量，存放程序静态分配的变量。\n\n代码段：用来存放可以执行的操作指令，就是说是可以执行程序在内存中的镜像。代码段禁止运行时非法修改，所有只读取不允许写入。函数就是存储在这个段内存中。\n\n对象类型的数据就是一种占用空间比较大的数据类型，并且是占用的空间不定长的数据类型，所有对象创建完成后被存放在堆内存中，但对象的引用名称是被存放在栈里面。程序在运行时栈内存中的数据时可以直接读取的，而堆内存中的数据时不允许直接存取，但是可以通过对象的引用名称访问对象中的成员。\n\n如：$person1 = new Person();等号右边是创建的真正对象实例，被存储在堆内存里面，等号坐标是对象的引用，被存放在栈内存中。\n\n**3)对象中成员的访问**\n\n对象中包含成员属性和成员方法，访问对象中的成员则包括成员属性的访问和成员方法的访问我们需要使用特殊的运算符号“-&gt;”来完成对象成员的访问。格式如下：\n\n[php]\n\n$引用名  = new 类名称([参数列表]);\n\n$引用名-&gt;成员属性=值;\n\necho $引用名-&gt;成员属性;\n\n$引用名-&gt;成员方法;\n\n[/php]\n\n**4)特殊的对象引用$this**\n\n【略】\n\n## 2.构造方法与析构方法\n\n与对象声明周期相关。构造方法是对象创建完后第一个被对象自动调用的方法，用来完成对象的初始化工作。析构方法是对象在销毁之前最好一个被对象自动调用的方法，用来完成一些对象在销毁前的清理工作。\n\n1）构造函数\n\n在每个声明的类中都有一个被称为构造方法的特殊成员方法，如果没有显式的声明它，类中都会默认创建一个没有参数并且内容为空的构造方法。如果显式声明了就不会默认创建。创建对象时，构造方法仅调用一次。\n\nPHP5中声明构造方法“__construct()”；格式如下：\n\n[php]\n\nfunction __construct([参数列表]){\n\n//方法体，通常用来对成员属性进行初始化赋值\n\n}\n\n[/php]\n\n在PHP中，同一个类中只能声明一个构造方法。原因是构造方法名称是固定的，PHP中不能声明同名的2个函数，所以就没有构造方法重载。\n\n2）析构函数\n\n析构是PHP5中新增加的内容。允许在销毁一个对象之前执行一些特定的操作，如关闭文件、释放结果等。\n\nPHP中有一种垃圾回收机制，当对象不能被访问时就会自动启动垃圾回收的程序，收回对象在堆中占用的内存空间，析构方法是在垃圾回收程序回收对象之前调用。格式如下：\n\n[php]\n\nfunction __destruct(){\n\n//方法体，通常用来完成一些在对象销毁前的潜力任务\n\n}\n\n[/php]\n\n&nbsp;","mtime":1386290932000,"source":"_posts/【php面向对象篇】类与对象的基本概念33.md"},"8twtxvi79aayuvrk":{"_id":"8twtxvi79aayuvrk","content":"title: \"【PHP数据篇】PHP MySQL 创建数据库和表（26）\"\nid: 740\ndate: 2013-06-06 08:39:33\ntags: \n- 创建数据库\n- 创建表\ncategories: \n- PHP\n- 程序人生\n---\n\n## 创建数据库\n\nCREATE DATABASE 语句用于在 MySQL 中创建数据库。\n\n### 语法\n\n[php]CREATE DATABASE database_name[/php]\n\n为了让 PHP 执行上面的语句，我们必须使用 mysql_query() 函数。此函数用于向 MySQL 连接发送查询或命令。\n\n[php]\n\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;\n&lt;?php\n\n$con = mysql_connect(&quot;127.0.0.1&quot;,&quot;root&quot;,&quot;&quot;);\n if (!$con) {\n # code...\n die(&quot;Could not connect:&quot;.mysql_error());\n }else\n {\n echo &quot;successed&quot;.&quot;&lt;br/&gt;&quot;;\n }\n\nif (mysql_query(&quot;create database db_test&quot;,$con)) {\n # code...\n echo &quot;数据库创建成功!&quot;.&quot;&lt;br/&gt;&quot;;\n }else{\n echo &quot;Error creating database:&quot;.mysql_error();\n }\n\nmysql_close($con);\n?&gt;\n\n[/php]\n\n## 创建表\n\nCREATE TABLE 用于在 MySQL 中创建数据库表。\n\n### 语法\n\n[pre]\n<pre>CREATE TABLE table_name\n(\ncolumn_name1 data_type,\ncolumn_name2 data_type,\ncolumn_name3 data_type,\n.......\n)\n[/pre]</pre>\n为了执行此命令，我必须向 mysql_query() 函数添加 CREATE TABLE 语句。\n\n[php]\n\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;\n&lt;?php\n\n$con = mysql_connect(&quot;127.0.0.1&quot;,&quot;root&quot;,&quot;&quot;);\n if (!$con) {\n # code...\n die(&quot;Could not connect:&quot;.mysql_error());\n }else\n {\n echo &quot;successed&quot;.&quot;&lt;br/&gt;&quot;;\n }\n\n// if (mysql_query(&quot;create database db_test&quot;,$con)) {\n // # code...\n // echo &quot;数据库创建成功!&quot;.&quot;&lt;br/&gt;&quot;;\n // }else{\n // echo &quot;Error creating database:&quot;.mysql_error();\n // }\n\nmysql_select_db(&quot;db_test&quot;,$con);\n $sql = &quot;create table Persons(\n FirstName varchar(15),\n LastName varchar(15),\n Age int\n )&quot;;\n mysql_query($sql,$con);\n\nmysql_close($con);\n?&gt;\n\n[/php]\n\n**重要事项：**<span style=\"color: #ff0000;\">在创建表之前，必须首先选择数据库。通过 mysql_select_db() 函数选取数据库。</span>\n\n注释：当您创建 varchar 类型的数据库字段时，必须规定该字段的最大长度，例如：varchar(15)。\n\n## MySQL 数据类型\n\n下面的可使用的各种 MySQL 数据类型：\n<table>\n<tbody>\n<tr>\n<th>数值类型</th>\n<th>描述</th>\n</tr>\n<tr>\n<td>\n\n*   int(size)\n*   smallint(size)\n*   tinyint(size)\n*   mediumint(size)\n*   bigint(size)\n</td>\n<td>仅支持整数。在 size 参数中规定数字的最大值。</td>\n</tr>\n<tr>\n<td>\n\n*   decimal(size,d)\n*   double(size,d)\n*   float(size,d)\n</td>\n<td>支持带有小数的数字。\n\n在 size 参数中规定数字的最大值。在 d 参数中规定小数点右侧的数字的最大值。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<tbody>\n<tr>\n<th>文本数据类型</th>\n<th>描述</th>\n</tr>\n<tr>\n<td>char(size)</td>\n<td>支持固定长度的字符串。（可包含字母、数字以及特殊符号）。\n\n在 size 参数中规定固定长度。</td>\n</tr>\n<tr>\n<td>varchar(size)</td>\n<td>支持可变长度的字符串。（可包含字母、数字以及特殊符号）。\n\n在 size 参数中规定最大长度。</td>\n</tr>\n<tr>\n<td>tinytext</td>\n<td>支持可变长度的字符串，最大长度是 255 个字符。</td>\n</tr>\n<tr>\n<td>\n\n*   text\n*   blob\n</td>\n<td>支持可变长度的字符串，最大长度是 65535 个字符。</td>\n</tr>\n<tr>\n<td>\n\n*   mediumtext\n*   mediumblob\n</td>\n<td>支持可变长度的字符串，最大长度是 16777215 个字符。</td>\n</tr>\n<tr>\n<td>\n\n*   longtext\n*   longblob\n</td>\n<td>支持可变长度的字符串，最大长度是 4294967295 个字符。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<tbody>\n<tr>\n<th>日期数据类型</th>\n<th>描述</th>\n</tr>\n<tr>\n<td>\n\n*   date(yyyy-mm-dd)\n*   datetime(yyyy-mm-dd hh:mm:ss)\n*   timestamp(yyyymmddhhmmss)\n*   time(hh:mm:ss)\n</td>\n<td>支持日期或时间</td>\n</tr>\n</tbody>\n</table>\n<table>\n<tbody>\n<tr>\n<th>杂项数据类型</th>\n<th>描述</th>\n</tr>\n<tr>\n<td>enum(value1,value2,ect)</td>\n<td>ENUM 是 ENUMERATED 列表的缩写。可以在括号中存放最多 65535 个值。</td>\n</tr>\n<tr>\n<td>set</td>\n<td>SET 与 ENUM 相似。但是，SET 可拥有最多 64 个列表项目，并可存放不止一个 choice</td>\n</tr>\n</tbody>\n</table>\n<div>\n\n## 主键和自动递增字段\n\n每个表都应有一个主键字段。\n\n主键用于对表中的行进行唯一标识。每个主键值在表中必须是唯一的。此外，主键字段不能为空，这是由于数据库引擎需要一个值来对记录进行定位。\n\n主键字段永远要被编入索引。这条规则没有例外。你必须对主键字段进行索引，这样数据库引擎才能快速定位给予该键值的行。\n\n下面的例子把 personID 字段设置为主键字段。主键字段通常是 ID 号，且通常使用 AUTO_INCREMENT 设置。AUTO_INCREMENT 会在新记录被添加时逐一增加该字段的值。要确保主键字段不为空，我们必须向该字段添加 NOT NULL 设置。\n\n</div>\n&nbsp;","mtime":1386290932000,"source":"_posts/【php数据篇】php-mysql-创建数据库和表（26）.md"},"pn997m72ihm5gqbc":{"_id":"pn997m72ihm5gqbc","content":"title: \"【PHP面向对象篇】面向对象编程三大特性（34）\"\nid: 789\ndate: 2013-06-06 15:47:19\ntags: \n- 三大特性\n- 多态性\n- 封装性\n- 继承性\n- 面向对象\ncategories: \n- PHP\n- 程序人生\n---\n\n## 封装\n\n封装性就是把对象的成员属性和成员方法结合成一个独立的相同的单位，并尽可能隐蔽对象的内部细节。包含2个含义：\n\n把对象的全部成员属性和全部成员方法结合在一起，形成一个不可分割的独立单位（即对象）。\n\n信息隐蔽，即尽可能隐蔽对象的内部细节，对外形成一个边界，只保留有限的对外接口使之与外部发生联系。\n\n**1)设置私有成员**\n\n只要在声明成员属性或成员方法时，使用private关键字修饰就实现了对成员的封装。封装后的成员在对象的外部不能被访问，但在对象内部的成员方法中可以访问到自己的对象内部封装的成员属性和被封装的成员方法。达到了对象成员保护的目的，只能是对象自己使用，其他人不可以访问自己的私有成员。即尽可能隐蔽对象的内部细节，对外形成一道屏障。\n\n实例代码：\n\n[php]\n\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\n&lt;!--?php  class Person  {  private $name;  private $sex;  private $age; function __construct($name=&quot;张三&quot;,$sex=&quot;男&quot;,$age=&quot;25&quot;)  {  $this---&gt;name = $name;\n $this-&gt;sex = $sex;\n $this-&gt;age = $age;\n }\n\nfunction run()\n {\n echo $this-&gt;name.&quot;在走路时先&quot;.$this-&gt;leftLeg().&quot;再&quot;.$this-&gt;rightLeg().&quot;\n&quot;;\n }\n\nprivate function leftLeg()\n {\n return &quot;迈左腿&quot;;\n }\n\nprivate function rightLeg()\n {\n return &quot;迈右腿&quot;;\n }\n }\n\n$person1 = new Person();\n $person1-&gt;run();\n $person1-&gt;name=&quot;李四&quot;;\n $person1-&gt;leftLeg();\n?&gt;\n\n[/php]\n\n上面的代码运行后会出现如下错误：\n\n[php]\n\nFatal error: Cannot access private property Person::$name in D:\\wamp\\www\\php\\person.php on line &lt;i&gt;34&lt;/i&gt;\n\nFatal error: Call to private method Person::leftLeg() from context '' in D:\\wamp\\www\\php\\person.php on line &lt;i&gt;35&lt;/i&gt;\n\n[/php]\n\n这是因为，我们使用private关键字将成员属性和成员方法封装成私有属性后，就不可以在对象的外部通过对象的引用直接访问，试图去访问私有成员将发生错误。\n\n**2)私有成员的访问**\n\n私有成员属性在对象内部的方法中可以访问，所以在对象中声明一个访问私有属性的方法，再把这个方法通过public关键字设置为公有的访问权限。如果成员方法没有加任何访问修饰符，默认就是public，在任何地方都可以访问。这样在对象外部就可以通过公有的方法作为访问接口，间接地访问对象内部私有成员。代码如下：\n\n[php]\n\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\n&lt;!--?php  class Person  {  private $name;  private $sex;  private $age; function __construct($name=&quot;张三&quot;,$sex=&quot;男&quot;,$age=&quot;25&quot;)  {  $this---&gt;name = $name;\n $this-&gt;sex = $sex;\n $this-&gt;age = $age;\n }\n\npublic function getName()\n {\n return $this-&gt;name;\n }\n\npublic function getSex()\n {\n return $this-&gt;sex;\n }\n\npublic function getAge()\n {\n if($this-&gt;age&gt;100)\n return $this-&gt;age-10;\n else\n return $this-&gt;age;\n }\n\npublic function setAge($age)\n {\n if($age&gt;120 || $age&lt;0)  return;  $this-&gt;age = $age;\n }\n\npublic function setSex($sex)\n {\n if($sex=&quot;男&quot;||$sex=&quot;女&quot;)\n $this-&gt;sex=$sex;\n }\n\nfunction say()\n {\n echo &quot;my name is :&quot;.$this-&gt;name.&quot;,性别:&quot;.$this-&gt;sex.&quot;,我的年龄:&quot;.$this-&gt;age.&quot;\n&quot;;\n }\n\n}\n\n$person1 = new Person(&quot;王五&quot;,&quot;男&quot;,23);\n echo $person1-&gt;getName().&quot;\n&quot;;\n // $person1-&gt;setSex(&quot;女&quot;);\n $person1-&gt;setAge(25);\n echo $person1-&gt;getSex().&quot;,&quot;.$person1-&gt;getAge().&quot;\n&quot;;\n $person1-&gt;say();\n\n?&gt;\n\n[/php]\n\n**3)__set()、__get()、__isset()、__unset()方法**\n\n一般来说，把类中的成员属性都定义为private，更符合现实的逻辑，能够更好的对类中的成员起到保护作用。但是对成员属性的读取和赋值操作时非常频繁的，如果在类中为每个私有的属性都定义可以在对象的外部获取和赋值的公有方法，是非常繁琐的。在PHP5.1以后的版本，预定义了\"__get()\"和\"__set(0\",来完成对所有私有属性都能够获取和赋值的操作，以及用来检查私有属性是否存在的方法“__isset()”和用来删除对象中私有属性的方法“__unset()”；\n\n魔术方法__set()声明格式：\n\n[php]void __set(string name,mixed value);[/php]\n\n该方法的作用是在程序运行过程中为私有的成员属性设置值，它不需要有任何返回值。但是需要2个参数，第一个参数需要传入在为私有属性设置值时的属性名，第二个参数则需要传入为属性设置的值，而且这方法不需要我们主动调用，可以在方法前面加上private修饰符，防止用户直接去调用。这个方法是在用户值为私用属性设置时时自动调用。\n\n实例代码：\n\n[php]\n\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\n&lt;!--?php  class Person  {  private $name;  private $sex;  private $age; function __construct($name=&quot;张三&quot;,$sex=&quot;男&quot;,$age=&quot;25&quot;)  {  $this---&gt;name = $name;\n $this-&gt;sex = $sex;\n $this-&gt;age = $age;\n }\n\npublic function __set($propertyName,$propertyValue)\n {\n if($propertyName==&quot;sex&quot;)\n {\n if(!($propertyValue==&quot;男&quot; || $propertyValue == &quot;女&quot;))\n return;\n }\n\nif ($propertyName == &quot;age&quot;)\n {\n # code...\n if ($propertyValue&gt;150 || $propertyValue &lt;0)  {  # code...  return;  }  }  //根据参数决定为那个属性被赋值，传入不同的成员属性名，赋上传入的相应的值  $this-&gt;$propertyName = $propertyValue;\n }\n\nfunction say()\n {\n echo &quot;my name is :&quot;.$this-&gt;name.&quot;,性别:&quot;.$this-&gt;sex.&quot;,我的年龄:&quot;.$this-&gt;age.&quot;\n&quot;;\n }\n\n}\n\n$person1 = new Person(&quot;王五&quot;,&quot;男&quot;,23);\n $person1-&gt;name = &quot;等十多个&quot;;\n $person1-&gt;sex=&quot;女&quot;;\n $person1-&gt;age=26;\n $person1-&gt;say();\n\n?&gt;\n[/php]\n\n魔术方法__get()声明格式：\n\n[php]mixed __get(string name);[/php]\n\n该方法作用是在程序运行过程中，通过它可以在对象的外部获取私有成员属性的值。必须有一个参数，传入在获取私用属性值时的属性名，并返回一个值，是在这个方法处理后的运行对象外部使用的值。\n\n程序实例：\n\n[php]&lt;/pre&gt;\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;\n&lt;!--?php  class Person  {  private $name;  private $sex;  private $age; function __construct($name=&quot;张三&quot;,$sex=&quot;男&quot;,$age=&quot;25&quot;)  {  $this---&gt;name = $name;\n $this-&gt;sex = $sex;\n $this-&gt;age = $age;\n }\n\npublic function __get($propertyName)\n {\n if($propertyName==&quot;sex&quot;)\n {\n return $this-&gt;sex;\n }else if ($propertyName == &quot;age&quot;)\n {\n if ($this-&gt;age&gt;30)\n {\n return $this-&gt;age-10;\n }else\n {\n return $this-&gt;$propertyName;\n }\n }else\n {\n return $this-&gt;$propertyName;\n }\n }\n\npublic function __set($propertyName,$propertyValue)\n {\n if($propertyName==&quot;sex&quot;)\n {\n if(!($propertyValue==&quot;男&quot; || $propertyValue == &quot;女&quot;))\n return;\n }\n\nif ($propertyName == &quot;age&quot;)\n {\n # code...\n if ($propertyValue&gt;150 || $propertyValue &lt;0) { # code... return; } } //根据参数决定为那个属性被赋值，传入不同的成员属性名，赋上传入的相应的值 $this-&gt;$propertyName = $propertyValue;\n }\n\nfunction say()\n {\n echo &quot;my name is :&quot;.$this-&gt;name.&quot;,性别:&quot;.$this-&gt;sex.&quot;,我的年龄:&quot;.$this-&gt;age.&quot;\n&quot;;\n }\n\n}\n\n$person1 = new Person(&quot;王五&quot;,&quot;男&quot;,23);\n $person1-&gt;name = &quot;等十多个&quot;;\n $person1-&gt;sex=&quot;女&quot;;\n $person1-&gt;age=26;\n $person1-&gt;say();\n\necho &quot;名字：&quot;.$person1-&gt;name.&quot;\n&quot;;\n echo &quot;性别:&quot;.$person1-&gt;sex.&quot;\n&quot;;\n echo &quot;年龄:&quot;.$person1-&gt;age.&quot;\n&quot;;\n?&gt;\n&lt;pre&gt;[/php]\n\n魔术方法__isset()和__unset()\n\n声明格式：\nbool __isset(string name)；\n类中添加此方法，在对象外部使用isset方法测定对象中的成员时，就会自动调用对象中的__isset()方法，间接地帮助我们完成对对象中的私有成员属性的测定。\nvoid __unset(string name);\nunset()函数作用是删除指定的变量，参数为要删除的变量的名称。也可以用使用这个函数在对象外部删除对象中的成员属性。\n\n## ","mtime":1386290932000,"source":"_posts/【php面向对象篇】面向对象编程三大特性（34）.md"},"7u9cyuzuzgn69lbp":{"_id":"7u9cyuzuzgn69lbp","content":"title: \"【PHP面向对象篇】面向对象编程三大特性（36）\"\nid: 826\ndate: 2013-06-08 10:04:16\ntags: \n- 多态性\n- 面向对象\ncategories: \n- PHP\n- 程序人生\n---\n\n## 抽象方法和抽象类\n\n在OOP语言中，一个类可以有一个或者多个子类，每个类都至少有一个公有方法作为外部代码访问它的接口。而抽象方法就是为了方便继承而引入的。\n\n抽象方法就是没有方法体的方法，所谓没有方法体是指在方法声明时没有花括号及其中的内容，而是在声明方法时直接在方法名后加上分号结束。抽象方法在声明时还要使用关键字abstract来修饰。声明格式如下：\n\n[php]absrtace function fun1();[/php]\n\n只要在声明类时有一个方法是抽象方法，那么这个类就是抽象类。抽象类中可以有不少抽象的成员方法和属性，但访问权限不能使用private关键字修饰为私有。\n\n抽象类是个“半成品”类，在抽象类中有没有被实现的抽象方法，所有抽象类是不能被实例化，即无法创建对象也无法直接使用。抽象类是子类的公共接口，将它的操作交给子类去实现，抽象类作为子类的重载模板使用。子类继承抽象类后就必须把抽象类中的抽象方法按照子类自己的需要去实现。子类必须把抽象类的抽象方法全部实现，不然子类还是属于抽象类的。\n\n## 接口技术\n\nPHP属于单继承。如果生命的新类继承抽象类实现模板以后，就不能有其他父类。PHP引入接口，接口是一种特殊的抽象类。接口中声明的方法必须都是抽象方法，不能声明变量，只能用const声明常量，且接口中的所有成员都必须是public权限。\n\n示例代码：\n\n[php]\n\ninterface 接口方法\n\n{\n\n//常量成员\n\n//抽象方法\n\n}\n\n[/php]\n\n通过使用extends关键字实现接口之间的扩展。通过类去继承接口需要使用implements关键字来实现。一个类只能有一个父类，但可以有多个接口。\n\n## 多态性\n\n程序能够处理多种类型对象的能力。\n\n貌似没得说了。。。。。。。。","mtime":1386290932000,"source":"_posts/【php面向对象篇】面向对象编程三大特性（36）.md"},"on6q80ohesas5yvg":{"_id":"on6q80ohesas5yvg","content":"title: \"【PHP面向对象篇】面向对象编程三大特性（35）\"\nid: 822\ndate: 2013-06-08 09:44:59\ntags: \n- 继承\ncategories: \n- PHP\n- 程序人生\n---\n\n## 继承\n\n继承，指的是建立一个新的派生类，从先前定义的类中继承数据和函数，而且可以重新定义或加进新数据和函数，从而建立了类的层次或等级关系。通过继承机制，可以利用已有的数据类型来定义新的数据类型。\n\n以及存在的用来派生新类的类称为基类，或父类或超类。以及存在的类派生出的新类称为派生类或子类。简单点继承性就是通过子类对已经存在的父类进行功能扩展。\n\n在C++中，一个派生类可以从一个或多个基类中派生。PHP和JAVA只能从一个基类中派生，称为单继承，即一个父类可以有多个子类。\n\n实例代码\n\n[php]\n\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;\n&lt;?php\n class Person\n {\n var $name;\n var $sex;\n var $age;\n\nfunction __construct($name=&quot;张三&quot;,$sex=&quot;男&quot;,$age=&quot;25&quot;)\n {\n $this-&gt;name = $name;\n $this-&gt;sex = $sex;\n $this-&gt;age = $age;\n }\n\nfunction say()\n {\n echo &quot;my name is :&quot;.$this-&gt;name.&quot;,性别:&quot;.$this-&gt;sex.&quot;,我的年龄:&quot;.$this-&gt;age.&quot;&lt;br/&gt;&quot;;\n }\n\nfunction run()\n {\n echo $this-&gt;name.&quot;正在走路！&lt;br&gt;&quot;;\n }\n\n}\n\nclass Student extends Person\n {\n var $school;\n function study()\n {\n echo $this-&gt;name.&quot;正在&quot;.$this-&gt;school.&quot;学习&lt;br&gt;&quot;;\n }\n }\n\nclass Teacher extends Person\n {\n var $wage;\n function teaching()\n {\n echo $this-&gt;name.&quot;正在&quot;.$this-&gt;wage.&quot;教书&lt;br&gt;&quot;;\n }\n }\n\n $stu = new Student(&quot;张三&quot;,&quot;男&quot;,25);\n $tec = new Teacher(&quot;王莹&quot;,&quot;女&quot;,35);\n\n$stu-&gt;school=&quot;厦门大学&quot;;\n $stu-&gt;say();\n $stu-&gt;study();\n\n$tec-&gt;wage=&quot;营业部&quot;;\n $tec-&gt;teaching();\n?&gt;\n\n[/php]\n\n通过类的继承性可以简化对象、类的创建工作量，增加代码的可重用性。\n\n【子类中重载父类的方法】\n\n在PHP中不能定义重名的函数，也包括不恩能够子啊同一个类中定义重名的方法，所有也就没有方法重载。但在子类中可以定义和父类同名的方法，因为父类的方法已经在子类中存在，这样子类中就可以把从父类继承过来的方法重写。\n\n代码示例\n\n[php]\n\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;\n&lt;?php\n class Person\n {\n protected $name;\n protected $sex;\n protected $age;\n\nfunction __construct($name=&quot;张三&quot;,$sex=&quot;男&quot;,$age=&quot;25&quot;)\n {\n $this-&gt;name = $name;\n $this-&gt;sex = $sex;\n $this-&gt;age = $age;\n }\n\n// public function __get($propertyName)\n // {\n // if($propertyName==&quot;sex&quot;)\n // {\n // return $this-&gt;sex;\n // }else if ($propertyName == &quot;age&quot;)\n // {\n // if ($this-&gt;age&gt;30)\n // {\n // return $this-&gt;age-10;\n // }else\n // {\n // return $this-&gt;$propertyName;\n // }\n // }else\n // {\n // return $this-&gt;$propertyName;\n // }\n // }\n\n// public function __set($propertyName,$propertyValue)\n // {\n // if($propertyName==&quot;sex&quot;)\n // {\n // if(!($propertyValue==&quot;男&quot; || $propertyValue == &quot;女&quot;))\n // return;\n // }\n\n// if ($propertyName == &quot;age&quot;)\n // {\n // # code...\n // if ($propertyValue&gt;150 || $propertyValue &lt;0)\n // {\n // # code...\n // return;\n // }\n // }\n // //根据参数决定为那个属性被赋值，传入不同的成员属性名，赋上传入的相应的值\n // $this-&gt;$propertyName = $propertyValue;\n // }\n\n// public function __isset($propertyName)\n // {\n // if ($propertyName == &quot;name&quot;) {\n // # code...\n // return false;\n // return isset($this-&gt;$propertyName);\n // }\n // }\n\n// public function __unset($propertyName)\n // {\n // if ($propertyName == &quot;name&quot;) {\n // # code...\n // return;\n // }\n // unset($this-&gt;$propertyName);\n // }\n\nfunction say()\n {\n echo &quot;my name is :&quot;.$this-&gt;name.&quot;,性别:&quot;.$this-&gt;sex.&quot;,我的年龄:&quot;.$this-&gt;age.&quot;&lt;br/&gt;&quot;;\n }\n\n}\n\nclass Student extends Person\n {\n var $school;\n //覆盖父类的构造方法\n function __construct($name=&quot;&quot;,$sex=&quot;女&quot;,$age=25,$school=&quot;厦门大学&quot;)\n {\n $this-&gt;name = $name;\n $this-&gt;sex = $sex;\n $this-&gt;age = $age;\n $this-&gt;school = $school;\n }\n\nfunction study()\n {\n echo $this-&gt;name.&quot;正在&quot;.$this-&gt;school.&quot;学习&lt;br&gt;&quot;;\n }\n\nfunction say()\n {\n echo &quot;我们的名字叫：&quot;.$this-&gt;name.&quot;,性别：&quot;.$this-&gt;sex.&quot;,年龄：&quot;.$this-&gt;age.&quot;,在&quot;.$this-&gt;school.&quot;上学。&quot;;\n }\n\n}\n\n$stu = new Student(&quot;王莹&quot;,&quot;男&quot;,35);\n\n$stu-&gt;school=&quot;厦门大学&quot;;\n $stu-&gt;say();\n $stu-&gt;study();\n\n?&gt;\n\n[/php]\n\n上面的代码，都是将父类被覆盖的方法中原有的代码重写一次，并在此基础上多添加一些内容。如果构造方法和定义的方法有很多条代码，而且在重载时也需要保留原有功能的同时多添加新功能，还按上面方式非常繁琐。\n\nPHP中提供了在子类重载的方法中调用父类中被覆盖的功能。这样子类重写的时候直接使用父类继承过来并被覆盖的方法，然后在添加新佛那个呢。调用格式是“parent::方法名”在子类的重载方法中调用父类中被它覆盖的方法。\n修改后代码如下：\n\n[php]&lt;/pre&gt;\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;\n&lt;?php\n class Person\n {\n protected $name;\n protected $sex;\n protected $age;\n\nfunction __construct($name=&quot;张三&quot;,$sex=&quot;男&quot;,$age=&quot;25&quot;)\n {\n $this-&gt;name = $name;\n $this-&gt;sex = $sex;\n $this-&gt;age = $age;\n }\n\n// public function __get($propertyName)\n // {\n // if($propertyName==&quot;sex&quot;)\n // {\n // return $this-&gt;sex;\n // }else if ($propertyName == &quot;age&quot;)\n // {\n // if ($this-&gt;age&gt;30)\n // {\n // return $this-&gt;age-10;\n // }else\n // {\n // return $this-&gt;$propertyName;\n // }\n // }else\n // {\n // return $this-&gt;$propertyName;\n // }\n // }\n\n// public function __set($propertyName,$propertyValue)\n // {\n // if($propertyName==&quot;sex&quot;)\n // {\n // if(!($propertyValue==&quot;男&quot; || $propertyValue == &quot;女&quot;))\n // return;\n // }\n\n// if ($propertyName == &quot;age&quot;)\n // {\n // # code...\n // if ($propertyValue&gt;150 || $propertyValue &lt;0)\n // {\n // # code...\n // return;\n // }\n // }\n // //根据参数决定为那个属性被赋值，传入不同的成员属性名，赋上传入的相应的值\n // $this-&gt;$propertyName = $propertyValue;\n // }\n\n// public function __isset($propertyName)\n // {\n // if ($propertyName == &quot;name&quot;) {\n // # code...\n // return false;\n // return isset($this-&gt;$propertyName);\n // }\n // }\n\n// public function __unset($propertyName)\n // {\n // if ($propertyName == &quot;name&quot;) {\n // # code...\n // return;\n // }\n // unset($this-&gt;$propertyName);\n // }\n\nfunction say()\n {\n echo &quot;my name is :&quot;.$this-&gt;name.&quot;,性别:&quot;.$this-&gt;sex.&quot;,我的年龄:&quot;.$this-&gt;age.&quot;&lt;br/&gt;&quot;;\n }\n\n}\n\nclass Student extends Person\n {\n var $school;\n //覆盖父类的构造方法\n function __construct($name=&quot;&quot;,$sex=&quot;女&quot;,$age=25,$school=&quot;厦门大学&quot;)\n {\n // $this-&gt;name = $name;\n // $this-&gt;sex = $sex;\n // $this-&gt;age = $age;\n parent::__construct($name,$sex,$age);\n $this-&gt;school = $school;\n }\n\nfunction study()\n {\n echo $this-&gt;name.&quot;正在&quot;.$this-&gt;school.&quot;学习&lt;br&gt;&quot;;\n }\n\nfunction say()\n {\n // echo &quot;我们的名字叫：&quot;.$this-&gt;name.&quot;,性别：&quot;.$this-&gt;sex.&quot;,年龄：&quot;.$this-&gt;age;\n parent::say();\n echo &quot;在&quot;.$this-&gt;school.&quot;上学。&quot;;\n }\n\n}\n\n$stu = new Student(&quot;王莹&quot;,&quot;男&quot;,35);\n\n$stu-&gt;school=&quot;厦门大学&quot;;\n $stu-&gt;say();\n $stu-&gt;study();\n\n?&gt;\n&lt;pre&gt;[/php]\n\n**final关键字的应用**\n\nPHP5新增的final关键字。其作用是：\n使用final标识的类不能被继承；\n在类中使用final标识的成员方法，在子类中不能被覆盖。\n\n**static和const关键字的运用**\n\n使用static关键字可以将类中的成员标识为静态，可以用来标识成员属性和方法。例如：在Person类中有一个￥country = ‘china’的成员属性，任何一个person类的对象都会用于一份属于自己的￥country属性，对象之间不会干扰。而static成员作为整个类的属性存在，将￥contry属性使用static关键字婊子，则static成员总是唯一存在，多个对象之间共享。\n\n类中的静态成员是不需要对象而使用类名来直接访问，格式如下：\n\n[php]\n类名::静态成员属性名;\n类名::静态成员方法名();\n[/php]\n\n在类中声明的成员方法中，也可以使用“self”来访问其静态成员。因为静态成员属于类，而不属于任何对象，所有不能使用￥this来引用。PHP提供self关键字就是在类的成员方法中来代本类的关键字；\n格式如下：\n\n[php]\nself::静态成员属性名;\nself::静态成员方法名();\n[/php]\n\n如果在类的外部访问类中的静态成员，可以使用对象引用或使用类名访问，但通常使用类名访问。如果在类内部的成员方法中访问其他的静态成员，通常使用self形式去访问，最后不要直接使用类名称。实例代码如下：\n\n[php]&lt;/pre&gt;\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;\n&lt;?php\n class MyTest\n {\n static $num;// 声明静态成员属性num\n\nfunction __construct()\n {\n self::$num++;//使用self访问静态成员num\n }\n\nstatic function getNum()\n {\n return self::$num;//在方法中使用self访问静态成员并返回\n }\n }\n\nMyTest::$num = 10;//在类外贸使用类名访问类中的静态成员，并初始化\n\n$my1 = new MyTest();\n $my2 = new MyTest();\n $my3 = new MyTest();\n\necho MyTest::getNum(); //在类的外面使用类名访问类中的静态成员方法\n echo $my3-&gt;getNum();//也可以使用对象访问。推动使用类名访问\n?&gt;\n&lt;pre&gt;[/php]\n\n使用静态方法时刻需要注意，在静态方法中只能访问静态成员，非静态成员必须通过对象引用才可以访问，通常使用$this完成。静态的方法在对象不存在的情况下也可以使用类名访问，没有对象也就没有$this引用，没有$this引用就不能访问类中的非静态成员，但是可以使用类名或self在非晶态方法中访问静态成员。\n\nconst关键字\n\n在PHP中定义常量是通过调研define()函数来完成的，但要将类中的成员属性定义为常量则只能使用const关键字。访问方法和上面一样，直接看实力代码：\n\n[php]&lt;/pre&gt;\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;\n&lt;?php\n class MyTest\n {\n const CONSTANT ='Hello';\n\nfunction showConstant()\n {\n echo self::CONSTANT.&quot;&lt;br/&gt;&quot;;\n }\n }\n\necho MyTest::CONSTANT.&quot;&lt;br/&gt;&quot;;\n // $class = new MyTest();\n // $class -&gt;showConstant();\n?&gt;\n&lt;pre&gt;[/php]\n\n**克隆对象**\n\nPHP5中的对象模型是通过引用来调用对象，有时候需要建立对象副本，改变原来对象时不希望影响副本。如果使用new关键字比较麻烦。PHP中可以根据现有的对象克隆出一个完全一样的对象，克隆后互不干扰。使用clone关键字。\n\n如：$p1 = clone $p2;\n\n**自动加载类**\n\n在设计面向对象程序开发时，通常为每个类的定义都单独建立一个php源文件。但你尝试使用一个未定义的类时，PHP会报告一个致命错误。可以使用include包含一个类所在的源文件。如果包含的类太多，头文件写太多，容易出错。\n\nPHP提供了类的自动加载功能，可以节省编程时间。当你尝试使用一个PHP没有组织到的类时，就会寻找一个__autoload()全局函数。如果函数存在，PHP会用一个参数来调研它，参数即类的名称。\n\nclass_User.php\n\n[php]\n\n&lt;?php\n class User\n {\n function Test()\n {\n echo &quot;仅供测试！&quot;;\n }\n }\n?&gt;\n\n[/php]\n\n测试类的代码：\n\n[php]\n\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;\n&lt;?php\n function __autoload($className)\n {\n include(&quot;class_&quot;.ucfirst($className).&quot;.php&quot;);\n }\n\n$object = new User();\n $object-&gt;Test();\n?&gt;\n\n[/php]\n\n**对象串行化**\n\n对象也是一种在内存中存储的数据类型，生命周期是随着生成该对象的程序的终止而终止。有时候可能需要将对象的状态保存下来，需要的时候再将对象恢复。对象通过写出描述自己状态的数值来记录自己，这个过程就叫对象的串行化(Serialization）。串行化就是把整个对象转换为二进制字符串。有2中情况，我们必须把对象串行化。\n\n*   对象需要在网络中传输，串行化后在网络中传输；\n*   对象须有持久保存时，串行化后写入文件或数据库；\n使用serialize()函数来串行化一个对象，把对象转化为二进制的字符串。serialize()函数需要一个参数就是对象引用名，返回值是对象呗串行化后的字符串。\n\nUSer类代码：\n\n[php]\n\n&lt;?php\n class User\n {\n private $name;\n private $sex;\n private $age;\n\nfunction __construct($name=&quot;&quot;,$sex=&quot;&quot;,$age=&quot;&quot;)\n {\n $this-&gt;name = $name;\n $this-&gt;sex = $sex;\n $this-&gt;age = $age;\n }\n\nfunction say()\n {\n echo &quot;my name is :&quot;.$this-&gt;name;\n }\n }\n?&gt;\n\n[/php]\n\n串行化类代码：\n\n[php]\n\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;\n&lt;?php\n function __autoload($className)\n {\n include(&quot;class_&quot;.ucfirst($className).&quot;.php&quot;);\n }\n\n // require &quot;class_User.php&quot;;\n\n$user = new User(&quot;张三&quot;,&quot;男&quot;,25); //创建对象\n $user_string = serialize($user); //串行化，返回字符串对象\n file_put_contents(&quot;file.txt&quot;, $user_string); //将返回的字符串保存到文件\n?&gt;\n\n[/php]\n\n串行化得到结果：\n\n[php]\n\nO:4:&quot;User&quot;:3:{s:10:&quot; User name&quot;;s:6:&quot;张三&quot;;s:9:&quot; User sex&quot;;s:3:&quot;男&quot;;s:9:&quot; User age&quot;;i:25;}\n\n[/php]\n\n如果需要用到这个对象，通过反串行函数unserialize()函数将保存的字符串反串行成对象即可；\n\n代码如下：\n\n[php]\n\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;\n&lt;?php\n function __autoload($className)\n {\n include(&quot;class_&quot;.ucfirst($className).&quot;.php&quot;);\n }\n\n$user_string = file_get_contents(&quot;file.txt&quot;);\n $user = unserialize($user_string);\n $user-&gt;say();\n?&gt;\n\n[/php]\n\n上述代码成功调用到对象中的say方法，说明反串行化对象成功。\n\n在PHP5中还有2个模式方法__sleep()和__wakeup()可以使用。在调用serialize（）函数将对象串行化时，会自动调用对象中的__sleep()方法，用来将对象中的部分成员函数串行。调用unserialize（）函数反串行化对象时，则自动调用对象中的__wakeup()方法，用来在二进制串重新组成一个对象时，为新的对象中的成员属性重新初始化。\n\n__sleep()函数不需要接受任何参数，返回一个数组，数组中包含需要串行化的属性。未被包含在数组中的属性将在串行化时被忽略。\n\n实例代码：\n\n[php]\n\n&lt;?php\n class User\n {\n private $name;\n private $sex;\n private $age;\n\nfunction __construct($name=&quot;&quot;,$sex=&quot;&quot;,$age=&quot;&quot;)\n {\n $this-&gt;name = $name;\n $this-&gt;sex = $sex;\n $this-&gt;age = $age;\n }\n\nfunction say()\n {\n echo &quot;my name is :&quot;.$this-&gt;name;\n }\n\nfunction __sleep()\n {\n $arr = array(&quot;name&quot;,&quot;age&quot;);\n return($arr);\n }\n\nfunction __wakeup()\n {\n $this-&gt;age=50;\n }\n }\n?&gt;\n\n[/php]\n[php]\n\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;\n&lt;?php\n function __autoload($className)\n {\n include(&quot;class_&quot;.ucfirst($className).&quot;.php&quot;);\n }\n\n // require &quot;class_User.php&quot;;\n\n$user = new User(&quot;张三&quot;,&quot;男&quot;,25); //创建对象\n $user_string = serialize($user); //串行化，返回字符串对象\n file_put_contents(&quot;file.txt&quot;, $user_string); //将返回的字符串保存到文件\n echo $user_string.&quot;&lt;br/&gt;&quot;;\n\n?&gt;\n\n[/php]\n\n输出结果：\n\n[php] O:4:&quot;User&quot;:2:{s:10:&quot;Username&quot;;s:6:&quot;张三&quot;;s:9:&quot;Userage&quot;;i:25;}[/php]\n\n## 多态","mtime":1386290932000,"source":"_posts/【php面向对象篇】面向对象编程三大特性（35）.md"},"sd74byjca3rxba0f":{"_id":"sd74byjca3rxba0f","content":"title: \"分享8年开发经验，浅谈程序员职业规划\"\nid: 926\ndate: 2013-09-18 11:54:56\ntags: \n- 开发经验\n- 程序员\n- 职业规划\ncategories: \n- 程序人生\n---\n\n在中国有很多人都认为IT行业是吃青春饭的，如果过了30岁就很难有机会再发展下去！其实现实并不是这样子的，在下从事.NET及JAVA方面的开发的也有8年的时间了，在这里在下想凭借自己的亲身经历，与大家一起探讨一下。\n\n**明确入行的目的**\n\n很多人干IT这一行都冲着“收入高”这一点的，因为只要学会一点HTML、DIV+CSS，要做一个页面开发人员并不是一件难事，而且做一个页面开发人员更容易找到工作，收入比普通的工作还要高一些，所以成为了很多高校毕业生的选择。如果您只是抱着这样一个心态来入行的话，那阁下可真的要小心。因为干IT这一行竞争本来就比较激烈，特别是页面设计这方面，能够开发的人很多，所以为了节省成本在大部分公司都会在需要的时候才招聘这类人员，在没有订单的时候一些小公司还可能找各类的借口或者以降薪的手段去开除这类员工。而在招聘信息上常常会看到“招聘页面设计师，条件：30岁以下……欢迎应界毕业生前来应聘”这样一条，因为这一类工员对技术上的要求并不高，找应界生可以节约成本。所以在下觉得“IT行业是吃青春饭的”这句话只是对着以上这类人所说的，如果阁下缺乏“进取之心”，而只抱着“收入高，容易找工作”这样的态度而入行，那“IT行业是吃青春饭”将会应验了。\n\n**选择合适的工具**\n\nJAVA、C#、PHP、C++、VB……10多种热门的开发语言，哪一种最有发展潜力呢？其实开发语言只不过是一个工具，“与其分散进攻，不如全力一击”，无论是哪一种开发语言，只要您全力地去学习，到有了一定的熟悉程度的时候，要学习另一种的语言也是轻而易举的事情。开发语言主要分为三大类：\n\n**1\\. 网络开发**\n\n现在网络已经成为世界通讯的一座桥梁，好像Javascript、PHP、Ruby这几类开发语言大部分是用作网络开发方面\n\n**2\\. 企业软件开发**\n\nJAVA、C#、VB这几类开发语言都实现了面向对象开发的目标，更多时候用于企业系统的开发\n\n**3\\. 系统软件**\n\nC语言、C++、Object-C这些软件更多是用在系统软件开发，嵌入式开发的方面。\n\n当然，这分类不是绝对，像JAVA、C#、VB很多时候也用于动态网站的开发。在很开发项目都会使用集成开发的方式，同一个项目里面使用多种开发语言，各展所长，同步开发。但所以在刚入门的时候，建议您先为自己选择一种合适的开发工具，“专注地投入学习，全力一击”。\n\n**明确发展方向**\n\n当您对某种开发语言已经有了一定的了解，开始觉得自己如同“行尸走肉”，成为一个开发工具的时候，那您就应该要明确一下自己的发展方向了。\n\n平常在公司，您可以看到做UI层的开发人员大多数都有20多岁，他们充满干劲，而且没有家庭负担，在两年前ASP.NET MVC 、Silverlight等刚出现的时候，他们可以在晚上回家的时候买几本书或者直接上网看看，研究三五个星期以后，对需要用到技术就已经有一定的了解了。而年过30的人多数是已经成了家了，他们每天9：00点上班唯一的希望就是快些到6：00点，能回家吃饭。吃完饭只想陪孩子玩一下，看看孩子的功课，对新增的技术缺乏了学习的欲望。所以很多接近30岁的程序员都有着一种逼迫感（包括30岁时候的我自己），再过几年应该怎么办？这时候，您就更应该明确一下目标，努力向自己的发展方向前进了。归纳一下，可从下面几项里选择适合自己的一条道路：\n\n**1\\. 从技术向业务过渡**\n\n在国外，很多发达国家都很重视人才，一个高级的程序员与一个Project Manager收入相差一般不超过15%。（注：关于收入差距，请参见伯乐在线报导的这篇资讯《[2011年美国IT从业人员的薪资调查](http://blog.jobbole.com/4851/)》，有的甚至超过项目经理。）但中国是世界上人口最多的国家，国内人才众多，所以人才滥用的情况经常可以看到。一个小公司的开发部里面经常会见到新面孔，但PM却不会常换。因为做老板的对技术是一窍不通，依他们看来只到拉住PM的心，那技术方面方面就能搞得定，至于技术部要换人，他们根本不需要费力气去管。所以从一个技术员过渡到一个PM是一条向前发展的一个选择，但开发人员也需要知道，要成为一个PM不单单是使用技术，而更重要的是对管理方面认识。一个PM主要的工作是组织团队，控制成本，管理业务，控制项目进度，与客户进行沟通，协调工作，定期进行工作报告等。所以要成为一个成功的PM更要重视组织能力，PM必须能提高团队的积极性，发挥团队所长，在有限的开发资源前提下为公司得到最大程度上的利润。成为一个PM后，通常不需要直接接触技术开发，而着重管理的是业务发展，但PM对技术也需要有一定的了解（在下曾经为PM对技术了解的必要性写过一篇文章，得到很多支持但也惹来不少的争议）。在这里我还是要强调自己的观点：要成为一个成功PM最重视的是管理能力，但对技术也应该有足够的了解，因为这是与团队成员沟通的桥梁，只有这样才能与整个团队的成员有着紧密的结合，让团队成员感觉到他们自己存在的意义，从而调动团队的积极性，而不是漠视技术人员的存在。技术并非成为一个成功PM的充分条件但却是必要条件！\n\n**2\\. 从程序员向技术管理发展**\n\n其实一个Team Leader的职责与Project Manager相像，但Team Leader更着重于技术开发方面，通常一个大型项目都会有一两个开发团队由Team Leader带领，负责开发核心部分，而其它部分分派给不同开发小组或者分派给外包公司。在网上常看到几句话，贴切地形容了PM与TL的区别：“技术人员乐于被领导；但他们不喜欢被管理，不喜欢像牛一样被驱赶或指挥。管理者强迫人们服从他们的命令，而领导者则会带领他们一起工作。管理是客观的，没有个人感情因素，它假定被管理者没有思想和感受，被告知要做什么和该如何做。领导是引领、引导，它激励人们达成目标。领导力是带有强烈个人感情色彩的，它不是你能命令的，也不是你能测量评估和测试的。”\n\n无论是PM与TL，对业务与技术都要有深入的了解，只是PM更侧重于业务的管理，盈利的多少，风险的大小等等，而TL则侧重于项目的成本，开发的难度，软件的架构等技术方面的问题。在某些人眼中，技术与管理就像鱼与熊掌，不可兼得，但依在下看来，两者却是秤不离砣，密不可分。只要及时提升自己对技术与管理的认识，不断地向深一层发展，要从程序员提升到技术管理人员只是时间的问题。打个比方，一个普通的.NET程序员，开始可能限制于ASP.NET的页面开发，但一旦他有了发展之心，他自然会对ASP.NET MVC、Silverlight、WinForm、WPF这些UI的开发手法感到兴趣，学习不需要多少时间，他可能就会认识这些UI开发只不过是一些工具，其实在开发原理上没什么区别。接着他就会向深一层的通讯模式进行了解，认识TCP/IP、Web Service、WCF、Remoting这些常用到的通讯方式，这时候他可能已经感觉到自己对开发技术有了进一步的了解。进而向工作流、设计模式、面向对象设计、领域驱动设计、面向服务开发等高层次进发，最后成为技术的领导者。上面只是一个比喻，但要注意的是，在学习的时期必须注意的是与同事之间沟通，很多的开发人员喜欢独来独往，开发的项目总想一个人搞定，不受外界的干扰。但要明白，就算你有天大的本事，一项大型的项目也不可能由你一个人全扛着。所以团队的合作性与同事间的沟通是必要的，这也是成功一个TL的必要条件。\n\n**3\\. 单方面向技术发展**\n\n能成功技术开发的尖端人才，这是在下最向往的工作，却也没本事登上这个位置。很多从事开发的人都会认为，业务总会带着“金钱的味道”，老板从来不管开发是否合符开发原则，有否经过必要测试，他们只会在客户面前无尽地吹嘘，项目到期能成功交货，只要不出什么大问题那这个项目就算成功了。其实我们也要明白：开发项目最终目标是为了赚钱，在开发过程中对项目成本的限制和效率的控制这也是必须，所以这才需要管理人员对项目进行管理。但开发人员也很想避开这 “金钱的尘嚣”，全情投入到技术的世界的当中。所以对技术有着浓厚兴趣的人，往往会深入地研究某一项技术，成为技术上的精英。但在这里说一句令人心淡的话：中国已经属于是世界上第二大经济体同盟国，但国民生产总值主要来源于第三方加工产业方面。中国可以说是人才济济，但却在高新产业上却比发达国家落后。这几年的确看到我们国家在高新科技上有着质的飞跃，但跟欧美发达国家还有着一段距离。所以想在中国成为尖端技术的人才，无可否定比在国外要难。依在下看来，要想成为尖端的开发者，必须对C、C++、汇编语言、嵌入式开发、Windows API、Linux API这些底层技术有着深入的了解。要知道解JAVA、.NET……等这些之所以称为高级开发语言，并不是指它们比C、C++、汇编语言更高级，而是指它们封装了C、C++等等的功能，更适合用于企业软件的开发，使开发变得简单。但如果要开发一些底层的软件，大型的系统的时候，就必须用到C、C++、汇编等开发语言，这是成功尖端人才的一个条件。\n\n**确定未来的目标**\n\n人是从历练中成长的，古人云：三十而立，形容的不是一个人的社会地位，经济来源，而是形容一个人对未来的目标，对人生的意向。要成为一个成功人，就应该早日为自己定下长期的发展目标，作为一个开发者也当如此。随着人的性格，取向各有不同，大家为自己所选择的路也有不同：\n\n**1.自立门户，勇敢创业**\n\n快30岁了，很多人会认为要想真正赚得了钱，就应该自立门户，为自己创业建立一个基础。像北京、上海、广州这些一级城市，要买房子，一手楼基本要在 2万~4万元/平方米左右，而在一家普通的IT公司当上一个项目经理，基本收入一般都在1.5万~3万之间（除非在大型的跨国企业内工作，那另当别论），要买一间100平方米左右的房子，就算不吃不喝也几乎要10年的年薪，所以选择自主创业，是很多IT开发人员的一个未来目标，想要达到这个目标，就应该更多地把业务作为重点。不可否认的一件事，在中国社会里很多时候讲的是“关系”，即使这30年的改革开放使中国的经济蓬勃地发展起来，但几千年来留下的歪风还是不能完全的磨灭。所以想要创业的人事建议你要多跟客户打好关系，与合作伙伴保持互利互动的模式，这将有利于日后事业的发展。\n\n**2\\. 急流勇退，退居二线**\n\n这也是不少人的选择。很多人在有了家庭以后，感觉到压力太大，人的一生并非只有事业，他们想把更多时间用于对亲人的照顾，对孩子的关心上。所以很多人会选择一份像系统分析、系统维护、高校教师、专业学院讲师这一类的工作。收入稳定，而且往往没有一线开发人员那么大的压力。\n\n**3\\. 不懈努力，更进一步**\n\n无论你是一个Project Manager或者是Team Leader，如果你想继续晋升一级，那还是会两极分化的。从一个PM到一间公司的管理层，那所面对的事件会有很多变化。一个公司的总经理，要管理的不再是一到两个项目的成本，而是整个部门的运作，整间公司的业务流程，所以要肩负的任务的会更重。在下曾经有一位上司彭博士，他是企业的最高领导人，年薪超过三百万，而且在报纸杂志上也曾经亮过相。平常只会在某些会议上轻轻地亮下相，说两句讲词，平常的公司运作与业务管理都不需要他直接执行。这并不是说一个作为管理层很清闲，因为他们要面对的是更多的社会关系，与公司合作企业的联系上。这跟一个PM的工作的很大的区别，所以要从一个PM晋升到管理层，那可是要负出更多的努力与汗水。\n\n如果要从Team Leader上升为一个技术总监，那工作的方向也有所改变。像之前所说：一个TL可能更重视的是技术层面，讲求与团队之间的互动合作性，更注重的是开发的完善。而一个技术总监就无需要直接参加某个项目的开发，而注意的是开发的效率与成果，如何合理使用有限的开发资源，控制开发的风险和可能带来的效果。\n\n**发展感受**\n\n经历了8年多时间，在下从一个程序员到一个项目经理，之间经过很多的曲折，但因为每一个人的际遇都有所不同，所走的路也有不同，正所谓条条大路通罗马，成功的路不止一条，在下也不想令各位误解，而只想为大家说一下我的发展方向。如果您是一位开发人员 程序员-&gt;架构师-&gt;Team Leader（Project Manager）-&gt;技术总监 是一条不错路，这也是在下选择的路。在我国，想要进一步提升自己，无论你想是以技术为重点还是以业务为重点，都离不开管理二字。在一些大型的企业，一个团队往往会配备一个PM与一个架构师，尽管两个人负责的任务各有不同，但你会看到一个架构师的收入往往不如一个PM，PM往往是这个团队的核心领导者，是关键人物。因为公司能否赚钱，PM有着重要的作用。PM与TL并没有绝对的区别，而且在一些中小型企业，一个开发团队只有3~5人，一个TL往往会兼备业务处理、成本控件、架构设计、开发管理等多项任务。所以在下会把Team Leader与Project Manager定于同一层次，一个公司的老板往往不会知道团队的架构师、程序员是何人，而只会向PM询问项目的进度，所以只有晋升到这个层次，才有机会进一步提升管理能力，让自己有上升的空间。置于要成为一个技术总监，那要求就不再单单是对单个项目的管理，而应该更则重于新兴技术的引用，开发资源的合理利用，对开发项目敏捷性的处理等等，对此在下也在试探当中，未敢多言。\n\n原文出处： [风尘浪子](http://www.cnblogs.com/leslies2/archive/2011/06/08/2074265.html)","mtime":1386290932000,"source":"_posts/分享8年开发经验，浅谈程序员职业规划-2.md"},"bzjgot5f9m4niyz3":{"_id":"bzjgot5f9m4niyz3","content":"title: \"初始Python\"\nid: 929\ndate: 2013-09-18 13:08:50\ntags: \n- python\ncategories: \n- Python\n- 程序人生\n---\n\nPython 是一种面向对象、直译式计算机编程语言，具有近二十年的发展历史，成熟且稳定。它包含了一组完善而且容易理解的标准库，能够轻松完成很多常见的任务。它的语法简捷和清晰，尽量使用无异义的英语单词，与其它大多数程序设计语言使用大括号不一样，它使用缩进来定义语句块。\n\nPython 可以和 C/C++ 语言整合在一起，也能支持命令式程序设计、面向对象程序设计、函数式编程、面向侧面程序设计、泛型编程多种编程范式。\n\n**Python 的一些重要特性\n**\n\n*   **简单**：Python是一种代表简单主义思想的语言。阅读一个良好的Python程序就感觉像是在读英语一样。它使你能够专注于解决问题而不是去搞明白语言本身。\n\n*   **易学**：Python极其容易上手，因为Python有极其简单的说明文档。\n\n*   **速度快：**Python 的底层是用 C 语言写的，很多标准库和第三方库也都是用 C 写的，运行速度非常快。\n\n*   **免费、开源**：Python是FLOSS（自由/开放源码软件）之一。使用者可以自由地发布这个软件的拷贝、阅读它的源代码、对它做改动、把它的一部分用于新的自由软件中。FLOSS是基于一个团体分享知识的概念。\n\n*   **高层语言**：用Python语言编写程序的时候无需考虑诸如如何管理你的程序使用的内存一类的底层细节。\n\n*   **可移植性**：由于它的开源本质，Python已经被移植在许多平台上（经过改动使它能够工作在不同平台 上）。这些平台包括Linux、Windows、FreeBSD、Macintosh、Solaris、OS/2、Amiga、AROS、AS/400、 BeOS、OS/390、z/OS、Palm OS、QNX、VMS、Psion、Acom RISC OS、VxWorks、PlayStation、Sharp Zaurus、Windows CE、PocketPC、Symbian以及Google基于linux开发的android平台。\n\n*   **解释性**：一个用编译性语言比如C或C++写的程序可以从源文件（即C或C++语言）转换到一个你的计算机使用的语言（二进制代码，即0和1）。这个过程通过编译器和不同的标记、选项完成。运行程序的时候，连接/转载器软件把你的程序从硬盘复制到内存中并且运行。而Python语言写的程序不需要编译成二进制代码。你可以直接从源代码运行 程序。在计算机内部，Python解释器把源代码转换成称为字节码的中间形式，然后再把它翻译成计算机使用的机器语言并运行。这使得使用Python更加简单。也使得Python程序更加易于移植。\n\n*   **面向对象：**Python既支持面向过程的编程也支持面向对象的编程。在“面向过程”的语言中，程序是由过程或仅仅是可重用代码的函数构建起来的。在“面向对象”的语言中，程序是由数据和功能组合而成的对象构建起来的。\n\n*   **可扩展性**：如果需要一段关键代码运行得更快或者希望某些算法不公开，可以部分程序用C或C++编写，然后在Python程序中使用它们。\n\n*   **可嵌入性**：可以把Python嵌入C/C++程序，从而向程序用户提供脚本功能。\n\n*   **丰富的库**：Python标准库确实很庞大。它可以帮助处理各种工作，包括正则表达式、文档生成、单元测试、线程、数据库、网页浏览器、CGI、FTP、电子邮件、XML、XML-RPC、HTML、WAV文件、密码系统、GUI（图形用户界面）、Tk和其他与系统有关的操作。这被称作Python的“功能齐全”理念。除了标准库以外，还有许多其他高质量的库，如wxPython、Twisted和Python图像库等等。","mtime":1386290932000,"source":"_posts/初始python.md"},"bpqsi6dxxmho0f6l":{"_id":"bpqsi6dxxmho0f6l","content":"title: \"分享8年开发经验，浅谈程序员职业规划\"\nid: 814\ndate: 2013-06-07 14:43:58\ntags: \n- 职业规划\ncategories: \n- 互联网\n---\n\n在中国有很多人都认为IT行为是吃青春饭的，如果过了30岁就很难有机会再发展下去！其实现实并不是这样子的，在下从事.NET及JAVA方面的开发的也有8年的时间了，在这里在下想凭借自己的亲身经历，与大家一起探讨一下。\n<!-- more -->\n**明确入行的目的**\n\n很多人干IT这一行都冲着“收入高”这一点的，因为只要学会一点HTML、DIV+CSS，要做一个页面开发人员并不是一件难事，而且做一个页面开发人员更容易找到工作，收入比普通的工作还要高一些，所以成为了很多高校毕业生的选择。如果您只是抱着这样一个心态来入行的话，那阁下可真的要小心。因为干IT这一行竞争本来就比较激烈，特别是页面设计这方面，能够开发的人很多，所以为了节省成本在大部分公司都会在需要的时候才招聘这类人员，在没有订单的时候一些小公司还可能找各类的借口或者以降薪的手段去开除这类员工。而在招聘信息上常常会看到“招聘页面设计师，条件：30岁以下……欢迎应界毕业生前来应聘”这样一条，因为这一类工员对技术上的要求并不高，找应界生可以节约成本。所以在下觉得“IT行业是吃青春饭的”这句话只是对着以上这类人所说的，如果阁下缺乏“进取之心”，而只抱着“收入高，容易找工作”这样的态度而入行，那“IT行业是吃青春饭”将会应验了。\n\n**选择合适的工具**\n\nJAVA、C#、PHP、C++、VB……10多种热门的开发语言，哪一种最有发展潜力呢？其实开发语言只不过是一个工具，“与其分散进攻，不如全力一击”，无论是哪一种开发语言，只要您全力地去学习，到有了一定的熟悉程度的时候，要学习另一种的语言也是轻而易举的事情。开发语言主要分为三大类：\n\n**1\\. 网络开发**\n\n现在网络已经成为世界通讯的一座桥梁，好像Javascript、PHP、Ruby这几类开发语言大部分是用作网络开发方面\n\n**2\\. 企业软件开发**\n\nJAVA、C#、VB这几类开发语言都实现了面向对象开发的目标，更多时候用于企业系统的开发\n\n**3\\. 系统软件**\n\nC语言、C++、Object-C、汇编语言这些软件更多是用在系统软件开发，嵌入式开发的方面。\n\n当然，这分类不是绝对，像JAVA、C#、VB很多时候也用于动态网站的开发。在很开发项目都会使用集成开发的方式，同一个项目里面使用多种开发语言，各展所长，同步开发。所以在刚入门的时候，建议您先为自己选择一种合适的开发工具，“专注地投入学习，全力一击”。\n\n**明确发展方向**\n\n当您对某种开发语言已经有了一定的了解，开始觉得自己如同“行尸走肉”，成为一个开发工具的时候，那您就应该要明确一下自己的发展方向了。\n\n平常在公司，您可以看到做UI层的开发人员大多数都有20多岁，他们充满干劲，而且没有家庭负担，在两年前ASP.NET MVC 、Silverlight等刚出现的时候，他们可以在晚上回家的时候买几本书或者直接上网看看，研究三五个星期以后，对需要用到技术就已经有一定的了解了。而年过30的人多数是已经成了家，他们每天9：00点上班唯一的希望就是快些到6：00点，能回家吃饭。吃完饭只想陪孩子玩一下，看看孩子的功课，对新增的技术缺乏了学习的欲望。所以很多接近30岁的程序员都有着一种逼迫感（包括30岁时候的我自己），再过几年应该怎么办？这时候，您就更应该明确一下目标，努力向自己的发展方向前进了。归纳一下，可从下面几项里选择适合自己的一条道路：\n\n**1\\. 从技术向业务过渡**\n\n在国外，很多发达国家都很重视人才，一个高级的程序员与一个Project Manager收入相差一般不超过15%。但中国是世界上人口最多的国家，国内人才众多，所以人才滥用的情况经常可以看到。一个小公司的开发部里面经常会见到新面孔，但PM却不会常换。因为做老板的对技术是一窍不通，依他们看来只到拉住PM的心，那在技术方面就能搞得定，至于技术部要换人，他们根本不需要费力气去管。所以从一个技术员过渡到一个PM是向前发展的一个选择，但开发人员也需要知道，要成为一个PM不单单是使用技术，而更重要的是对管理方面认识。一个PM主要的工作是组织团队，控制成本，管理业务，控制项目进度，与客户进行沟通，协调工作，定期进行工作报告等。所以要成为一个成功的PM更要重视组织能力，PM必须能提高团队的积极性，发挥团队所长，在有限的开发资源前提下为公司得到最大程度上的利润。成为一个PM后，通常不需要直接接触技术开发，而着重管理的是业务发展，但PM对技术也需要有一定的了解（在下曾经为PM对技术了解的必要性写过一篇文章，得到很多支持但也惹来不少的争议）。在这里我还是要强调自己的观点：要成为一个成功PM最重视的是管理能力，但对技术也应该有足够的了解，因为这是与团队成员沟通的桥梁，只有这样才能与整个团队的成员有着紧密的结合，让团队成员感觉到他们自己存在的意义，从而调动团队的积极性，而不是漠视技术人员的存在。技术并非成为一个成功PM的充分条件但却是必要条件！\n\n**2\\. 从程序员向技术管理发展**\n\n其实一个Team Leader的职责与Project Manager相像，但Team Leader更着重于技术开发方面，通常一个大型项目都会有一两个开发团队由Team Leader带领，负责开发核心部分，而其它部分分派给不同开发小组或者分派给外包公司。在网上常看到几句话，贴切地形容了PM与TL的区别：“技术人员乐于被领导；但他们不喜欢被管理，不喜欢像牛一样被驱赶或指挥。管理者强迫人们服从他们的命令，而领导者则会带领他们一起工作。管理是客观的，没有个人感情因素，它假定被管理者没有思想和感受，被告知要做什么和该如何做。领导是引领、引导，它激励人们达成目标。领导力是带有强烈个人感情色彩的，它不是你能命令的，也不是你能测量评估和测试的。”\n\n无论是PM与TL，对业务与技术都要有深入的了解，只是PM更侧重于业务的管理，盈利的多少，风险的大小等等，而TL则侧重于项目的成本，开发的难度，软件的架构等技术方面的问题。在某些人眼中，技术与管理就像鱼与熊掌，不可兼得，但依在下看来，两者却是秤不离砣，密不可分。只要及时提升自己对技术与管理的认识，不断地向深一层发展，要从程序员提升到技术管理人员只是时间的问题。打个比方，一个普通的.NET程序员，开始可能限制于ASP.NET的页面开发，但一旦他有了发展之心，他自然会对ASP.NET MVC、Silverlight、WinForm、WPF这些UI的开发手法感到兴趣，学习不需要多少时间，他可能就会认识这些UI开发只不过是一些工具，其实在开发原理上没什么区别。接着他就会向深一层的通讯模式进行了解，认识TCP/IP、Web Service、WCF、Remoting这些常用到的通讯方式，这时候他可能已经感觉到自己对开发技术有了进一步的了解。进而向工作流、设计模式、面向对象设计、领域驱动设计、面向服务开发等高层次进发，最后成为技术的领导者。上面只是一个比喻，但要注意的是，在学习的时期必须注意的是与同事之间沟通，很多的开发人员喜欢独来独往，开发的项目总想一个人搞定，不受外界的干扰。但要明白，就算你有天大的本事，一项大型的项目也不可能由你一个人全扛着。所以团队的合作性与同事间的沟通是必要的，这也是成功一个TL的必要条件。\n\n**3\\. 单方面向技术发展**\n\n能成功技术开发的尖端人才，这是在下最向往的工作，却也没本事登上这个位置。很多从事开发的人都会认为，业务总会带着“金钱的味道”，老板从来不管开发是否合符开发原则，有否经过必要测试，他们只会在客户面前无尽地吹嘘，项目到期能成功交货，只要不出什么大问题那这个项目就算成功了。其实我们也要明白：开发项目最终目标是为了赚钱，在开发过程中对项目成本的限制和效率的控制这也是必须，所以这才需要管理人员对项目进行管理。但开发人员也很想避开这“金钱的尘嚣”，全情投入到技术的世界的当中。所以对技术有着浓厚兴趣的人，往往会深入地研究某一项技术，成为技术上的精英。但在这里说一句令人心淡的话：中国已经属于是世界上第二大经济体同盟国，但国民生产总值主要来源于第三方加工产业方面。中国可以说是人才济济，但却在高新产业上却比发达国家落后。这几年的确看到我们国家在高新科技上有着质的飞跃，但跟欧美发达国家还有着一段距离。所以想在中国成为尖端技术的人才，无可否定比在国外要难。依在下看来，要想成为尖端的开发者，必须对C、C++、汇编语言、嵌入式开发、Windows API、Linux API这些底层技术有着深入的了解。要知道解JAVA、.NET……等这些之所以称为高级开发语言，并不是指它们比C、C++、汇编语言更高级，而是指它们封装了C、C++等等的功能，更适合用于企业软件的开发，使开发变得简单。但如果要开发一些底层的软件，大型的系统的时候，就必须用到C、C++、汇编等开发语言，这是成功尖端人才的一个条件。\n\n**确定未来的目标**\n\n人是从历练中成长的，古人云：三十而立，形容的不是一个人的社会地位，经济来源，而是形容一个人对未来的目标，对人生的意向。要成为一个成功人，就应该早日为自己定下长期的发展目标，作为一个开发者也当如此。随着人的性格，取向各有不同，大家为自己所选择的路也有不同：\n\n**1.自立门户，勇敢创业**\n\n快30岁了，很多人会认为要想真正赚得了钱，就应该自立门户，为自己创业建立一个基础。像北京、上海、广州这些一级城市，要买房子，一手楼基本要在2万~4万元/平方米左右，而在一家普通的IT公司当上一个项目经理，基本收入一般都在1.5万~3万之间（除非在大型的跨国企业内工作，那另当别论），要买一间100平方米左右的房子，就算不吃不喝也几乎要10年的年薪，所以选择自主创业，是很多IT开发人员的一个未来目标，想要达到这个目标，就应该更多地把业务作为重点。不可否认的一件事，在中国社会里很多时候讲的是“关系”，即使这30年的改革开放使中国的经济蓬勃地发展起来，但几千年来留下的歪风还是不能完全的磨灭。所以想要创业的人事建议你要多跟客户打好关系，与合作伙伴保持互利互动的模式，这将有利于日后事业的发展。\n\n**2\\. 急流勇退，退居二线**\n\n这也是不少人的选择。很多人在有了家庭以后，感觉到压力太大，人的一生并非只有事业，他们想把更多时间用于对亲人的照顾，对孩子的关心上。所以很多人会选择一份像系统分析、系统维护、高校教师、专业学院讲师这一类的工作。收入稳定，而且往往没有一线开发人员那么大的压力。\n\n**3\\. 不懈努力，更进一步**\n\n无论你是一个Project Manager或者是Team Leader，如果你想继续晋升一级，那还是会两极分化的。从一个PM到一间公司的管理层，那所面对的事件会有很多变化。一个公司的总经理，要管理的不再是一到两个项目的成本，而是整个部门的运作，整间公司的业务流程，所以要肩负的任务的会更重。在下曾经有一位上司彭博士，他是企业的最高领导人，年薪超过三百万，而且在报纸杂志上也曾经亮过相。平常只会在某些会议上轻轻地亮下相，说两句讲词，平常的公司运作与业务管理都不需要他直接执行。这并不是说一个作为管理层很清闲，因为他们要面对的是更多的社会关系，与公司合作企业的联系上。这跟一个PM的工作的很大的区别，所以要从一个PM晋升到管理层，那可是要负出更多的努力与汗水。\n\n如果要从Team Leader上升为一个技术总监，那工作的方向也有所改变。像之前所说：一个TL可能更重视的是技术层面，讲求与团队之间的互动合作性，更注重的是开发的完善。而一个技术总监就无需要直接参加某个项目的开发，而注意的是开发的效率与成果，如何合理使用有限的开发资源，控制开发的风险和可能带来的效果。\n\n**发展感受**\n\n经历了8年多时间，在下从一个程序员到一个项目经理，之间经过很多的曲折，但因为每一个人的际遇都有所不同，所走的路也有不同，正所谓条条大路通罗马，成功的路不止一条，在下也不想令各位误解，而只想为大家说一下我的发展方向。如果您是一位开发人员 程序员-&gt;架构师-&gt;Team Leader（Project Manager）-&gt;技术总监 是一条不错路，这也是在下选择的路。在我国，想要进一步提升自己，无论你想是以技术为重点还是以业务为重点，都离不开管理二字。在一些大型的企业，一个团队往往会配备一个PM与一个架构师，尽管两个人负责的任务各有不同，但你会看到一个架构师的收入往往不如一个PM，PM往往是这个团队的核心领导者，是关键人物。因为公司能否赚钱，PM有着重要的作用。PM与TL并没有绝对的区别，而且在一些中小型企业，一个开发团队只有3~5人，一个TL往往会兼备业务处理、成本控件、架构设计、开发管理等多项任务。所以在下会把Team Leader与Project Manager定于同一层次，一个公司的老板往往不会知道团队的架构师、程序员是何人，而只会向PM询问项目的进度，所以只有晋升到这个层次，才有机会进一步提升管理能力，让自己有上升的空间。置于要成为一个技术总监，那要求就不再单单是对单个项目的管理，而应该更则重于新兴技术的引用，开发资源的合理利用，对开发项目敏捷性的处理等等，对此在下也在试探当中，未敢多言。\n\n&nbsp;\n\n<pre>转载：[风尘浪子](http://www.cnblogs.com/leslies2/archive/2011/06/08/2074265.html)</pre>","mtime":1386294670000,"source":"_posts/分享8年开发经验，浅谈程序员职业规划.md"},"44yselxvxhixurv7":{"_id":"44yselxvxhixurv7","content":"title: \"博客被攻击，修改WordPress登陆文件名wp-login.php，防密码被暴力破解\"\nid: 938\ndate: 2013-10-06 15:34:00\ntags: \ncategories: \n- wordpress\n- 互联网\n---\n\n今天准备进入博客写日志，发现博客居然被停用了，找到客服，客服说我的博客昨天被人暴力攻击了，导致CPU过高系统挂了，然后让我修改后台登陆地址哈哈。。。。\n\n1、修改WordPress后台登陆地址链接\n\nWordPress 博客默认的登陆链接地址为（http://example.com/wp-login.php），为保证安全，可以修改WordPress登陆文件名wp-login.php后缀，防密码被暴力破解。\n> 方法：\n> \n> 一、修改在网站根目录下的wp-login.php文件名为wp-denglu.php（或者其他名字，以下以此为例），并将该文件wp-denglu.php中出现的字符`wp-login.php`全部改为`wp-denglu.php`；\n> \n> 二、查找根目录下的wp-includes/general-template.php文件，除了代码大概第238行\n> <div>\n> <table>\n> <tbody>\n> <tr>\n> <td>\n> <pre>1</pre>\n> </td>\n> <td>\n> <pre>$login_url = site_url('wp-login.php', 'login');</pre>\n> </td>\n> </tr>\n> </tbody>\n> </table>\n> </div>\n> **不要修改**，该文件其他的字符`wp-login.php`替换为`wp-denglu.php`，注意完成修改后覆盖原文件保存，这样就可以避免黑客知道你的登陆地址！\n&nbsp;\n\n**2、****插件法**：可以安装安全插件 Limit Login Attempts， 安装并启用该插件后不需要做其他特别设置。当连续登陆失败，插件会临时屏蔽登陆 IP 地址。\n\n**_来自[solidot](http://www.solidot.org/story?sid=34277)的新闻：_**\n> WordPress网站过去几天遭到了大规模的暴力破解攻击，攻击者首先扫描互联网上的Wordpress网站，然后利用Web服务器组建的僵尸网络不断尝试用户名和密码试图登录管理界面。Wordpress是世界上最流行的博客软件和内容管理系统之一。一般的僵尸网络是利用普通PC，而攻击者此次使用了超过9万台Web服务器，服务器比PC有更大的带宽和连接速度，因此可以更快的发动攻击。攻击者针对的是安全薄弱的Wordpress网站，暴力攻击Wordpress管理入口，使用用户名admin，尝试数以千计的密码。","mtime":1386290932000,"source":"_posts/博客被攻击，修改wordpress登陆文件名wp-login-php，防密码被暴.md"},"8gw05kmt2wbixk3l":{"_id":"8gw05kmt2wbixk3l","content":"title: \"好的程序员应该掌握的几门编程语言\"\nid: 546\ndate: 2013-02-07 14:15:18\ntags: \n- 编程语言\ncategories: \n- 程序人生\n---\n\n[author]如果想成为一个好的程序员，甚至架构师、技术总监等，显然只精通一种编程语言是不够的，还应该在常见领域学会几门编程语言，正如我们要成为高级人才不仅要会中文还要会英文，甚至还要会德文、俄文一样，其实是每一种语言都给人另一种思维方式，编程语言也一样。[/author]\n<!-- more -->\n### 汇编语言\n\n每种架构CPU都有自己的汇编语言，如果不涉及很底层的修改，了解X86的即可，理解一下机器语言的工作方式，便于优化核心代码。\n\n### C\n\n几乎适用于各个领域，应该是目前用途最广泛的编程语言(开发人数不是最多，但涉及到的领域、项目数量应该是最多的，目前尚没有数据支撑这一点)。本人接触到的第一门编程语言，除了C++也是最喜欢的一本编程语言，非常美的语言，无论从其语法、编程思想、运行效率、灵活性等都有着无五伦比的优势，虽然没有直接支持面向对象的语言特性，但很多项目也将面向对象的思想应用于C语言应用的开发。C语言出生40余年仍然风糜世界，并被大量应用于各个领域、各种项目，这本身就是一个奇迹，包括后来的C++、Java、C#、Javascript 等等众多主流的编程语言都深受其影响。\n学好C语言本身其实并不难，但C语言是与操作系统近距离工作的一种编程语言，由于其运行环境的复杂性导致了写好它必须先熟悉其环境，所以要求编程者对操作系统乃至硬件都要非常熟悉，所以学C语言的人感觉学好C语言很难，其实是用好C语言太难。比如指针，其实不是指针本身比较难，而是指针用不好会导致系统内存的破坏，破坏运行环境，所以会让程序员感觉指针很难。\n\n### C++\n\n鉴于它是C语言的超集，基本包括了C语言的所有特性(C99标准)，得益于C语言的广泛应用，几乎适用于各个领域，各种操作系统平台，也是个人认为最难的一种编程语言，但一旦精通之后再稍加学习其它语言很容易，基本无敌。其难在于功能强大与灵活，学好它的难度就是：C语言的难度+C++面向对象特性+面向对象编程。C++是本人最喜欢的编程语言，其学习过程是漫长的，但一旦精通了C++，学习其它任何语言都非常快，它贯穿了从硬件到对象的整个过程，学会了很容易让人看透编程语言的所有内幕。\n\n### Java\n\n二者都可算是比C/C++更高一级的编程语言，一般不直接编译成机器码，需要通过虚拟机或类似虚拟机的运行时来运行，可以实现跨平台。他们与C/C++的不同之处就在于他们的编译过程分为两个阶段：编译和运行时编译，其实第一次的编译并不是直接生成机器码，而是生成一种便于编译成机器码的中间代码，在实际运行的时候再通过所谓的运行时编译器(Just-In-Time Compiler)根据需要将中间代码编译成机器码并执行，实际上第一次编译更准确一点说是翻译。\nJava运行之广也是无人不知无人不晓，但其缺点在于对UI的支持不太好，无论在哪个平台做的界面都不太好，特别是在Windows上，用Java实现界面的应用很少；C#是微软.Net战略的主要语言，也可以实现与Java一样广泛的应用，包括桌面应用和WEB应用，而且对UI的支持那是刚刚的。虽然C#在Linux阵营也有Mono项目，虽然该项目Novell主持，但开源项目哪能像微软一样给力，实际应用非常少，所以C#的跨平台平不理想，仅限于微软的Windows系列(包括移动应用)。\n\n### Javascript\n\nWEB开发前端脚本，特别是AJAX被作为一个专有名词提出来之后前台脚本已经不单单是进行一些简单的辅助，而成了WEB UI的主要实现形式，并且产生了很多流行的框架项目，如ExtJS、JQuery、Dojo等。这些语言与前面几种编程语言不同之处还在于其弱类型特性，属于动态语言，设计思想与前面几种有些不同，虽然都支持面向对象但其实现方式稍有不同。学习它们会拓宽思路，帮助我们更深刻地理解编程语言。\n\n### shell、VB Script、Python、Perl、Ruby\n\n脚本语言，特别是shell、VS Script属于轻量级的脚本语言，一般只用于批处理(虽然它们可以完成非常复杂的功能)，尤其是shell(准确地说shell不是一种编程语言，由于该语言是它专属，暂以代之)；特别是shell应用范围最少，而后面的四种除了可用于批处理，还可以用于WEB编程，而且Ruby用于WEB开发已经非常流行。\n其中Python是本人比较喜欢的一种，它把程序的可读性要求提高了一个档次，把代码的缩进列入了语法范畴，这应该也是编程语言的趋势，以后可能将注释的添加也列入注释范围，比如对每一个类、每个函数必须填写相应的注释，否则编译不通过，这样有助于更好地统一、执行一个工程编码的规范。\n\n### Lua\n\n属于小众的编程语言，Lua有一个嵌入式脚本引擎，非常轻量级；Matlab的所谓M语言与Lua类似，它是Matlab专用的脚本语言。\n不同的领域都有一些专门的脚本语言，真的希望这些语言能够是一种。\n\n### XML、HTML、XSLT\n\n这些语言又是另一种类型的编程语言，这些语言通过标记来表示，特别是XML、HTML是一种静态的标记语言。而XSLT则可以有动态之意，属于XML的一种派生语言，可以将XML文档转换成其它格式的文本文档这使得数据的展显非常方便，XML用于表示数据，通过不同的XSLT表现为不同的样式。\n严格来讲CSS不应该算作一种编程语言，但它的确通过与HTML配合可以实现类似XSLT的效果，只是它暂时未从HTML中独立而已。\n\n### Verilog\n\n硬件描述语言，用于集成电路设计。它们也是编程语言，只是它编译后的产物不是类似CPU执行的指令那样的程序，而是对执行机构进行改造、重组的方案。\n\n### LISP、Haskell\n\n函数式编程语言，它们将电脑运算视为数学上的函数计算，并且避免状态以及可变数据，是另一种编程范型，又是一种编程思路。\n编程语言远远不止这么多，也并不是一个程序员要精通这里所说的所有编程语言，个人认为每一类都应该熟悉一种，至少了解其编程思路，并达到可以读懂的程度，而对于一些重要的编程语言，应该掌握，不仅要会读还要会写包括：C、C++、Java、C#、JavaScript等，但根据自己的工作领域不同可能的侧重不同，视实际情况选择了解其它编程语言。\n《程序员修炼之道》里不也建议每年学习一门编程语言嘛，十类编程语言，十年寒窗，程序员的漫漫修炼之路。","mtime":1386295803000,"source":"_posts/好的程序员应该掌握的几门编程语言.md"},"jb0ogswhn496h8kp":{"_id":"jb0ogswhn496h8kp","content":"title: \"如何减少magento后台语言界面的选项范围和数量\"\nid: 959\ndate: 2013-10-06 20:34:16\ntags: \ncategories: \n- magento\n---\n\n前面我们介绍了一片如何隐藏国家语言的文章，虽然可以完美屏蔽后台左下角的下拉框，但是因为我们修改的代码是注释掉多余的国家代码，导致在其他地方引用到国家的时候只剩下中国和美国两个，对于广大外贸的朋友肯定是不希望看到这样结局的。\n<!-- more -->\n那么我们有什么办法可以避免呢？有的。我们可以在后台显示页面的地方通过foreach循环保留只需要用到的后台语言，然后添加到左下角的下拉框即可。\n\n修改的代码在\napp/code/core/Mage/Adminhtml/Block/Page/Footer.php,\n你可将这个代码拷贝到\n/app/code/local/Mage/Adminhtml/Block/Page\n\n没有的文件夹目录我们可以自己手动新建。\n\n用文本编辑器打开footer文件，找到 getLanguageSelect()函数，我们需要修改这个函数哦。\n\n修改后的代码如下：\n\n[php]\n\npublic function getLanguageSelect()\n {\n $locale = Mage::app()-&gt;getLocale();\n $cacheId = self::LOCALE_CACHE_KEY . $locale-&gt;getLocaleCode();\n $html = Mage::app()-&gt;loadCache($cacheId);\n\n$oldlocal = $locale-&gt;getTranslatedOptionLocales();\n\n$newlocal = array();\n foreach ($oldlocal as $value) {\n if($value['value']=='en_GB' || $value['value']=='en_US' || $value['value']=='zh_CN' )\n $newlocal[]=$value;\n }\n\nif (!$html) {\n $html = $this-&gt;getLayout()-&gt;createBlock('adminhtml/html_select')\n -&gt;setName('locale')\n -&gt;setId('interface_locale')\n -&gt;setTitle(Mage::helper('page')-&gt;__('Interface Language'))\n -&gt;setExtraParams('style=&quot;width:200px&quot;')\n -&gt;setValue($locale-&gt;getLocaleCode())\n // -&gt;setOptions($locale-&gt;getTranslatedOptionLocales())\n -&gt;setOptions($newlocal)\n -&gt;getHtml();\n Mage::app()-&gt;saveCache($html, $cacheId, array(self::LOCALE_CACHE_TAG), self::LOCALE_CACHE_LIFETIME);\n }\n\nreturn $html;\n }\n\n[/php]\n\n减少magento后台语言界面的选项范围和数量,你操作就方便多了.","mtime":1386295438000,"source":"_posts/如何减少magento后台语言界面的选项范围和数量.md"},"at3z0furpensbtjx":{"_id":"at3z0furpensbtjx","content":"title: \"如何高效利用GitHub\"\nid: 536\ndate: 2013-01-25 09:36:13\ntags: \ncategories: \n- Git\n---\n\n# 如何高效利用GitHub\n\n正是Github，让社会化编程成为现实。本文尝试谈谈GitHub的文化、技巧与影响。\n\n*   [Q1：GitHub是什么](#q1)\n*   [Q2：GitHub风格](#q2)\n*   [Q3: 在GitHub，如何跟牛人学习](#q3)\n*   [Q4: 享受纯粹的写作与演讲](#q4)\n*   [Q5: 代码帮你找工作](#q5)\n*   [Q6: GitHub还在影响一些什么](#q6)\n*   [Q7: 除了GitHub，还可以选择什么？](#q7)\n<!-- more -->\n<div id=\"q1\"></div>\n\n## Q1：GitHub是什么\n\n## A1：一家公司\n\n![github](http://www.yangzhiping.com/images/tech/Octocat.png \"github\")\n\n位于旧金山，由[Chris Wanstrath](https://github.com/defunkt), [PJ Hyett](https://github.com/pjhyett) 与[Tom Preston-Werner](https://github.com/mojombo)三位开发者在2008年4月创办。迄今拥有59名全职员工，主要提供基于git的版本托管服务。\n\n在此之前，它是由[Tom](https://github.com/mojombo)与[Chris ](https://github.com/defunkt)在本地程序员聚会中，开始的一个用于托管git的项目。正如每个伟大的传奇都开始于一场冒险，Tom在这篇文章[我如何辞掉微软30万年薪邀约，创办GitHub](http://tom.preston-werner.com/2008/10/18/how-i-turned-down-300k.html)中谈到：\n> 当我老去，回顾一生，我想说，“哇，那是一场冒险“；而不是，“哇，我真的很安稳。“\n另一位创始人[Chris](https://github.com/defunkt)也详细描述了[GitHub初创的前因后果](https://gist.github.com/67060)，他说道：\n> Do whatever you want.\n于是，在2008年4月10号这一天，GitHub正式成立。\n\n目前看来，GitHub这场冒险已经胜出。根据来自[维基百科关于GitHub的描述](http://zh.wikipedia.org/wiki/GitHub)，我们可以形象地看出GitHub的增长速度：\n\n![github](http://www.yangzhiping.com/images/tech/github-repos.png \"github\")\n\n今天，GitHub已是：\n\n*   一个拥有143万开发者的社区。其中不乏Linux发明者[Torvalds](https://github.com/torvalds)这样的顶级黑客，以及Rails创始人[DHH](https://github.com/dhh)这样的年轻极客。\n*   这个星球上最流行的开源托管服务。目前已托管431万git项目，不仅越来越多知名开源项目迁入GitHub，比如Ruby on Rails、jQuery、Ruby、Erlang/OTP；近三年流行的开源库往往在GitHub首发，例如：[BootStrap](https://github.com/twitter/bootstrap)、[Node.js](https://github.com/joyent/node)、[CoffeScript](https://github.com/jashkenas/coffee-script)等。\n*   alexa全球排名414的网站。\n<div id=\"q2\"></div>\n\n## Q2：GitHub风格\n\n## A2: GitHub只是GitHub\n\n强调敏捷开发与快速原型，而又的确成功的创业团队，常具备一个重要气质：有自己的文化风格。如GitHub，又如[37signals](http://37signals.com/)。通过他们的快速开发，向用户证明了团队在技术上的能力，并且时常有惊喜。同时，通过强调特立独行的文化，将对半衰期过短的产品族群的信任转为对GitHub团队的信任。\n\n[Gravatars](http://en.gravatar.com/)的创始人（对，就是互联网最流行的头像托管系统）、[Jekyll](http://jekyllrb.com/)（对，它就是我近几年用的博客系统）作者、GitHub创始人，现任CTO Tom在[GitHub第一年学到的10大教训](http://tom.preston-werner.com/2011/03/29/ten-lessons-from-githubs-first-year.html)、[创业学校演讲](http://zh-cn.justin.tv/startupschool/b/272178966)中谈到GitHub文化的方方面面。我尝试将这种风格总结为以下要点：\n\n*   专注创作，高创意\n*   运营良好与较高的内外满意度\n*   高利润，较低的融资额或零融资\n创业公司多半死在钱上，就让我们先从钱谈起：\n\n### 高利润，较低的融资额或者零融资\n\n类似于GitHub这样的公司，拿到风险投资很难吗？恰恰相反，创始人[PJ Hyett](https://github.com/pjhyett) 在Hacker News的[一篇评论](http://news.ycombinator.com/item?id=2732149)中提到，自从GitHub创办以来，已与几十个VC沟通过。但是，直到今天，GitHub的融资额还是为零，并引以为豪。让我们看看GitHub官网的自我介绍：\n\n![image](http://www.yangzhiping.com/images/github/vc.png)\n\n### 运营良好与较高的内外满意度\n\n在Quora上有人问道，[GitHub是否寻找被收购？](http://www.quora.com/Is-GitHub-looking-to-be-acquired)，还是[PJ Hyett](https://github.com/pjhyett) ，他的回答是：No。\n\nGitHub从一开始就运营良好，员工拥有较高满意度，看看这些不太一样的做法：\n\n*   每一位GitHub公司的新员工，官方博客将发表文章欢迎。\n*   在GitHub内部，没有经理，需求内容与优先级由项目组自行决策。\n*   选择自己的工作时间、工作地点。\n*   员工来自开源社区。\n*   能开源的尽可能开源。\n富有激情、创意的员工使得GitHub得到了社区的广泛认同，从而拥有极高的客户满意度，并从创业一开始就盈利。一份[早期的调查](http://www.survs.com/WO/WebObjects/Survs.woa/wa/shareResults?survey=2PIMZGU0&amp;rndm=678J66QRA2)表明，GitHub很快成为Git托管首选。\n\n### 专注创作，高创意\n\nGitHub59名全职员工仅有29名员工在本地工作！不仅仅是工作地点的安排富有创意，GitHub员工[Holman](https://github.com/holman), 详细介绍了GitHub的工作方式：\n\n*   [时间并不能说明什么](http://zachholman.com/posts/how-github-works-hours/)\n*   [异步工作方式](http://zachholman.com/posts/how-github-works-asynchronous/)\n*   [创造力很重要](http://zachholman.com/posts/how-github-works-creativity/)\n<div id=\"q3\"></div>\n\n## Q3:在GitHub，如何跟牛人学习\n\n## A3:在学习区刻意练习\n\n### 追随牛人，与他们一起修行\n\n> 修行之道：\n> 关注大师的言行，\n> 跟随大师的举动，\n> 和大师一并修行，\n> 领会大师的意境，\n> 成为真正的大师。\n正如这首[禅诗](http://readthedocs.org/docs/translations/en/latest/hacker_howto.html)所言，与其在墙内仰望牛人，不如直接在GitHub：\n\n*   watch、fork牛人们\n*   对他们的项目提交pull request\n*   主动给牛人们的项目写wiki或提交测试用例，或者问题\n*   还可以帮他们翻译中文\nGitHub本身建构在git之上，git成为勾搭大师们的必要工具，以下读物成为首选：\n\n*   [git大白话入门，木有高深内容](http://rogerdudler.GitHub.com/git-guide/index.zh.html)\n*   [为什么git胜过X...](http://zh-cn.whygitisbetterthanx.com/)\n如果希望进一步深入，可以阅读已有中文翻译版的材料：\n\n*   [progit](https://github.com/progit/progit)：GitHub公司传道士[schacon](https://github.com/schacon)所作，已翻译成多国语言，当然，有中文版。\n*   [Git Magic](https://github.com/blynn/gitmagic)：已有志愿者翻译[中文版](https://github.com/blynn/gitmagic/tree/master/zh_cn)。\n同样，如果希望了解更多GitHub自身的知识，GitHub官方文档值得推荐：\n\n*   [The GitHub Hep](http://help.github.com/)\n\n### 牛人在哪里？\n\n*   GitHub上的代码库本身：尤其是：[Explore](https://github.com/explore)、[热门关注信息库](https://github.com/popular/watched)两个栏目\n*   GitHub官方推荐：[GitHub自身的官方博客](https://github.com/blog)与GitHub员工们的个人博客推荐的项目与开发者\n*   各类社交媒体上提到的的GitHub库：尤其是[Hacker News上提到的GitHub库](http://www.hnsearch.com/search#request/all&amp;q=github&amp;sortby=create_ts+desc)。\n关于学习的心理学研究，常常会谈到一个术语：**元认知、元学习、元知识**。是的，关于认知的认知、关于学习的学习、关于知识的知识，你对这些信息的偏好与熟练掌握，会让你在学习一门新东西时更加轻车熟路。**对一手信息进行回溯**，比如作者、创始人、最初文献出处，总是会让你更容易理解知识。\n\n### 在学习区刻意练习：借助GitStats进行项目统计\n\n在[如何学习一门新的编程语言？——在学习区刻意练习](http://www.yangzhiping.com/tech/learn-program-psychology.html)中，我已谈过：\n> 学习编程最好的方式是在学习区刻意练习。\n如何进行自我监督？\n\n借助于[GitStats](https://github.com/trybeee/GitStats)，我们能很好地统计自己的每个项目的工作量，从而看到工作进展。\n\n用法如下，\n\n    #复制GitStats项目到本地\n    cd ~/dev\n    git clone git://github.com/trybeee/GitStats.git\n    python ~/dev/gitstats/git-stats /youproject public \n\n以下为生成结果示范：\n\n每周代码提交次数：\n\n![github](http://www.yangzhiping.com/images/github/day_week.png \"github\")\n\n每天代码提交行数：\n\n![github](http://www.yangzhiping.com/images/github/lines_of_code.png \"github\")\n\n如果Fork别人的项目或者多人合作项目，最好每人都拥有一个独立分支，然后由项目维护人合并。如何建立自己的分支？\n<pre># 分支的创建和合并\ngit branch yourbranch \ngit checkout yourbranch    #切换到yourbranch\n\n# 开发yourbranch分支，然后开发之后与master分支合并\n\ngit checkout master\ngit merge yourbranch\ngit branch -d yourbranch    #合并完后删除本地分支\n</pre>\n如何将牛人的远程分支更新到自己的本地分支？\n<pre># 查看当前项目下远程\n# git remote\n# 增加新的分支链接，例如\ngit remote add niuren giturl…\n# 获取牛人的远程更新\ngit fetch niuren\n# 将牛人的远程更新合并到本地分支\ngit merge niuren/master\n</pre>\n\n### 生产力小技巧\n\n#### codeshelver：给git库做标签\n\n观察的项目如果多了，怎么管理？用[codeshelver](https://www.codeshelver.com/)，安装扩展之后，可以对GitHub项目做标签。\n\n#### gollum：利用git与github做wiki\n\n[gollum](https://github.com/github/gollum)是一个基于git的轻型wiki系统。\n\n#### GitHubwatcher: 监测重点项目\n\n[GitHubwatcher](https://github.com/DAddYE/githubwatcher)适用于通知不频繁的情景。\n\n#### GitHub官方资源\n\nGitHub官方列出了[一些有用的脚本与书签](http://help.github.com/userscripts-and-bookmarklets/)。\n\n#### 社区驱动的安装与配置文件\n\nGitHub中各类配置文件层出不穷，一些常用的：\n\n*   [osh-my-zsh](https://github.com/robbyrussell/oh-my-zsh)：将终端从bash改为zsh之后，可考虑安装社区驱动的zsh配置文件，含有多个插件。可参考旧文[zsh与oh-my-zsh](http://www.yangzhiping.com/tech/zsh-oh-my-zsh.html)\n*   [gitignore](https://GitHub.com/GitHub/gitignore)：GitHub官方出品\n*   [yourchili](https://github.com/ericpaulbishop/yourchili):服务器各类安装shell，比如安装nginx等。\n<div id=\"q4\"></div>\n\n## Q4: 享受纯粹的写作与演讲\n\n## A4：回归创作的初始\n\n### 写作\n\n早在2008年，就有技术图书作者[通过Git来写作](https://GitHub.com/blog/91-not-just-code)，以下是示范：\n\n*   [Node.js初学者教材](https://github.com/ManuelKiessling/NodeBeginnerBook)，中文版[在这里](http://www.nodebeginner.org/index-zh-cn.html)。\n*   [backbone基础](https://github.com/addyosmani/backbone-fundamentals)\n*   [Sinatra教程](https://github.com/cschneid/sinatra-book)\n你能想到的技术前沿话题，大多能在GitHub找到相应的培训材料或者开源图书。\n\n个人写作照样适用。在前文[理想的写作环境：Git+GitHub+Markdown+Jekyll](http://www.yangzhiping.com/tech/writing-space.html)，我已经格外赞美过这些美好事物了。\n\n暖色调的灯光，足够宽度的工作台，听着清脆的键盘声音，基于Git、GitHub、Markdown与Jekyll来写作，不担心写废与排版，只关注最纯粹的写作，是一种享受。我有时候会想，如果Git、Github、Markdown、Jekyll，再加上Yaml、Json的作者，让这些作者们重新来设计今天互联网基础架构偏文本的部分，会诞生一些什么？\n\n### 个人博客\n\n借助于[Jekyllbootstrap](http://jekyllbootstrap.com/)，可以在Github上快速搭建一个基于jekyll的博客系统。\n\n除了这个简单易行的办法之外，还存在一些其他方法，例如：\n\n*   Jekyll：参考[告别wordpress，拥抱jekyll](http://www.yangzhiping.com/tech/wordpress-to-jekyll.html)\n*   Octopress：参考[Ruby开源项目介绍(1)：octopress——像黑客一样写博客](http://www.yangzhiping.com/tech/octopress.html)\n*   GitHub Pages：参考[GitHub Pages](http://pages.github.com/)\n\n### 演讲\n\n借助于GitHub，可以享受更纯粹、更酷的演讲。GitHub 2011年收购Ordered List之后，从此可以通过[speakerdeck](http://speakerdeck.com/)更好的分享ppt文档。\n\n我们还可以：\n\n*   使用GitHub著名传教士、Progit作者Scott Chacon开发的[showoff](https://github.com/schacon/showoff)\n*   来自开源社区的其他演讲库[impress.js](https://github.com/bartaz/impress.js)\n<div id=\"q5\"></div>\n\n## Q5: 代码帮你找工作\n\n## A5：GitHub简历很诚实\n\nNumEricR（非GitHub工作人员）基于GitHub Pages功能做了一个简历生成器，使用极其简单，登陆网站[GitHub简历生成器](http://resume.GitHub.com/)，填入你的GitHub网站用户名即可。\n\nfredwu是Ruby中文社区活跃份子，他的开源项目[angel_nest](https://github.com/fredwu/angel_nest)，一个天使投资与创业者对接的网站，适合Ruby初学者升级为Ruby中级开发者时学习，也在Hacker News上被[热烈讨论](http://news.ycombinator.com/item?id=2895133)过，让我们来看看他的简历：\n\n[http://resume.GitHub.com/?fredwu](http://resume.GitHub.com/?fredwu)\n\n正是因为GitHub上的代码无法造假，也容易通过你关注的项目来了解知识面的宽度与深度。现在越来越多知名公司活跃在GitHub，发布开源库并招募各类人才，例如：[Facebook](https://github.com/facebook)、[Twitter](https://github.com/twitter)、[Yahoo](https://github.com/yahoo) ...\n\n开始有了第三方网站提供基于GitHub的人才招聘服务，例如：\n\n*   [GitHire](http://githire.com/):通过它，可以找出你所在地区的程序员。\n*   [Gitalytics.com](http://www.gitalytics.com)：通过它，能评估某位程序员在GitHub、LinkedIn、StackOverflow、hackernews等多个网站的影响力。\n<div id=\"q6\"></div>\n\n## Q6: GitHub还在影响一些什么\n\n## A6：让计算机增强人类智慧\n\n很多年前，在某个名声显赫的学府中，两位先后拿过图灵奖的牛人有一段对话：\n\n*   牛人A：我们要给机器赋予智慧，让他们有自我意识！\n*   牛人B：你要给机器做那么多好事？那你打算给人类做点什么呢？\n这段对话来自《失控》。牛人A是[明斯基](http://zh.wikipedia.org/wiki/%E9%A9%AC%E6%96%87%C2%B7%E9%97%B5%E6%96%AF%E5%9F%BA)，他最喜欢将人类看做有血肉的机器，他的框架理论成为认知心理学、人工智能入门基础。牛人B则是[恩格尔巴特](http://zh.wikipedia.org/wiki/%E9%81%93%E6%A0%BC%E6%8B%89%E6%96%AF%C2%B7%E6%81%A9%E6%A0%BC%E5%B0%94%E5%B7%B4%E7%89%B9)。当明斯基1961年发表他著名的文章[人工智能走向](http://web.media.mit.edu/~minsky/papers/steps.html)时，恩格尔巴特还籍籍无名。直到次年，恩格尔巴特发表宏文：[人类智力的增强：一种概念框架](http://www.dougengelbart.org/pubs/augment-3906.html)。提出不同于明斯基的另一条增强人类智力的道路：不要尝试发明自动打字的机器，而是尝试发明鼠标，并且他真的发明鼠标成功了！\n\n从近些年的发展来看，仍然是明斯基占上风，但是，三十年河东，三十年河西，明斯基的人工智能方向又有多少年没有大突破了？相反，来自恩格尔巴特的群件、集体智慧等思想，逐步成为步入Web2.0时代之后的共识。无关对错，可以说，恩格尔巴特为增强人类智力，提供了可行的框架。与其去发明聪明的、昂贵的、功能一体化的智能机器人，还不如发明类似于鼠标这样笨笨的、廉价的、功能单一的人类智慧服务单件。明斯基的机器人很容易陷入死胡同，没有上升到哲学的高度。现在慢慢又回到恩格尔巴特这个方向来了。比如现在IBM开始[宣传](http://www.infoq.com/cn/news/2012/02/0301-hot-weibo)的[认知计算](http://www.ibm.com/smarterplanet/us/en/business_analytics/article/cognitive_computing.html)。\n\n从git与GitHub设计与解决的问题本质来看，明显加速了代码生产流程，促进了卓越智力产品的诞生。这就是一种典型的web2.0对智力生产流程的改良与人类智慧的增强。同样，某种意义上，小说写作网站也起到类似作用。但是，学术界尤其是社会科学类的智力产品生产似乎还停留在一个古老阶段。在开源领域，好想法层出不穷，极客影响极客，最终产生的是酷玩意。这些酷玩意抛弃浮华，直奔问题本质。那么，[有没有科学界的GitHub？](http://marciovm.com/i-want-a-github-of-science/)？\n\n类似问题层出不穷，以下为其他领域产品不完全名单。\n\n### 学术研究\n\n*   除了较早的[arXiv](http://arxiv.org/)、[PLoS](http://plos.org)之外，较有气象的可以推荐[mendeley](http://mendeley.com)、[开放期刊目录](http://www.doaj.org/)\n\n### 数据\n\n*   [buzzdata](http://buzzdata.com/):数据分享更容易\n\n### 科学计算\n\n*   [opani](http://opani.com/)：雏形中，支持R、Python等多种。\n\n### 教育\n\n*   [OpenStudy](http://openstudy.com/)：一个社会性学习网络，通过互助来更好地学习，主题涉及到计算机、数学、写作等。\n*   [openhatch](http://openhatch.org/): 通过练习、任务等帮助新手更好地进入开源社区\n<div id=\"q7\"></div>\n\n## Q7:除了GitHub，还可以选择什么？\n\n## A7：nil\n\n因为进化的需要，多数[裸猿](http://zh.wikipedia.org/zh/%E8%A3%B8%E7%8C%BF)存在选择强迫症：哪种程序语言更好？哪个web开发框架更好？当然，最令宅男技术男们羡慕的问题是，高白瘦御姐还是青春小萝莉好？:D\n\n除了GitHub之外，\n\n*   中国山寨品是不是更好？（为什么不写他们名字，你懂的，山寨品总是善于争论谁是第一个山寨的，各自的排名先后:D）\n*   免费的[BitBucket](https://bitbucket.org/)是不是更适合Python程序员？\n*   作为一名折腾族，我不自己搭建一个[gitlabhq](http://gitlabhq.com/)，是不是对不起自己？\n我们可以理解，正是因为无数条分岔路口，让人类不再受制于某种基因、特定疾病、独裁家族，从而拥有无限的可能。但是，这种选择强迫症与远古时代可怜的信息量相比较，\n\n*   今天这个大数据时代，它还会有助于人类作为族群的整体进化与作为个体的幸福吗？\n*   今天一位一线城市30岁大学毕业生经历的选择与孔子整个一生经历的选择，纯论数量，谁多谁少？\n生命如此短暂，为什么总要将青春浪费在不断的选择之中呢？罚你，回头阅读心理学家施瓦茨（[Barry Schwartz](http://www.swarthmore.edu/SocSci/bschwar1/)）的TED演讲：[选择之困惑——为何多即是少](http://xingfuke.net/xingfuke766)，1百遍啊1百遍。请记住施瓦茨的演讲要点：\n\n*   更多的选择不代表更多的自由；\n*   更多的选择导致决策的延迟和降低的满意感；\n*   快乐之秘诀，在于降低自己的期望值。\n最后，让我再抒情一把吧，\n> 美好的事物总是离不开被墙的命运，让我们静静地期待那一天的来临…\n> 也让我们在各自行业的努力，让下一代、下一代、下一代…（希望N&lt;=1，如果N&gt;=4，我做鬼也放不过你们！）不再拥有这一天。\n> \n> &nbsp;\n本作品采用[知识共享署名-非商业性使用-禁止演绎 3.0 Unported许可协议](http://creativecommons.org/licenses/by-nc-nd/3.0/)进行许可。\n\n转载于：[http://www.yangzhiping.com/tech/github.html](http://www.yangzhiping.com/tech/github.html)","mtime":1386294432000,"source":"_posts/如何高效利用github.md"},"sfv3ox8s3qe90r59":{"_id":"sfv3ox8s3qe90r59","content":"title: \"如何选择WEB开发语言\"\nid: 489\ndate: 2012-10-04 17:09:59\ntags: \n- web开发\n- 开发语言\n- 语言选择\ncategories: \n- 程序人生\n---\n\n<span style=\"font-family: 华文中宋; font-size: small;\">在打算开发一个网站时，选择什么语言，是首先需要面对的问题。目前主流的WEB开发语言有ASP.NET、PHP、JSP; 作为MS上世纪老将ASP，就不再提及，如果是因为维护方面的原因而必须使用，可考虑升级到ASP.NET，而作为新开发一个语言，实在找不到理由再使用它了；</span>\n<!-- more -->\n<span style=\"font-family: 华文中宋; font-size: small;\">以下将对这三种语言做对比，以供权衡：</span>\n\n**<span style=\"font-family: 华文中宋; font-size: small;\">上手度</span>**\n\n<span style=\"font-family: 华文中宋; font-size: small;\">.NET: 5分</span>\n\n<span style=\"font-family: 华文中宋; font-size: small;\">PHP:3分</span>\n\n<span style=\"font-family: 华文中宋; font-size: small;\">JSP:1分</span>\n\n<span style=\"font-family: 华文中宋; font-size: small;\">如果你是一个WEB方面的新手，这三门WEB语言的学习成本差别很大。ASP.net 作为微软的产品，继承了其一贯的特点，方便上手，易用；甚至你都不用编码，靠着鼠标拖拖拽拽，都能整一个网站出来（网上，就有这样的视频讲解。当然，这样出来的网站是没法应用到实际中的，且不说其代码复用率极其低下，拖拽出来的代码，灵活度太小，效率也低（eg：gridview中的分页实现载入数据是一次全部载入的））。同时，凭着其强大的开发工具visual studio系列，在程序出现bug时，能最大程度的提供问题说明，让开发者尽快定位到问题所在。JSP相比而言难度就大多了，光是配置一个开发环境就得耗费不少精力，JSP语言最为头疼的就是程序调试方面，当程序出现问题时，并不能得到友好的错误提示，调试BUG比较耗时。再就是JSP依托的JAVA过于庞大，着实是个无底洞，开始容易，越往后发现要学的越多，一般互联网公司，还真难以有几个能驾驭，再普及的；PHP学习算是基于.net和JSP之间，语法与C语言一脉相承，上手也算容易；</span>\n\n&nbsp;\n\n**<span style=\"font-family: 华文中宋; font-size: small;\">资源</span>**\n\n<span style=\"font-family: 华文中宋; font-size: small;\">.NET:4分</span>\n\n<span style=\"font-family: 华文中宋; font-size: small;\">PHP:5分</span>\n\n<span style=\"font-family: 华文中宋; font-size: small;\">JSP:2分</span>\n\n<span style=\"font-family: 华文中宋; font-size: small;\">资源包括能获取到的学习资料、开放源码，以及各种插件和库。PHP在这方面遥遥领先，粗略看来，各种网站的知名开源产品，大都使用PHP实现，如博客wordpress、论坛discuz、Wiki知识库MediaWiki等；</span>\n\n<span style=\"font-family: 华文中宋; font-size: small;\">相应的各种插件、库、开源代码的数量和质量更是其它语言无法相比。.NET资源也比较丰富，选用.NET幸福的是有MS这么一个强大后台做有力的技术支持，CSDN 的资料不但多，质量更是上乘；JSP由于其门槛高的缘故，致使在这方面的资料也比较少；</span>\n\n&nbsp;\n\n**<span style=\"font-family: 华文中宋; font-size: small;\">系统架构实施</span>**\n\n<span style=\"font-family: 华文中宋; font-size: small;\">.NET:3分</span>\n\n<span style=\"font-family: 华文中宋; font-size: small;\">PHP:5分</span>\n\n<span style=\"font-family: 华文中宋; font-size: small;\">JSP: 3分</span>\n\n<span style=\"font-family: 华文中宋; font-size: small;\">.NET部署环境是windows 03/08+MS SQL Server + IIS。都是微软的产品，优点就是部署容易，方便，兼容性好。最为头疼就是安全方面的问题，windows下总是得不停的打补丁，但还是时常遭受这样那样的攻击；再就是数据库方面，MS SQL 与Oracle在并发处理、效率上始终有个数据量级的差距，2008发布之后据说是好了些，但总是让人感觉不大放心；PHP就是LAMP架构，即Linux+Apache+My Sql + PHP；Linux平台在我这几年的熟悉后，深刻体会到其就是为服务器而生，各种的工具让人爱不释手；My Sql作为开源产品，首先在软件费用上就公司能省下一大笔，其性能优秀，即使某日网站规模的扩大致使数据库出现瓶颈，也可组建一个数据库团队来研究改进。不过，在Oracle收购MySql之后，为其前景蒙上了一层阴影。有可能，在不久的将来，MySql的部分功能就会闭源。JSP的架构小则是Linux+apache+tomcat+MySql ,大则Linux + Apache + Java (WebSphere) + Oracle，对于一般小型网站的部署，大都选用第一种；WebSphere过于庞大，一般部署都得独自占用一台服务器；Oracle是数据库中的王者，性能优异（国内银行证券的数据库应用，一般只有DB2和Oracle两种选择），但其价格不菲，非一般创业公司能够承担（按CPU收费，一般25w/cpu/每年；次年会收取15%的维护费）需要提一下的是JSP系统架构部署有些难度，架构出现问题后，排错是个很痛苦的过程。</span>\n\n**<span style=\"font-family: 华文中宋; font-size: small;\">管理维护</span>**\n\n<span style=\"font-family: 华文中宋; font-size: small;\">.NET:2分</span>\n\n<span style=\"font-family: 华文中宋; font-size: small;\">PHP:5分</span>\n\n<span style=\"font-family: 华文中宋; font-size: small;\">JSP: 4分</span>\n\n<span style=\"font-family: 华文中宋; font-size: small;\">WEB管理中，经常会通过远程来管理网站，远程管理的方便与否关键看命令行工具的支持力度及脚本环境的操作便捷性。.NET只能跑在Windows平台上，远程管理一般只能通过图形化界面远程鼠标操作，当网速比较慢的时候，管理员的心情无比复杂，远程操作基本上是在一幅幅图片上估计下一张图片中鼠标的移动位置；Windows平台的命令行环境非常差，IIS的命令行工具功能少，bat脚本也难学难用（虽然可以通过安装cygwin工具来模拟linux shell环境，但系统操作，系统资源监控方面还是无能为力）； Linux下就幸福多了，远程基本上都是通过SSH连接，安全有保证，shell脚本消耗的网络带宽也只是图形化界面的百分之一，管理流畅，心情舒畅；各种程序消耗资源都可远程监控；Linux就是为服务器而生，此话毫不为过。PHP、JSP都可跨平台，一般其系统部署都是在Linux下，MySql数据库和apche服务器都可通过相应的命令行工具有效管理。JSP的应用服务器在这方面支持要少些；</span>\n\n**<span style=\"font-family: 华文中宋; font-size: small;\">跨平台</span>**\n\n<span style=\"font-family: 华文中宋; font-size: small;\">.NET:0 分</span>\n\n<span style=\"font-family: 华文中宋; font-size: small;\">PHP：5分</span>\n\n<span style=\"font-family: 华文中宋; font-size: small;\">JSP：5分</span>\n\n<span style=\"font-family: 华文中宋; font-size: small;\">曾几何时，我对跨平台不屑一顾，想着好端端的一个应用，既然是定位在这个平台上开发的，干嘛要移植到其它平台上。如今，我是深有体会。手上一个项目，公司由于成本压力，需要将应用从 SUN Unix移植到Linux平台（Redhat)。我们的程序基本上不用改动，在Linux上编译就只多了几个警告，改改就可上线了；而另一个项目，我被深度套牢！我们使用的是Windows平台的ASP.NET，由于受到Windows的病毒泛滥加上WEB管理的麻烦，迫切希望能移植到Linux平台，但这基本上不可能实现。若真想将这应用移植，只有下狠心使用PHP等重写应用，换系统架构。PHP、JSP都可跨平台，不用多说。</span>\n\n**<span style=\"font-family: 华文中宋; font-size: small;\">当前主流应用的选择</span>**\n\n<span style=\"font-family: 华文中宋; font-size: small;\">PHP：当前WEB创业公司的语言选择主要集中在PHP。除了上述原因还有一个重要原因就是PHP开发程序员队伍的规模。</span>\n\n<span style=\"font-family: 华文中宋; font-size: small;\">淘宝网（阿里巴巴）: Linux操作系统 + Web 服务器: Apache +PHP</span>\n\n<span style=\"font-family: 华文中宋; font-size: small;\">PHP的应用太多，这里不再列举；</span>\n\n<span style=\"font-family: 华文中宋; font-size: small;\">ASP.NET：在创业公司中应用不多，知名互联网应用有限，目前比较知名的应用有：</span>\n\n<span style=\"font-family: 华文中宋; font-size: small;\">博客园、CSDN、eBay、MySpace等；</span>\n\n<span style=\"font-family: 华文中宋; font-size: small;\">JSP：JSP实施比较庞大，用好的就得用到websphere或weblogic这样的大物件，种种原因使得JSP在互联网公司中应用并不多，除了阿里巴巴，没有几个公司能驾驭JAVA（JSP）。深入JAVA需要多年修炼，而成精之后，公司是否有足够的薪水来留住这么一群高手是个考验；</span>\n\n<span style=\"font-family: 华文中宋; font-size: small;\">阿里巴巴：Linux+（JSP）</span>\n\n**<span style=\"font-family: 华文中宋; font-size: small;\">总结</span>**\n\n<span style=\"font-family: 华文中宋; font-size: small;\">如今流行的Ruby，也是创业公司的一个选择；python的优雅，也可考虑尝试（豆瓣使用的Python）；但选择这些语言的一个风险是公司规模扩大后，是否能找到足够的人才得打个问号。总的来说，创业面临选择一门开发语言，PHP当是首选；如果不考虑Linux平台，铁定在Windows上运营，.NET也是一个不错的选择。JSP小公司勿近，危险，容易造成的资金套牢。</span>\n\n&nbsp;\n\n<span style=\"color: #c0c0c0;\">作者：<span style=\"color: #ff0000;\">[<span style=\"color: #ff0000;\">大CC</span>](http://www.cnblogs.com/me115/archive/2011/09/27/2193250.html)</span></span>\n\n<span style=\"color: #c0c0c0;\">除非注明，文章均为<span style=\"color: #ff0000;\">[<span style=\"color: #ff0000;\">寒枫</span>](http://173.234.48.113 \"寒枫\")</span>原创，欢迎转载！转载请注明本文地址，谢谢。</span>\n\n<span style=\"color: #c0c0c0;\">本文地址：<span style=\"color: #ff0000;\">[<span style=\"color: #ff0000;\">http://173.234.48.113/如何选择web开发语言.html</span>](http://173.234.48.113/如何选择web开发语言.html)</span></span>","mtime":1386295818000,"source":"_posts/如何选择web开发语言.md"},"k1zboxs1klc8tbaq":{"_id":"k1zboxs1klc8tbaq","content":"title: \"妙用Google Keyword Tool 关键词工具找外贸客户\"\nid: 494\ndate: 2012-10-05 12:50:20\ntags: \ncategories: \n- 电子商务\n---\n\n做英文SEO的人大多数都会使用一个关键词工具叫Google Keyword Tool，我们在为自己网站选择关键词的时候，又或是写文章前，往往都需要锁定几个主要的关键词进行优化，那么谷歌的关键词工具就很好的帮大家进行了头脑风暴Brain Storming。很多时候我们主观认为客户会搜索的关键词未必是客户心里所想的，比如我们是做油画的，可能会觉得老外会搜索 ‘ Oil Painting‘这个关键词，但实际上除了这个关键词，还会有很多潜在客户会输入‘Wall art’ ‘Decoration art’之类的词汇。那这和帮我们找外贸客户有啥关系呢？\n<!-- more -->\n&nbsp;\n\n# **谷歌关键词工具是什么？**\n\n要理解如何利用这些工具来找潜在的外贸客户，首先我们要弄清楚谷歌的关键词工具到底如何用, 简单的来说你只需要在[Google Keyword Tool](https://adwords.google.com/select/KeywordToolExternal \"google关键词工具\")中输入一个关键词，那么系统会自动列出众多的相关和相似的关键词，而这些关键词都是实实在在有用户搜索过的，也就是说是用户的语言。有好几个人在我博客留言说是做油画的，那我就用油画来做这次的案例，首先我们在关键词工具中输入油画 ‘Oil Painting‘ ,这是所有做油画人的商人能想到的第一个关键词。\n\n[![google keyword tool关键词工具 巧用Google Keyword Tool 关键词工具找外贸客户](http://www.mrhua.net/wp-content/uploads/2012/03/google-keyword-tool%E5%85%B3%E9%94%AE%E8%AF%8D%E5%B7%A5%E5%85%B7.jpg \"google keyword tool关键词工具\")](http://www.mrhua.net/wp-content/uploads/2012/03/google-keyword-tool%E5%85%B3%E9%94%AE%E8%AF%8D%E5%B7%A5%E5%85%B7.jpg)\n\n寻找油画相关的关键词\n\n按照上面的三步设置好之后，就可以看到Google Keyword Tool提供了接近800条相关的搜索，那么这些关键词都是有老外实实在在输入过的，换句话说，也是用他们对你产品的理解产生的语言来搜索的。不过也还有一种情况就是和你一样的油画商人自己在搜索引擎中输入来查看自己排名情况的。Anyway, 我们暂时还不需要通过这些词组来决定自己的网站方向，所以还是先看看如何通过这些关键词找到海外潜在买家。\n\n[![关键词工具找客户 巧用Google Keyword Tool 关键词工具找外贸客户](http://www.mrhua.net/wp-content/uploads/2012/03/%E5%85%B3%E9%94%AE%E8%AF%8D%E5%B7%A5%E5%85%B7%E6%89%BE%E5%AE%A2%E6%88%B7.jpg \"关键词工具找客户\")](http://www.mrhua.net/wp-content/uploads/2012/03/%E5%85%B3%E9%94%AE%E8%AF%8D%E5%B7%A5%E5%85%B7%E6%89%BE%E5%AE%A2%E6%88%B7.jpg)\n\n关键词Brian Storming找出相关词\n\n上面的相关关键词数据只是800个词中的冰山一角，仔细分析的话，上面的这些数据包含的信息是非常大的，这里的词分为有商业价值和无商业价值或者是底商业价值的词汇。比如Oil Painting Technique的商业价值相对较低，而Oil painting supplies就很明显具备商业价值。同时你会发现Oil Painting的说法很多，比如Canvas Painting或者Oil On Canvas这些都是油画的其他说法，也是非常常用的说法，但很多卖油画生意的人却不知道，无疑这会遗失一些客户。\n\n另外需要注意的是我标注红线的地方，两个词组都出现了Cheap这个词，同时搜索也不高，两个都没有超过2000，但竞争度却都为High，与上面的Oil Painting Technique有18000搜索量相比，带Cheap的反而竞争度是High, 这更说明这个词是有很多人争的。很多做油画的朋友拉不下脸说自己的产品Cheap, 毕竟油画听起来还是属于高端的货色，但是用户未必这么思考，我在新西兰做油画，网络销售做到了全国第二，我可以很明确的说，对于大部分的老外来说，他们需要的只是一张能挂在墙上当装饰的画而已。\n\n所以在做关键词的时候要舍得去用Cheap这个词。还有一个很好的列子，在美国做主机的很多空间商起初都不愿意说自己是Cheap Hosting, 非要用Affordable做关键词，结果发现用户都在Google里都搜索Cheap Hosting, 扛不住了最后也只好加入Cheap的队伍中了。当然我这里不是让你在网页介绍自己产品Cheap，而是在搜索引擎中让用户搜索Cheap Oil Painting的时候，你的网站能够出现，如果你真是拉不下这面子，那就专门[做个Landing Page来解决](http://www.mrhua.net/2012/01/landing-page/ \"登陆页landing page\")这个问题吧。\n\n# **如何用关键词工具寻找潜在客户呢？**\n\n很多人用谷歌关键词工具来开发关键词思路，用来做优化。可我们做优化的目的是什么？还不就是为了找到客户，或者说是吸引客户来询盘和购买。针对一些特别的产品，比如油画，是很容易找到买家的。会购买你油画的客人无非以下几种人群：\n\n*   国外的画廊 Art Gallery\n*   国外在网络销售的商家，比如Ebay, Esty以及我的主场Trademe\n*   国外在线下销售的画商\n*   国外的个人，往往这类用户只需要购买不带框的以节省运费\nOkay，当你知道了客户所在群之后，就可以开始搜索了，比如你可以把上面我们从关键词工具中得到的词组放入到Google中搜索，我们输入Canvas Oil Painting, 第一页出现结果:\n\n[![海外油画商 巧用Google Keyword Tool 关键词工具找外贸客户](http://www.mrhua.net/wp-content/uploads/2012/03/%E6%B5%B7%E5%A4%96%E6%B2%B9%E7%94%BB%E5%95%86.jpg \"海外油画外贸\")](http://www.mrhua.net/wp-content/uploads/2012/03/%E6%B5%B7%E5%A4%96%E6%B2%B9%E7%94%BB%E5%95%86.jpg)\n\n搜索结果展示海外油画商家\n\n一眼扫过去，很明显红框中的两家油画商城域名都是.com.au 也就是澳洲的网站。点进去一看，如果你是做油画的，一眼就能看出他的产品肯定是从中国进的，这代表什么？很简单，你可以把他变成你的客户。油画这行，如果你想卖给海外的画廊，那希望很渺小，但如果你想卖给这种生意人，还是很简单的。\n\n这个时候你千万不可急着直接联系他们，问是否愿意和你买画。你需要做的是仔细研究他的油画种类，哪里你能做的比他现在的供货商更好，哪里你能提供更好的服务。等你总结清楚了再联系对方，从我个人做油画的经验看，我最希望的就是中国的画商能提供出些原创的作品，或者说借用美国的现代油画的风格，做下微创新也好，所谓那些上万种画库，早在国外卖烂了。同时这还牵涉到你自己的网站展示需要拿的出手。如果你强过你的竞争对手，迟早有出头的日子，[比如林书豪](http://www.mrhua.net/2012/02/lin-shu-hao/ \"林书豪准备好了成功\")。如果你本身实力就不够，那还是专心先把自己实力提升起来，否则就是给一千个现成的买家，也未必能谈成一笔。\n<div>作者: [MRHUA](http://www.mrhua.net/)\n版权属于: [米课外贸培训](http://www.imiker.com/)\n版权所有，转载时必须以链接形式注明作者和原始出处及本声明。</div>","mtime":1386295472000,"source":"_posts/妙用google-keyword-tool-关键词工具找外贸客户.md"},"fnnj0r4z4267hqre":{"_id":"fnnj0r4z4267hqre","content":"title: \"一、开发环境的搭建和hello world\"\nid: 570\ndate: 2013-05-24 10:06:04\ntags: \n- QT\n- Qt环境\ncategories: \n- Qt\n- 程序人生\n---\n\n<div><span style=\"font-family: 宋体; font-size: 10.5pt; mso-bidi-font-size: 12.0pt; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'; mso-bidi-font-family: 'Times New Roman'; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA;\">本篇主要讲解</span><span lang=\"EN-US\" style=\"font-family: 'Times New Roman'; font-size: 10.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-fareast-font-family: 宋体;\">Qt</span><span style=\"font-family: 宋体; font-size: 10.5pt; mso-bidi-font-size: 12.0pt; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'; mso-bidi-font-family: 'Times New Roman'; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA;\">编程环境的搭建。<span style=\"font-family: 宋体; font-size: 10.5pt; mso-bidi-font-size: 12.0pt; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'; mso-bidi-font-family: 'Times New Roman'; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA;\">这里选择使用</span><span lang=\"EN-US\" style=\"font-family: 'Times New Roman'; font-size: 10.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-fareast-font-family: 宋体;\">Windows</span><span style=\"font-family: 宋体; font-size: 10.5pt; mso-bidi-font-size: 12.0pt; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'; mso-bidi-font-family: 'Times New Roman'; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA;\">系统的</span><span lang=\"EN-US\" style=\"font-family: 'Times New Roman'; font-size: 10.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-fareast-font-family: 宋体;\">Qt</span><span style=\"font-family: 宋体; font-size: 10.5pt; mso-bidi-font-size: 12.0pt; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'; mso-bidi-font-family: 'Times New Roman'; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA;\">版本。<span style=\"font-family: 宋体; font-size: 10.5pt; mso-bidi-font-size: 12.0pt; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'; mso-bidi-font-family: 'Times New Roman'; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA;\">我们主要讲解基本</span><span lang=\"EN-US\" style=\"font-family: 'Times New Roman'; font-size: 10.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-fareast-font-family: 宋体;\">Qt</span><span style=\"font-family: 宋体; font-size: 10.5pt; mso-bidi-font-size: 12.0pt; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'; mso-bidi-font-family: 'Times New Roman'; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA;\">控件项目的桌面编程，<span style=\"font-family: 宋体; font-size: 10.5pt; mso-bidi-font-size: 12.0pt; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'; mso-bidi-font-family: 'Times New Roman'; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA;\">采用了</span><span lang=\"EN-US\" style=\"font-family: 'Times New Roman'; font-size: 10.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-fareast-font-family: 宋体;\">Qt</span><span style=\"font-family: 宋体; font-size: 10.5pt; mso-bidi-font-size: 12.0pt; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'; mso-bidi-font-family: 'Times New Roman'; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA;\">库与</span><span lang=\"EN-US\" style=\"font-family: 'Times New Roman'; font-size: 10.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-fareast-font-family: 宋体;\">Qt Creator</span><span style=\"font-family: 宋体; font-size: 10.5pt; mso-bidi-font-size: 12.0pt; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'; mso-bidi-font-family: 'Times New Roman'; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA;\">下载安装的方式。</span></span></span></span></div>\n<!--more-->\n<div>\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">一、</span><span lang=\"EN-US\"><span style=\"font-family: 'Times New Roman';\">Qt </span></span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">及</span><span lang=\"EN-US\"><span style=\"font-family: 'Times New Roman';\"> Qt Creator</span></span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">的下载和安装</span>**\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">1、下载</span>**\n\n<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">**    Qt官网：**[http://qt-project.org/](http://qt-project.org/)    **MinGW官网：**[http://www.mingw.org/](http://www.mingw.org/)</span>\n\n<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">    **下载Qt 4.8.4版本：**[http://download.qt-project.org/official_releases/qt/4.8/4.8.4/qt-win-opensource-4.8.4-mingw.exe](http://download.qt-project.org/official_releases/qt/4.8/4.8.4/qt-win-opensource-4.8.4-mingw.exe)</span>\n\n<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\"><span style=\"font-family: 宋体; font-size: 10.5pt; mso-bidi-font-size: 12.0pt; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'; mso-bidi-font-family: 'Times New Roman'; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA;\">    **下载**</span><span lang=\"EN-US\" style=\"font-family: 'Times New Roman'; font-size: 10.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-fareast-font-family: 宋体;\">**Qt Creator 2.7.1版本：**[http://download.qt-project.org/official_releases/qtcreator/2.7/2.7.1/qt-creator-windows-opensource-2.7.1.exe](http://download.qt-project.org/official_releases/qtcreator/2.7/2.7.1/qt-creator-windows-opensource-2.7.1.exe)</span></span>\n\n<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\"><span lang=\"EN-US\" style=\"font-family: 'Times New Roman'; font-size: 10.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-fareast-font-family: 宋体;\">       ** 下载MinGW：**</span></span>\n\n<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\"><span lang=\"EN-US\" style=\"font-family: 'Times New Roman'; font-size: 10.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-fareast-font-family: 宋体;\"><span style=\"font-family: 宋体;\">            [http://sourceforge.net/projects/mingw/files/](http://sourceforge.net/projects/mingw/files/)</span>（选择最新版本下载，现在是[<span style=\"background-color: transparent; margin: 0px; outline-style: none; outline-color: invert; outline-width: 0px; font-size: 13px; vertical-align: baseline; border: 0px; padding: 0px;\">**<span style=\"font-family: Arial;\">mingw-get-inst-20120426.exe (662.7 kB)</span>**</span>](http://sourceforge.net/projects/mingw/files/latest/download?source=files \"/Installer/mingw-get-inst/mingw-get-inst-20120426/mingw-get-inst-20120426.exe:  released on 2012-04-27 02:48:55 UTC\")）（联网安装）</span></span>\n\n<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\"><span lang=\"EN-US\" style=\"font-family: 'Times New Roman'; font-size: 10.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-fareast-font-family: 宋体;\">                     [<span style=\"font-family: 宋体;\">http://tdm-gcc.tdragon.net/download</span>](http://tdm-gcc.tdragon.net/download)（离线安装版本）</span></span>\n\n<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\"><span lang=\"EN-US\" style=\"font-family: 'Times New Roman'; font-size: 10.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-fareast-font-family: 宋体;\">**2、安装**</span></span>\n\n<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\"><span lang=\"EN-US\" style=\"font-family: 'Times New Roman'; font-size: 10.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-fareast-font-family: 宋体;\">        先安装MinGW，因为是采用联网下载安装，所以速度比较慢。</span></span>\n\n<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\"><span lang=\"EN-US\" style=\"font-family: 'Times New Roman'; font-size: 10.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-fareast-font-family: 宋体;\">        再安装Qt核心库，最后安装Qt Creator。</span></span>\n\n<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\"><span lang=\"EN-US\" style=\"font-family: 'Times New Roman'; font-size: 10.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-fareast-font-family: 宋体;\">        具体安装步骤可以Google。</span></span><span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\"><span lang=\"EN-US\" style=\"font-family: 'Times New Roman'; font-size: 10.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 1.0pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-fareast-font-family: 宋体;\">        </span></span>\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">二、创建</span><span lang=\"EN-US\"><span style=\"font-family: 'Times New Roman';\">hello world</span></span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">程序</span>**\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">三、发布程序</span>**\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">四、</span><span lang=\"EN-US\"><span style=\"font-family: 'Times New Roman';\">Qt</span></span>****<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">工具介绍</span>**\n\n**<span style=\"font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman';\">五、附录</span>**\n\n</div>","mtime":1386290932000,"source":"_posts/开发环境的搭建和hello-world.md"},"8x2x65fvydv3mdl7":{"_id":"8x2x65fvydv3mdl7","content":"title: \"安装JDK 6和手动配置Tomcat 7\"\nid: 850\ndate: 2013-06-12 10:52:36\ntags: \n- JAVA\n- JDK\n- JDK6\n- tomcat7\ncategories: \n- JAVA\n---\n\n## JDK篇\n\n### 1、JDK 6下载\n\n下载地址：[http://www.oracle.com/technetwork/java/javase/downloads/jdk6downloads-1902814.html](http://www.oracle.com/technetwork/java/javase/downloads/jdk6downloads-1902814.html)\n\n### 2、JDK 安装\n\n请安步骤安装，不再详细描述。\n<!-- more -->\n### 3、JDK配置\n\n添加环境变量 ， 右键 我的电脑-&gt;属性-&gt;高级-&gt;环境变量\n\n新建系统变量，变量名为：`JAVA_HOME`  变量值为：JDK的安装根目录，我这里是 `D:\\Program Files\\Java\\jdk1.6.0_45`\n\n编辑原有的系统变量 `Path` ,在变量值的最后面加上英文的分号 ，然后加上 `%JAVA_HOME%\\bin;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\jre\\bin`;\n\n### 4、验证配置是否成功\n\n执行CMD命令   输入 `javac`  如果看到很多帮助命令，则表示环境变量配置成功了。XP系统可能需要重启才生效。\n\n## Tomcat 7篇\n\n### 1、下载 `Tomcat 7.0`\n\n下载地址：[http://tomcat.apache.org/download-70.cgi](http://tomcat.apache.org/download-70.cgi)\n\n我下载的是压缩便携版，如果你下载的是安装版直接安装就可以。便携版配置步骤如下。\n\n### 2、解压\n\n解压Tomcat7.0 免安装Win-32Bit版 到D:\\  目录结构为：D:\\apache-tomcat-7.0.41\n\n### 3、添加环境变量\n\n右键 我的电脑-&gt;属性-&gt;高级-&gt;环境变量\n新建系统变量，变量名：`TOMCAT_HOME` 变量值：`D:\\apache-tomcat-7.0.41`\n\n### 4、编辑原有的系统变量 Path\n\n在变量值的最后面加上`%TOMCAT_HOME%\\lib;%TOMCAT_HOME%\\lib\\servlet-api.jar;%TOMCAT_HOME%\\lib\\jsp-api.jar`\n\n### 5、配置Tomcat 管理员\n\n进入D:\\apache-tomcat-7.0.41\\conf 目录，编辑`tomcat-users.xml`\n\n添加如下代码：\n{%codeblock lang:xml%}\n<role rolename=\"manager-gui\"/>\n<role rolename=\"admin-gui\"/>\n<user username=\"admin\" password=\"admin\" roles=\"manager-gui,admin-gui\"/>\n{%endcodeblock%}\n\nTomcat管理员的账号和密码为 admin\n\n如果角色不为：`manager-gui`,`admin-gui`就会出现403错误~\n\n### 6、启动tomcat\n\n进入`D:\\apache-tomcat-7.0.41\\bin` 找到 `startup.bat`  双击启动Tomcat，出现命令窗口，不要关闭。\n\n### 7、验证是否成功\n\n浏览器地址输入：[http://127.0.0.1:8080](http://127.0.0.1:8080/) 如果看到tomcat 欢迎界面则表示配置成功了。","mtime":1386294881000,"source":"_posts/安装jdk-6和手动配置tomcat-7.md"},"x5qzl0wiwu8auqt8":{"_id":"x5qzl0wiwu8auqt8","content":"title: \"技术人员如何创业(一)\"\nid: 807\ndate: 2013-06-07 14:23:40\ntags: \n- 技术创业\ncategories: \n- 互联网\n---\n\n不得不说这是个浮躁的社会，人人在这个社会都想暴富或者成名。在这些引诱的驱使下很多人都脱离了原来的稳定工作创业。前几天看了《中国合伙人》，故事讲到了几个大学生从校园到工作、再到创办了一个伟大的企业，这个故事更加激励了创业大军的壮大。大家都想创业，那我们技术人员怎么创业？\n\n1、好的想法、产品构思。\n\n2、好的合伙人。三板斧，管理、销售、技术。\n\n3、构建强大执行力的团队。\n<!-- more -->\n<span>**产品及想法：**\n什么是好的产品？一个朋友之前问到，这个问题要系统的回答还真有点不好说。看一下比较理论的解释，产品指一个能够满足用户的需求，我们能够使用可行的技术手段实现并且通过销售给用户给公司带来利润。好的产品指具有很好的用户体验，能够满足用户的刚性需求，受众用户市场空间很大，产品具有核心竞争力，具有不可复制性，有收益并且具备很好的产业链和利益平衡点。</span>\n\n<span>我们技术人员设计产品会是什么样子？这点在创业中遇到了很多问题。有一些技术人员拿到一个产品就开始想象自己的产品未来如何的好，将来会赚多少钱，结果研发到最后往往不是这样的。为什么呢？因为技术人员平时自己总是在搞定一个又一个的问题，做完了一个别人提给自己的需求就觉得自己信心暴涨，认为这么简单的产品自己也可以很轻松就做出来了。看看自己搞的程序，这么复杂的工程，多有成就感。可是，自信心爆满的工程师如果不自我总结，研究用户需求、研究产品，只是自己一个人关门造车的话很难开发一个大众都喜欢的产品。</span>\n\n<span>现在我们处于一个信息量大、优秀产品非常多的时代。要在这个时代获得成功必须得迎合用户的需求甚至超出期望才行。技术人员怎么操作呢？</span>\n\n<span>**1、做市场调研、多和客户沟通、认真做好需求分析。**</span>\n\n<span>这个看似简单，对于技术人员确实难度很大。因为毕竟大家习惯了面对电脑，喜欢了在电脑面前攻克难题，让我们去做这些事情总觉得时间花的不值得。有时候可能会想，我花这个时间去做个计划、去和客户沟通、写个需求文档还不如多学一点技术或者多写一些代码。技术相关的事情才是看得到摸得着的东西。这样就错了！大错特错！</span>\n\n<span>很多创业公司开始没有产品经理，像facebook的ceo扎克伯格。或者只有技术一个人，这个时候公司的创始人就承担了产品经理的角色，如果创始人就把自己的点子抛出来给大家或者稍微分解一下就给到大家。然后大家分别去实现，自己也不管了，忙着开发自己的功能模块。以我们的经验，最后肯定是个四不像的产品。那意思就是不开发产品了吗？看看电影《社交网络》就知道，扎克伯克其实不仅仅是技术很牛，网站搞瘫了整个哈佛的网络，他的商业敏锐度和用户需求也拿捏得很好。在设计第一个长相匹配的网站时他知道整合爱德华的算法。在设计facebook时知道怎么利用其他学校都想和哈佛名牌学校的学生交友、如何通过熟人关系网络邮件营销、添加用户是否单身的标示（最后这个功能大获成功）。</span>\n\n<span>看到这里其实大家会想到，其实facebook的成功并不是因为他本身产品的技术多么牛，而是他把握好了产品用户的心理、选择了合适的营销方式、整合自身独有的资源优势（哈佛）。其实他这个php网站我想现在很多学过web编程的都可以制造出来，有几个能做成facebook呢？</span>\n\n<span>在《中国合伙人》中也有个场景，成东青因为在外面开小班被大学辞退了。最后一堂课时改变了原有的讲课风格，原来上课小心谨慎的照着课本讲，课上的同学都在睡觉（因为那个时候风气比较严谨），因为他在乎这份工作所以特别小心注意。最后一堂课给大家调侃自己的感情经历，已经释然反正都已经被学校辞退了，结果讲课的风格大受同学欢迎。这个就是市场，有时候自己觉得对的不一定是对的，而是要和用户交流，充分尊重用户。他最后把同学当成朋友，也为他后面赢得了新梦想。</span>\n\n<span>这些在技术人员看起来的没有技术含量的脏活、累活反而是一个产品成功的关键。</span>\n\n<span>**2、适当的抛开技术，避免影响到产品设计和开发**</span>\n\n<span>技术人员设计产品时，总会把系统搞得特别是复杂。因为做技术框架时会想到重用、接口定义时要很灵活。一但这些技术方面的原因占据了产品的主导地位，那这个产品最终会超级复杂。不过有一点，除非你的客户是专有的或者是面向技术型客户。不过面向大部分社会上的产品一般都比较傻瓜化、尽量简化，不让用户思考，一看这个系统就知道怎么使用。</span>\n\n<span>facebook曾经为了诸多技术原因选择了通用平台化的Html5作为技术实现。最终却因为用户的抱怨不得不重新使用ios、andriod开发原有应用。</span>\n\n<span>很多技术在设计系统时，总想把很多新技术带入项目中来，让自己觉得特别牛X。殊不知这样的技术自己能否掌控，如果掌控不了到时候出了问题影响的就是产品的口碑。并且引入新技术，带来了学习成本，如果团队中还有其他成员，未来他们如何学习和开发。</span>\n\n<span>技术人员还有个弊病。觉得自己的技术非常牛，人家不可能超越我的技术（也就是未来我的产品肯定是市场占有率最高的，通俗讲我的产品是最赚钱的）。研发几个月后发现竞争产品推出来了，会觉得他的技术多么弱，不削一顾。再过几个月，发现对方产品已经占据很多客户，并且推出了好几个新产品，还是觉得他的核心竞争力没有，技术能力弱，我的技术毫无压力的压倒他。再过几个月，tnnd，我这么好的产品怎么没有市场呢，赶紧换一个产品。。。。。结果可想而知。就算是自己最开始研发这种类型的产品，结果到后面反而没有赚到钱。这就是盲目的技术自信，而不是商业自信，开公司是要赚钱的，赚钱才能养活公司。</span>\n\n<span>技术人员设计产品时，一定要有市场眼光、简单化功能、适当摈弃技术。刚开始要做到这些可能很难，需要大家强迫自己不往技术方面思考，不过我觉得只要多发现、总结自己的问题，并想到解决方案终会创造一款好的产品。如果大家尝试了无数次，还是技术影响整个产品的设计，推荐几个选择：\na、找到互补的合伙人，弥补你的短板。\nb、开发技术类产品。\nb、回到公司工作继续做技术。</span>\n<pre>转载：[http://www.apkbus.com/android-121994-1-1.html](http://www.apkbus.com/android-121994-1-1.html)</pre>","mtime":1386295686000,"source":"_posts/技术人员如何创业一.md"},"mz46f2172j5i46s8":{"_id":"mz46f2172j5i46s8","content":"title: \"二、窗口部件\"\nid: 574\ndate: 2013-05-24 10:13:04\ntags: \n- QT\n- 窗口部件\ncategories: \n- Qt\n- 程序人生\n---\n\n# 1、基础窗口部件QWidget\n\n<div>    QWidget类是所有用户界面对象的基类，被称为基础窗口部件。QWidget继承自QObject类和QPaintDevice类，其中QObject类是所有支持Qt对象模型（Qt Object Model）的基类，QPaintDevice类是所有可以绘制的对象的基类。</div>\n\n## 1.1 窗口、子部件以及窗口类型\n\n###     窗口与子部件\n\n<!--more-->\n<div>      我们通过例子源码来解释哈：创建空的Qt项目，源代码如下：</div>\n<div>&lt;pre&gt;</div>\n<div></div>\n<div style=\"text-align: left; background-color: window; font-family: Courier New; color: black; margin-left: auto; font-size: 12px; margin-right: auto; border: black 1px solid; padding: 3px;\">#<span style=\"color: #0000ff;\">**include**</span><span style=\"color: #333399;\">&lt;</span>QtGui<span style=\"color: #333399;\">&gt;</span></div>\n<span style=\"color: #0000ff;\">**int**</span> main(<span style=\"color: #0000ff;\">**int**</span> argc,<span style=\"color: #0000ff;\">**char**</span> <span style=\"color: #333399;\">*</span> argv[])\n{\nQApplication a(argc,argv);\nQTextCodec<span style=\"color: #333399;\">:</span><span style=\"color: #333399;\">:</span>setCodecForTr(QTextCodec<span style=\"color: #333399;\">:</span><span style=\"color: #333399;\">:</span>codecForLocale()); <span style=\"color: #008000;\">//设置使用中文</span>\n<span style=\"color: #008000;\">//新建QWidget类对象，默认parent参数数是0</span>\nQWidget <span style=\"color: #333399;\">*</span>widget <span style=\"color: #333399;\">=</span> <span style=\"color: #0000ff;\">**new**</span> QWidget(<span style=\"color: #6e00aa;\">0</span>,Qt<span style=\"color: #333399;\">:</span><span style=\"color: #333399;\">:</span>Dialog);\nwidget<span style=\"color: #333399;\">-</span><span style=\"color: #333399;\">&gt;</span>setWindowTitle(QObject<span style=\"color: #333399;\">:</span><span style=\"color: #333399;\">:</span>tr(<span style=\"color: #ff00bf;\">\"我是Widget，是一个窗口\"</span>));\n<span style=\"color: #008000;\">//新建Qlabel对象，默认parent参数数是0</span>\nQLabel <span style=\"color: #333399;\">*</span>label <span style=\"color: #333399;\">=</span> <span style=\"color: #0000ff;\">**new**</span> QLabel(<span style=\"color: #6e00aa;\">0</span>,Qt<span style=\"color: #333399;\">:</span><span style=\"color: #333399;\">:</span>SplashScreen);\nlabel<span style=\"color: #333399;\">-</span><span style=\"color: #333399;\">&gt;</span>setWindowTitle(QObject<span style=\"color: #333399;\">:</span><span style=\"color: #333399;\">:</span>tr(<span style=\"color: #ff00bf;\">\"我是Label，我是一个窗口\"</span>));\n<span style=\"color: #008000;\">//设置显示信息</span>\nlabel<span style=\"color: #333399;\">-</span><span style=\"color: #333399;\">&gt;</span>setText(QObject<span style=\"color: #333399;\">:</span><span style=\"color: #333399;\">:</span>tr(<span style=\"color: #ff00bf;\">\"我是个窗口哦，别认错了！\"</span>));\n<span style=\"color: #008000;\">//设置窗口大小</span>\nlabel<span style=\"color: #333399;\">-</span><span style=\"color: #333399;\">&gt;</span>resize(<span style=\"color: #6e00aa;\">200</span>,<span style=\"color: #6e00aa;\">60</span>);\n\n<span style=\"color: #008000;\">// 指定label2的父窗口</span>\nQLabel <span style=\"color: #333399;\">*</span>label2 <span style=\"color: #333399;\">=</span> <span style=\"color: #0000ff;\">**new**</span> QLabel(widget);\nlabel2<span style=\"color: #333399;\">-</span><span style=\"color: #333399;\">&gt;</span>setText(QObject<span style=\"color: #333399;\">:</span><span style=\"color: #333399;\">:</span>tr(<span style=\"color: #ff00bf;\">\"我是Label2，不是独立窗口，是widget的子部件哦！\"</span>));\nlabel2<span style=\"color: #333399;\">-</span><span style=\"color: #333399;\">&gt;</span>resize(<span style=\"color: #6e00aa;\">300</span>,<span style=\"color: #6e00aa;\">120</span>);\n\n<span style=\"color: #008000;\">//在屏幕显示</span>\nwidget<span style=\"color: #333399;\">-</span><span style=\"color: #333399;\">&gt;</span>show();;\nlabel<span style=\"color: #333399;\">-</span><span style=\"color: #333399;\">&gt;</span>show();\n<span style=\"color: #008000;\">//label2-&gt;show();</span>\n<span style=\"color: #0000ff;\">**int**</span> ret <span style=\"color: #333399;\">=</span> a.exec();\n<span style=\"color: #0000ff;\">**delete**</span> label;\n<span style=\"color: #0000ff;\">**delete**</span> widget;\n<span style=\"color: #0000ff;\">**return**</span> ret;\n}\n\n&lt;/pre&gt;\n<div>    程序包含头文件#include&lt;QtGui&gt;,QApplication类、QWidget类都包含在QtGui模块里面。原则上尽可能包含少的头文件。</div>\n<div>    程序定义了一个QWdiget类对象的指针widget和两个QLabel对象的指针label和label2。label没有父窗口，label2在widget里面，所有widget是其父窗口。</div>\n<div>    使用new操作符为label和label2分配了空间，但是没有使用delete对label2进行释放。因为在Qt中销毁父对象的时候会自动销毁子对象。根据程序定义我们可以知道label2指定了parent为widget，所有在delete父窗口的widget指针对象会自动销毁子对象label2.</div>\n<div>    窗口部件是Qt中建立用户界面的主要元素。像主窗口、对话框、标签还有按钮、文本输入框等都是窗口部件。这些部件可以接收用户输入，显示数据和状态信息，并且在屏幕上绘制自己。有些可以作为一个容器，用来放置其他部件。</div>\n<div>    Qt中把没有嵌入到其他部件中的部件称为窗口，一般窗口都有边框和标题栏。窗口就是没有父部件的部件，所以称为顶级部件。与其相对的非窗口部件，又称为子部件。Qt中大部分部件用于子部件，嵌入在别的窗口中。</div>\n<div>    QWidget提供了绘制自己和处理用户输入事件的基本功能，Qt提供了所有界面的元素不是QWidget的子类就是与QWidget的子类相关联。要设计自己的窗口部件，可以继承自QWidget或者她的子类。</div>\n\n###   窗口类型\n\n<div>    QWidget的构造函数有2个参数：QWidget *parent = 0和Qt：：WindowFlags f = 0.parent就是指父窗口部件，默认值0表示没有父窗口。f参数是一个枚举类型，分为窗口类型（WindowType）和窗口标识（WindowFlags）。前者可以定义窗口的类型，f=0表明使用了Qt：Widget项的默认类型，这种类型的部件如果有父窗口，那么它就是子部件，否则就是度量窗口。</div>\n<div>    代码如下：</div>\n<div>\n<div>\n<div style=\"text-align: left; background-color: window; font-family: Courier New; color: black; margin-left: auto; font-size: 12px; margin-right: auto; border: black 1px solid; padding: 3px;\">QWidget <span style=\"color: #333399;\">*</span>widget <span style=\"color: #333399;\">=</span> <span style=\"color: #0000ff;\">**new**</span> QWidget(<span style=\"color: #6e00aa;\">0</span>,Qt<span style=\"color: #333399;\">:</span><span style=\"color: #333399;\">:</span>Dialog);\nQLabel <span style=\"color: #333399;\">*</span>label <span style=\"color: #333399;\">=</span> <span style=\"color: #0000ff;\">**new**</span> QLabel(<span style=\"color: #6e00aa;\">0</span>,Qt<span style=\"color: #333399;\">:</span><span style=\"color: #333399;\">:</span>SplashScreen);</div>\n</div>\n</div>\n<div>    窗口的标识的作用是更改窗口的标题栏和边框，而且可以和窗口类型进行为或操作。</div>\n<div>\n<div>\n<div style=\"text-align: left; background-color: window; font-family: Courier New; color: black; margin-left: auto; font-size: 12px; margin-right: auto; border: black 1px solid; padding: 3px;\">QWidget <span style=\"color: #333399;\">*</span>widget <span style=\"color: #333399;\">=</span> <span style=\"color: #0000ff;\">**new**</span> QWidget(<span style=\"color: #6e00aa;\">0</span>,Qt<span style=\"color: #333399;\">:</span><span style=\"color: #333399;\">:</span>Dialog<span style=\"color: #333399;\">|</span>Qt<span style=\"color: #333399;\">:</span><span style=\"color: #333399;\">:</span>FramelessWindowHint);\nQLabel <span style=\"color: #333399;\">*</span>label <span style=\"color: #333399;\">=</span> <span style=\"color: #0000ff;\">**new**</span> QLabel(<span style=\"color: #6e00aa;\">0</span>,Qt<span style=\"color: #333399;\">:</span><span style=\"color: #333399;\">:</span>SplashScreen<span style=\"color: #333399;\">|</span>Qt<span style=\"color: #333399;\">:</span><span style=\"color: #333399;\">:</span>WindowStaysOnTopHint);</div>\n</div>\n</div>\n<div>    Qt<span style=\"color: #333399;\">:</span><span style=\"color: #333399;\">:</span>FramelessWindowHint 用来产生一个没有边框的窗口；</div>\n<div>    Qt<span style=\"color: #333399;\">:</span><span style=\"color: #333399;\">:</span>WindowStaysOnTopHint用来使该窗口停留在所有其他窗口上面</div>\n\n## 1.2 窗口几何布局\n\n<div>    对于窗口，我们需要设置它的大小和运行时出现的位置。对于窗口的大小和位置，根据是否包含边框和标题栏两种，要使用不同的函数来获取。如下图</div>\n<div>    ![](http://173.234.48.113/wp-content/uploads/2013/05/wpid-2a7ffe604cfed30698cadf01322cb02e_23677953.jpg)</div>\n<div>    函数分类</div>\n<div>    包含框框：x(),y(),frameGeometry(),post(),move()等</div>\n<div>    不包含框框：genmetry(),width(),height(),rect(),size()</div>\n\n## 1.3 程序调试\n\n*   设置断点\n*   单步调试\n*   使用qDebug()函数：将调试信息直接输出到控制台\n\n## 2 对话框 QDialog\n\n##     2.1 模态和非模态对话框\n\n<div>      QDialog类是所有对话框窗口类的基础。对话框窗口是一个经常用来完成一个短小任务或者和用户进行简单交互的顶层窗口。</div>\n<div>      新建Qt Gui应用，源代码如下：</div>\n<div>\n<div style=\"text-align: left; background-color: window; font-family: Courier New; color: black; margin-left: auto; font-size: 12px; margin-right: auto; border: black 1px solid; padding: 3px;\">#<span style=\"color: #0000ff;\">**include**</span> <span style=\"color: #ff00bf;\">\"mywidget.h\"</span>\n#<span style=\"color: #0000ff;\">**include**</span> <span style=\"color: #ff00bf;\">\"ui_mywidget.h\"</span>\n#<span style=\"color: #0000ff;\">**include**</span><span style=\"color: #333399;\">&lt;</span>QDialog<span style=\"color: #333399;\">&gt;</span></div>\n</div>\nMyWidget<span style=\"color: #333399;\">:</span><span style=\"color: #333399;\">:</span>MyWidget(QWidget <span style=\"color: #333399;\">*</span>parent) <span style=\"color: #333399;\">:</span>\nQWidget(parent),\nui(<span style=\"color: #0000ff;\">**new**</span> Ui<span style=\"color: #333399;\">:</span><span style=\"color: #333399;\">:</span>MyWidget)\n{\nui<span style=\"color: #333399;\">-</span><span style=\"color: #333399;\">&gt;</span>setupUi(<span style=\"color: #0000ff;\">**this**</span>);\n<span style=\"color: #008000;\"> QDialog dialog(this);</span>\n<span style=\"color: #008000;\"> dialog.show();</span>\n}\n\nMyWidget<span style=\"color: #333399;\">:</span><span style=\"color: #333399;\">:</span><span style=\"color: #333399;\">~</span>MyWidget()\n{\n<span style=\"color: #0000ff;\">**delete**</span> ui;\n}\n<div>    通过程序代码我们发现，类的构造函数里面定义了一个QDialog类对象，还制定了父窗口为MyWidget类对象，那就是this参数，最后调用show()函数显示。运行程序我们会发现窗口一闪而过，然后只显示MyWidget类对象的窗口。why？</div>\n<div>    因为在一个函数中定义的变量，等这个函数执行结束后，它会自动释放。也就是说dialog对象只在这个构造函数里面里面有用，等构造函数执行完毕，dialog也就消失了。如何解决呢？</div>\n<div>    我们可以使用QDialog对象的指针，定义一个指向QDialog类对象的指针变量，并使用new运算符开票内存空间，在运行程序就会正常显示了。</div>\n<div>\n<div style=\"text-align: left; background-color: window; font-family: Courier New; color: black; margin-left: auto; font-size: 12px; margin-right: auto; border: black 1px solid; padding: 3px;\">QDialog <span style=\"color: #333399;\">*</span>dialog <span style=\"color: #333399;\">=</span> <span style=\"color: #0000ff;\">**new**</span> QDialog(<span style=\"color: #0000ff;\">**this**</span>);\ndialog<span style=\"color: #333399;\">-</span><span style=\"color: #333399;\">&gt;</span>show();</div>\n</div>\n<!--EndFragment-->\n<div>    如果不使用指针，我们还有办法让对话框显示出来吗？有的？</div>\n<div>    可以将代码更改如下：</div>\n<div>\n<div>\n<div style=\"text-align: left; background-color: window; font-family: Courier New; color: black; margin-left: auto; font-size: 12px; margin-right: auto; border: black 1px solid; padding: 3px;\">QDialog dialog(<span style=\"color: #0000ff;\">**this**</span>);\ndialog.exec();</div>\n</div>\n</div>\n<div>    再次运行程序，但是问题出来了，我们发现只弹出了dialog的对话框，MyWidget类对象的窗口并没有出来，关闭了对话框后，MyWidget类对象的窗口才弹出来。这就是我们所说的模态对话框。所谓模态对话框就是没有关闭该对话框之前，不能再与同一个应用程序的其他窗口进行交互。</div>\n<div>    其他我们使用show()函数也是可用建立模态对话框的，只要在前面使用setModal()函数即可。</div>\n<div>\n<div>\n<div style=\"text-align: left; background-color: window; font-family: Courier New; color: black; margin-left: auto; font-size: 12px; margin-right: auto; border: black 1px solid; padding: 3px;\">QDialog <span style=\"color: #333399;\">*</span>dialog <span style=\"color: #333399;\">=</span> <span style=\"color: #0000ff;\">**new**</span> QDialog(<span style=\"color: #0000ff;\">**this**</span>);\ndialog<span style=\"color: #333399;\">-</span><span style=\"color: #333399;\">&gt;</span>setModal(<span style=\"color: #0000ff;\">**true**</span>);</div>\n</div>\n</div>\n<div>    exec()函数与show()函数的区别是，使用show()函数MyWidget对象窗口也显示出来，因为调用完show()函数后会立即将控制权交给调用者，那么程序可用继续往下执行。而调用exec()函数只有在对话框被关闭时才会返回。</div>\n\n##     2.2 多窗口切换\n\n###       认识信号和槽\n\n<div>        在Qt中使用信号和槽机制来完成对象之间的协同操作。简单的说，信号和槽都是函数。比如单击窗口上的一个按钮想要弹出一个对话框，那么就可以将这个按钮的单击信号和定义的槽关联起来，在这个槽中可以创建一个对话框并显示。这样单击这个按钮时就会发射信号，进而执行槽来显示一个对话框。</div>\n<div>    我们可以通过源代码来深入了解下，代码如下：</div>\n<div>    1、在设计界面mywidget.ui添加一个Push Button，并将objectName改为showChildButton。</div>\n<div>    2、在MyWidget类声明中写上槽声明：</div>\n<div>\n<div>\n<div style=\"text-align: left; background-color: window; font-family: Courier New; color: black; margin-left: auto; font-size: 12px; margin-right: auto; border: black 1px solid; padding: 3px;\"><span style=\"color: #0000ff;\">**public**</span> slots<span style=\"color: #333399;\">:</span>\n<span style=\"color: #0000ff;\">**    void**</span> showChildDialog();</div>\n</div>\n</div>\n<div>    这里是自定义一个槽，槽必须声明为slots，使用public slots，表明槽可以被这个类以外调用。</div>\n<div>    3、实现槽声明</div>\n<div style=\"text-align: left; background-color: window; font-family: Courier New; color: black; margin-left: auto; font-size: 12px; margin-right: auto; border: black 1px solid; padding: 3px;\"><span style=\"color: #0000ff;\">**void**</span> MyWidget<span style=\"color: #333399;\">:</span><span style=\"color: #333399;\">:</span>showChildDialog()\n{\nQDialog <span style=\"color: #333399;\">*</span>dialog <span style=\"color: #333399;\">=</span> <span style=\"color: #0000ff;\">**new**</span> QDialog(<span style=\"color: #0000ff;\">**this**</span>);\ndialog<span style=\"color: #333399;\">-</span><span style=\"color: #333399;\">&gt;</span>show();\n}</div>\n<div></div>\n槽的实现里面添加新建对话框并显示。\n<div>   4、构造函数中实现信号和槽的关联</div>\n<div>\n<div>\n<div style=\"text-align: left; background-color: window; font-family: Courier New; color: black; margin-left: auto; font-size: 12px; margin-right: auto; border: black 1px solid; padding: 3px;\">connect(ui<span style=\"color: #333399;\">-</span><span style=\"color: #333399;\">&gt;</span>showChildButton,SIGNAL(clicked()),<span style=\"color: #0000ff;\">**this**</span>,SLOT(showChildDialog()));</div>\n<!--EndFragment-->\n\n</div>\n</div>\n<div>    这里使用connect()函数将按钮的单击信号clicked()与新建的槽进行关联。clicked()信号在QPushButton类中进行了定义，而connect()是Object类中的函数。这个函数的4个参数分别是：发送信号的对象、发送的信号、接收信号的对象、要执行的槽。其中信号要用SIGNAL()宏括起来，槽要用SLOT()宏括起来。</div>\n<div>    运行程序就可以看到效果了。</div>\n<div>    上面的方式属于手动关联。还有一种方式是自动关联，自动关联就是将关联函数整合到槽命名中，但是必须使用Qt部件已经提供的信号，如上面的槽可以重命名为on_showChildButton_Clicked()，就是有on和发射信号的部件对象名还有信号名组成。这样就可以去掉connect()关联函数了。</div>\n\n###     自定义窗口\n\n<div>1、添加自定义对话框类</div>\n<div>2、设计信号和槽</div>\n<div>    添加push Button按钮，点击右键\"转到槽\"，选择clicked()信号，单击确定，进入代码编辑模式，并且自动定位到自动生成的on_pushButton_clicked()槽中，添加代码如下：</div>\n<div>\n<div style=\"text-align: left; background-color: window; font-family: Courier New; color: black; margin-left: auto; font-size: 12px; margin-right: auto; border: black 1px solid; padding: 3px;\"><span style=\"color: #0000ff;\">**void**</span> Dialog<span style=\"color: #333399;\">:</span><span style=\"color: #333399;\">:</span>on_pushButton_clicked()\n{\naccept();\n}</div>\n其中accept()函数式QDialog类中的一个槽。一个使用exec()函数实现的模态对话框执行了这个槽就会隐藏这个模态对话框，并且返回QDialog::Accepted值，这个值可以判断是哪个按钮被按下了。与其对应的还有一个reject()槽,可以返回一个QDialog:;Rejected值。\n\n</div>\n<div>3、在主界面使用自定义的对话框，在main函数里面</div>\n<div>\n<div style=\"text-align: left; background-color: window; font-family: Courier New; color: black; margin-left: auto; font-size: 12px; margin-right: auto; border: black 1px solid; padding: 3px;\"><span style=\"color: #0000ff;\">**int**</span> main(<span style=\"color: #0000ff;\">**int**</span> argc, <span style=\"color: #0000ff;\">**char**</span> <span style=\"color: #333399;\">*</span>argv[])\n{\nQApplication a(argc, argv);\nMyWidget w;</div>\n</div>\nDialog d;\n<span style=\"color: #0000ff;\">**if**</span>(d.exec() <span style=\"color: #333399;\">==</span> QDialog<span style=\"color: #333399;\">:</span><span style=\"color: #333399;\">:</span>Accepted)\n{\nw.show();\n<span style=\"color: #0000ff;\">**return**</span> a.exec();\n}\n<span style=\"color: #0000ff;\">**else**</span> <span style=\"color: #0000ff;\">**return**</span> <span style=\"color: #6e00aa;\">0</span>;\n}\n<div>    在主函数里面建立Dialog对象，然后判断其exec()函数的返回值，如是正常按下进入主界面按钮，那么返回值应该是QDialog::Accepted,显示主界面，并且正常执行程序，如果不是则退出程序。</div>\n<div>4、从主界面到登陆框</div>\n<div>\n<div>\n<div style=\"text-align: left; background-color: window; font-family: Courier New; color: black; margin-left: auto; font-size: 12px; margin-right: auto; border: black 1px solid; padding: 3px;\"><span style=\"color: #0000ff;\">**void**</span> MyWidget<span style=\"color: #333399;\">:</span><span style=\"color: #333399;\">:</span>on_pushButton_clicked()\n{\nclose();\nDialog dd;\n<span style=\"color: #0000ff;\">**if**</span>(dd.exec() <span style=\"color: #333399;\">==</span> QDialog<span style=\"color: #333399;\">:</span><span style=\"color: #333399;\">:</span>Accepted)\nshow();\n}</div>\nclose()槽，不一定使程序退出，而是当只剩下最后一个主界面时调用close()槽，程序才会退出，其他情况界面都是隐藏起来，并没有被销毁。\n<!--EndFragment-->\n\n</div>\n&nbsp;\n\n</div>\n<!--EndFragment-->\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n<!--EndFragment-->\n<div></div>\n<div>[来自为知笔记(Wiz)Time=2013-05-22 17:15:41](http://www.wiz.cn/i/bf10110a \"来自为知笔记(Wiz)Time=2013-05-22 17:15:41\")</div>","mtime":1386290932000,"source":"_posts/窗口部件.md"},"2p2z8sbywlehpgl7":{"_id":"2p2z8sbywlehpgl7","content":"title: \"技术人员如何创业(二)\"\nid: 812\ndate: 2013-06-07 14:27:01\ntags: \ncategories: \n- 互联网\n---\n\n“合伙人”其实从古到今都有，指一帮人聚集在一起干一件大事情，这个事情必须要借助大家的力量一起完成。比如水浒里的一百单八将、西游记里的五人组合。技术创业者刚出来创业一般也都会找合伙人，毕竟一个人搞定不了太多的事情，除非自己做的东西一个人可以搞定，比如开个小店之内的。如何研发一个好的产品参考 技术人员如何创业《一》- 产品及想法 。是不是只要研发出软件产品就可以赚大钱了？那是不可能的，必须要有好的产品。个人觉得好的产品需要整个公司特别是管理人紧密配合才能创造出来的。怎么选择合伙人，我总结一下我的个人经验吧。\n<!-- more -->\n<span>有了好的产品想法或者拉到了投资就要开始张罗组建团队了。这也是最开始的核心部门，而作为技术人员的我们怎么组建团队？看现在的创业公司一般有下面几种模式：\n1、几个同学或者朋友凑在一起组建团队。类似于腾讯、新东方的创始人。\n2、一个创始人找项目找人凑在一起做一项事业。类似马云、史玉柱这样的创业公司。\n3、家族式，比如当当网、四川希望集团等。</span>\n\n<span>其实还有很多模式，哪种模式好，只有适合自己的模式才是最好的。这几个模式是我身边出现最多的几种。</span>\n\n<span>**第一种模式**个人觉得很好，不过也是很有争议的一种模式，因为一起创业的都是朋友但是创业的过程少不了斗嘴，不少很好的朋友同学最后反目。电影《中国合伙人》中因为成东青和孟晓峻的矛盾，王阳说了一句挺有意思的话：“千万别跟丈母娘打麻将,千万别跟想法比你多的女人上床,千万别跟好朋友合伙开公司” 。说是这样说，是因为中途出了矛盾，大家没有办法调和。王阳和孟晓骏离开了新梦想。不过当最后成东青理解孟晓骏当年在美国的遭遇，并且悄悄把之前孟晓骏待过的实验室以他的名字冠名，我当时就很羡慕这种共赴患难最后一起成功的兄弟是幸运和幸福的。说一下腾讯，他们几个合伙人从创办到2007年都是一直保持5个人的阵型，很难得。他们是怎么做到的呢？从最开始分配股份时，马化腾让其他的股份合起来比他多一点，这样大家在做决定时就不会因为他一个人一家独大。另外后来的利益分配也是按照贡献分配，几个合伙人在一起商量决定。这种模式最怕的就是大股东是个固执的人，不愿意投票决定，所以一开始就要确定要公司未来的制度和利益分配制度。以后大家不会为了这种事情扯皮，最后要离开也就像陈一丹他们是为了实现自己其他人生价值（听说做慈善）而退休的离开。</span>\n\n<span>**第二种模式**需要领导有很强的人格魅力聚集一帮能人。马云就是典型这种模式，当时阿里巴巴十八罗汉被马云召集在他家创业，每个人每月500元工资，工作15个小时以上，吃住都在一起。这样的一个团队最后却大获成功，这中间和马云找到一些关键性人物和风投有很大关系。所以这个带头人需要很强的忽悠能力、管理能力、超前的商业敏锐度。你说马云他刚开始能保证就要做一个阿里巴巴吗？我想他也不清楚，路走一走就清晰了，就怕没有先前冲的勇气。这种模式怎么合伙呢？我觉得领导人需要找到合适的人做合适的事。因为毕竟大家不是朋友、同学，对彼此都不是很了解，怎么做到信任。创始人需要建立行之有效的管理制度，保证有能力的人得到利益，不行的人淘汰，建立自己的核心团队。建立核心团队后，这个团队就要保持信息透明，让大家觉得团队有归属感。就像以前毛爷爷带领共 产 党一样，其实前期创业是很苦的，但是大家还是愿意跟着他做，甚至付出自己的生命。这个很重要，很多领导人觉得公司还没赚钱谈这些都是空的，但是如果不谈谁来给你拼命。特别是技术性的创始人更加容易这么认为，需要把股份分红白纸黑纸写出来让核心人员静下心来努力干活。上次马云退出阿里时，看到十八罗汉重聚台上，还是蛮感动的，当时那一批没能力的草根搞出来现在日交易额几百亿的公司。</span>\n\n<span>**第三种模式**家族企业，个人觉得处理好也是比较容易成功的。有个亲戚他们夫妻现在成都创办一个火锅品牌，开设的分店有30多家。想当时他们刚起家时，家里有好几个小孩还有双方老人需要赡养，没有存款只有欠债，在这种环境下还是创业成功了。总结了他们的经验，最开始男方在上海学习火锅厨师一套、女方做会计和大堂经理学习店面管理和财务。后来学习差不多了，他们回到三级城市，抓住了当时那里没有比较大点规模的火锅店这个机遇。借了一些钱和几个人合伙开了一个火锅店，加上外面学的一些营销知识，打锣敲鼓巡街宣传。这样慢慢就发展起来了，不过之前他们还开过好几个店都失败过。后来发现县城做这个的人慢慢跟风多了起来，竞争压力大，就开始向外部发展。到了成都刚开始也不知道怎么做，就加盟别人的店，后来知道加盟这种模式非常好，马上就准备筹备开公司做品牌，逐步发展到现在这个程度。其实男方比较有商业敏锐度，喜欢交友，不计较得失；女方懂得财务，管理。光是扩展肯定不行的，赚的钱守不住，这样一张一紧就把公司做起来了。</span>\n\n<span>不管哪种模式搭建的合伙人团队都需要保持一个目标，朝着共同目标奋斗。看到这么多成功的模式，大家可能都想创业了。不过创业说容易也不容易，像我们公司现在创业四年也只能做到刚刚盈利一点。我们是技术型公司，老板最开始工作也是做技术的。我们这种技术型创业型公司怎么建立起来的？</span>\n\n<pre>转载：[http://www.apkbus.com/android-121995-1-1.html](http://www.apkbus.com/android-121995-1-1.html)</pre>","mtime":1386295682000,"source":"_posts/技术人员如何创业二.md"},"nzh5kvwe8aoe2kdu":{"_id":"nzh5kvwe8aoe2kdu","content":"title: \"老码农教你学英语\"\nid: 921\ndate: 2013-09-18 11:51:46\ntags: \n- 老码农\n- 英语\ncategories: \n- 程序人生\n---\n\n对于咱们这些高端大气、时刻需要和国际接轨的码农，英语的重要性自然是毋庸置疑的。尤其是那些胸怀大志的潜在大牛们，想在码农行业闯出一片天地，秒杀身边的小弟们，熟练掌握英语更是实现其目标最关键的因素之一。否则，试想在你捧着某出版社刚刚翻译出来的《JSP 高效编程》苦苦学习JSP模板的时候，你旁边的小弟却是拿着原版的《AngularJS in Action》学习开发单页面应用，虽然你们都同样认真地学习了一个月，可做出来东西的效果能一样吗？\n<!-- more -->\n所以，英语好才能学到最新最炫的技术，否则只能拿着国内出的翻译版学习两三年前的老古董还把它当个宝。更何况国内的翻译书水平如何你不会不知道吧？多少坑爹的翻译啊！不提了！其实我十多年前还参加过一本Java开发指南的翻译，而当时我一直在IBM主机上做开发，压根就不会Java，所以误人子弟是肯定的了。回首往事，惭愧啊！请上帝宽恕我的罪恶，阿门……\n\n好了，现在言归正传，说说码农应该如何学习英语，达到熟练掌握英语的水平。**首先，我要明确一个概念：英语学习是不可能速成的。一心想速成的同学们可以不用往下看了，不然浪费了你们的时间我可担不起责任啊。**\n\n作为码农的习惯，自然第一个重点是要准确定义”熟练掌握英语“的概念。\n\n我的定义如下：\n\n*   1\\. 阅读：能够直接阅读英文文档，比如《MongoDB: The Definitive Guide》，并且阅读速度和理解程度都能与母语相当；\n*   2\\. 写作：能够直接编写英文文档、邮件，达到英语母语人士能够无歧义理解的程度，学有余力的同学可以追求逻辑严密和用词严谨；\n*   3\\. 听说：能够顺畅地与英语母语人士进行有关技术方面的交流，达到双方沟通无歧义的程度，学有余力的同学还可以争取在对话中表现幽默感和个人品位。\n肯定有人要不服了：为啥学习的起点给俺整这么高呢？因为，只有达到这个标准，你才能充分发现学好英语的好处，也才能自觉地尽可能使用英语，形成良性循环。\n\n那么，要达到这个标准需要多少时间呢？对于CET-4或者6级水平的同学（没错，4和6都是一个水平，几乎没啥差别），我的估计是需要1万小时以上。这也是我前面说英语不可能速成的原因。可能有人会抱怨说，老码农你不靠谱，1万小时也太多了，就算一天花5小时学英语，也需要6年时间，这不是太坑爹了么？对此我想说的是，每天5小时其实一点也不难，如果你一直在学新技术而不是重复做熟练工的话，平均每天看技术文档就能看3小时，另外写文档邮件注释再花1小时，上下班路上也别坐着发呆，至少可以练听力1小时，这样5小时不就出来了么？\n\n最关键的是，这5小时并不是另外挤出来的，而只需要把以前的一些习惯改一改就好。遇到问题百度查中文文档改成Google查英文文档，把写中文注释的习惯改成写英文注释，拼音变量名改成英文短语变量名，尽量和国际接轨，做一个高端大气国际化的码农。除了这5小时之外，平时没事也可以听点外语歌，感受一下英语的韵律；有机会就经常去听一些国际性的行业大会；周末再去看看好莱坞原声版大片，不亦乐乎？这些都是你本来工作和生活中就有的内容，并不需要刻意地去挤很多时间苦学。只要有心，处处时时都是学习的机会。\n\n至于6年时间有人觉得太长，如果是你喜欢做的事，谁会嫌时间长? 更何况你往后看就会发现，这1万个小时里在学英语的同时也是在学技术，而且是最基础或者最先进的技术，是不学好英语就很难及时掌握的技术。通过这个过程，你不仅英语水平提高了，技术上也能大有长进。这些都是潜移默化的，每天都在进步，而不是一定要突击到满1万小时产生一个突然的飞跃，这才是真正提高水平的真谛所在。所以我认为，**学英语首先要去掉功利心理，通过一个努力的过程把英语变成你的一项爱好**：看书就喜欢看英文版的书，看电影就喜欢看原声不带字幕的。如果能做到这一点，别说6年，就是60年你也能甘之如饴；反之如果你不喜欢英语，那么每天5个小时的煎熬即使是6个月恐怕都很难坚持下来吧？\n\n写到这里，对于学习英语的心态，我想小结一下。有些同学会狠狠地下一个决心：我要开始学英语了！苦读一年练成英语神功！然后开始拿一本词典开始背单词，花了一个月时间把A打头的单词背得滚瓜烂熟，然后，就放弃了。。。我想说的是，不要把学英语看作一次磨练意志的马拉松赛跑，把它当做一次旅行，享受这个过程，享受途中的风景，不用急着赶路，这样你才能走得更远。\n\n言归正传，1万个小时这个数据的估算方法是：阅读5000小时、听2000小时、 写2000小时、 说1000小时，下面具体说明：\n\n**1\\. 大量阅读是提高英语水平的基础、核心、重中之重，要在大量阅读的基础上再开始练习听力和写作。**\n\n为什么这么说？最有效的学习方式就是模仿，而听说读写四个要素里只有听和读有模仿条件。\n\n那为什么不是先多听呢？有两个原因。一是口语比较随意，俚语方言比较多，在表达上不如书面内容严谨；二是听一次没能理解的内容不容易查找和重复。所以大量的阅读是提高英语水平的关键性基础性的工作。\n\n有人又要问了，难道不要先背单词吗？这个嘛，我自己是最讨厌背单词的，又怎么会把你们往火坑里推呢？而且单纯地背单词用处不大，在阅读中记住的单词才是有用的。\n\n比如在GRE单词表开头随便找个单词avalanche，释义是n.雪崩 vi.崩塌，你可以使劲地背，把它和其他几千个单词都记得滚瓜烂熟，然后当你某天在文档中看到一句话说：”… to handle an avalanche of client requests …“，你可能都想不起来背过avalanche这个单词，即使想起来也未必能准确理解它在这段话里的含义。\n\n这是为什么呢？因为背单词是孤立地去记一个个单词，应试也许有用，但是事倍功半。最好的方法就是在阅读中去理解它，比如还是那一句，我压根不知道avalanche这个单词，但是从前后文去蒙，an avalanche of大概是说非常多的意思，如果你不确定理解得对不对就去查一下字典，就明白了这意思是”像雪崩一样滚滚而来的大量的什么东西“。\n\n查词最好是查英-英辞典，比如Merriam-Webster的韦氏英英辞典。还有，查一个单词的时候，不要去记那几个中文释义。某些人背单词就喜欢像念经似的念叨：“capability，才能，能力，容量，性能，生产率，capability，才能，能力，容量，性能，生产率……”，旁观者都替他觉得累得慌对吧？其实你只要模糊地知道它的意思就行了，学英语尽量不要掺进来中文。老外不知道啥叫“才能，能力，容量，性能，生产率”，也没影响人家用capability这个词不是？\n\n另外我觉得吧，单词和人一样，也是有眼缘的，记得住记不住都不要去强求。即使这一次看完又忘了也没关系，等你阅读量上去之后，遇到次数多了自然就记住了。有人说，万一有的词遇到次数很少，还是记不住咋办？对这种问题我就无语了。遇到次数很少的单词你记它干啥？有个著名单词中文意思是什么早期银版照相术的，我就偏不记它，它能把我怎么着啊？\n\n通过这个过程，你不但记住了单词，还掌握了它的常见用法，这对于以后的写和说都是非常好的基础。现在很多人学英语的弊病在于应试思维，就仿佛孔乙己说的茴香豆的茴有四种写法，少记住一种就可能在考试里做错题被扣分，但是现实生活中你也许只需要会一种就行了，关键是知道它的意思而且能够准确地使用它。\n\n矮马，一下子扯到背单词跑偏了。还是接着说阅读，怎么阅读呢？我推荐一种暴力方法，不管你基础如何，先找一两本和技术相关的白话书，而且是你最感兴趣的领域，比如经典的《Man Month Myth》（人月神话） 和《Joel on Software》（大神Joel谈软件开发）原版书，这样读起来好歹不那么苦闷，有助于你坚持下来。毕竟在这个起步阶段，坚持是第一位的。不然给你找本《advanced econometrics》试试，据说95%的码农读了三天之后都疯了。\n\n就算是你感兴趣的书，也保不齐一开始读起来觉得很费劲。也许有的人翻开第一页一看，妈呀，一半单词不认识！这咋办？没事，像我前面说的，有把握蒙的就蒙，没把握的就查，查过的可以把中文意思写在单词旁边，能写英文理解更好，懒得写也没关系，总之原则就是把全部内容看懂吃透就行。\n\n还有，句子太长里边有好多that….. which….. who….什么的从句？那也没关系，别人理解不了，可咱是码农啊，懂得嵌套结构的原理，不就是递归嘛！甭管他连了多少个，从最后面的那个往前一个一个处理，把从句用彩笔一个一个标出来，最后看清楚嵌套关系以后，句子也就容易看懂了。实际上，我觉得英语最妙的地方就在这里，它能在一个句子里用一个无限延展的树形结构来描述一个概念，直到把它定义得非常严谨无歧义为止。中文做不到这一点，必须拆成好多个句子才能做到通顺，但理解起来就困难多了。\n\n在这个阶段一定不要求快，一天吭哧吭哧地只看了半页都没关系，也很正常，但一定要确保准确理解。在此我想特别提醒的是，如果你一开始不适应，一定要坚持下来。其实学习英语过程中最难的不是听说读写，而是英语思维。汉语是讲朦胧美的，所谓“道可道，非常道”，越深刻的东西往往越是“只可意会，不可言传”，文人写文章喜欢下结论而很少论证，结论的经验性主观性较大，例如“肉食者鄙，未能远谋”；而欧美文章则大多务求精确严谨，定义精确，论证充分，避免逻辑上的漏洞，下结论则往往比较谨慎，一般都是客观数据，尽量避免主观看法，例如“根据卫星云图，明天的降水概率为70%”。我年轻的时候买过《孙子兵法》和克劳塞维茨的《战争论》一起看，两者的风格差别真是泾渭分明。\n\n此外对于人文方面也有很大差别。老外经过文艺复兴，对于人文关怀有了很好的基础，更强调个人自由和权利，所谓”风能进，雨能进，国王不能进”；我们从历史文化传承的角度看则是集体大于个人，更强调个人适应环境。再比如老外对于弱势群体的歧视嘲笑是非常忌讳的，但中国人往往习惯了小品里瘸子瞎子胖子出场摔一大跟头这样的笑料。\n\n所以，这些思维上的差异才是学英语的最大障碍，而大量阅读有助于理解和养成这种思维习惯。特别是逻辑上的严密性和表达的客观性方面，由于文化传统和教师本身的原因，在中国现在的教育环境很难训练出来。但是通过大量阅读英语材料，就可以达到很好的洗脑效果，实为居家旅行、和平演变必备良药。\n\n读完两三本白话书就算是热好身了，下面可以开始读一些更枯燥的东西，主要是专业教课书。如果上大学的时候学的《数据结构》、《离散数学》、《操作系统》这些都还给老师了，正好拿英文版的复习一下。找你专业相关的基础课原版教材，5本左右，开练。照着前面的要求，一样细细地看，不求快但求精，练习题也好好做一部分，不然你怎么知道自己确实理解透了？\n\n等你看完这几本，阅读基本上就算入门了，可以开始练习写作和听力。具体做法后面再细说。\n\n与此同时，要开始看一些行业里最新的技术文档。这些可能还没出书，也可能有一些免费的pdf，不管怎样，也找5本左右来看，什么MongoDB，Neo4j，Node.js，AngularJS之类的，细细地看，边看边做个系统练手，因为这些新技术文档还比较少，社区里的东西也不多，所以免不了要去StackOverflow问，或者去GitHub找些例子来看，别偷懒，这些都是很好的学习方式。\n\n等你把这几本书也啃下来以后，按A4纸算，你的阅读量肯定会达到7000页以上，在SO, GitHub, Google上查看过的英文资料也不会少于3000页，阅读总量肯定超过1万页了。现在恭喜你，你的阅读能力肯定没问题了。如果我没猜错的话，你这时候碰到翻译版的书都懒得瞟一眼，更别说花钱买和花时间读了。\n\n另外，阅读能力达到这个水平以后，写作也基本有个基础了。所谓“熟读唐诗三百首，不会作诗也会吟”，看多了以后你会发现英语写作也有一些套路，和中文是一个道理，经过大量的阅读，很多句式其实已经在你的脑子里了，只要在写作过程中经常练习这些句式，自然就熟能生巧了。\n\n**2\\. 写作要创造环境，每天都要写1000字以上。**\n\n在互联网时代，这一点也不难。最简单直接的办法就是注册一个StackOverflow账号，起初是去问问题，把你搞不定的代码贴上去，会有大牛们帮你搞定，顺带着阅读也练了；等你技术水平涨了以后，想想这么多人帮了你你才成了大牛，总不能只进不出吧，有余力了就应该报复社会，所以就经常去StackOverflow找一些你拿手的主题，帮其他菜鸟们解答一些问题，这样也就练了写作了，一举两得多好！\n\n等你在SO上混出了点名堂，有点江湖地位的时候，就会有人来找你，比如帮忙干点活啊咨询点问题啊之类的，自然邮件联系就少不了了，这都是练习写作的机会，就算你不想帮他干活，也可以和他扯一扯。\n\n另外，弄个翻墙软件比如goagent，注册个Google Plus账号，上去看看热点文章，写点自己的体会之类的。实在闲得无聊也可以找Linus之类的大牛混，他每发一贴你就上去评论一番或者请教一下，先混个脸熟嘛！顺带也练习了写作。时间长了，说不定大牛还喜欢上你了，没准随便给你个肉身翻墙的机会，这就是意外之喜了。\n\n总之，写作是大量阅读之后水到渠成的产物，不过要注意一点，写出来的每个句子甚至每个单词都要务求精准地道，不知道的不要瞎写，要么改换自己熟悉的写法，要么查清楚了再写。要是养成随意乱写的习惯，写出来的句子都是中国人能看懂，外国人都看不懂，那前面的努力就付诸东流了。\n\n**3\\. 听力要在阅读能力达到一定水平后再开始练习，和前面说的阅读给写作打基础的关系相似，练听力的同时其实就在为口语打基础。**\n\n我首先要说的是，千万不要跟着美剧什么的练听力，你又不是打算偷渡去纽约皇后区卖毒品跟黑人大哥混，就算你听一耳朵就能熟练分辨出说WTF are you doing的是意大利人、爱尔兰人还是黑人，又有啥用呢？咱们做码农的一定不要忘了自己的本分，得跟着码农的大哥混才对。所以练习听力一定要多找IT圈的大牛的访谈来听。\n\n最经典的自然是天妒英才英年早逝的乔帮主，多听听他的访谈你就知道他的成功绝非偶然。像这样一位逻辑严密，思维活跃，表达能力强，善于调动听众情绪，还很有幽默感，而且做事又非常有韧性的人，实在是百年难遇的天才人物。\n\n比尔盖茨的访谈就差多了，他的表达能力真的是不敢恭维，有时候东拉西扯的听不明白重点，依稀有点韩乔生老师的风韵。政客系列也不推荐，像奥巴马的讲演听起来总有一种似曾相识的赶脚，细细一想，这不就是美国版的传销讲座嘛！\n\n所以，多听乔大神的访谈绝对是没错的。为啥是访谈呢？因为都是对话，形式上和咱们的需求匹配，咱们工作中需要的英语对话就是类似于访谈式的，你想想是不是？而且他的访谈聊的都是咱们挨踢的事儿，背景知识都比较熟悉，你专心听他的表达和逻辑就好了。你要是不服，俺给你弄个生物系教授讲分子生物学课程的录音让你听，你听完还能找得到北吗？\n\n这些访谈在网上都有，到iTunes里的podcast里大把大把的，不过别找带字幕的听，千万！\n\n现在材料有了，怎么听呢？我先告诉你，每个访谈都要听100遍以上，头20遍就是稀里糊涂地听，能听懂多少听懂多少，听不懂的先蒙。但我敢保证，第20遍肯定比第1遍听懂的东西要多多了。到了20遍还在蒙的，基本你听到第100遍也还是在蒙，所以再蒙下去就没意义了，这时候找到文字版好好看一遍，就看一遍，然后收起来，再听20遍，这时候有些原来靠蒙的就听出来了，听完20遍再看一次，再听，如此反复，100遍之后基本应该都不用蒙了，然后再听下一个。听过100遍的，以后也要经常复习，反复听，再背几遍，很多句型就会自动进到你的脑子里，给你的口语打下一个很好的基础。\n\nIT界的访谈每个大概都在1-2小时之间，就算1.5小时吧。一个听100遍就是150小时，精听10个就是1500小时。10个就够了，不用追求数量，关键是重复。当然平时还要有一些泛听，比如英文广播、看CNN新闻什么的，越多越好，这些就不求全听懂，听懂多少是多少，一遍就过去，权当是个消遣。\n\n在这之后，再故意去找一些录音不是那么清晰的访谈来听，比如乔大神96年回到Apple时，在当年的WWDC上的访谈。这个访谈很有意思，因为他一回来就砍掉了好多正在做的产品，有很多利益受损的听众对他不服不忿的，带讽刺挖苦甚至攻击性的问题也不少，可乔大神应对自如，潇洒极了。这个访谈大概是因为年代久远，杂音比较多，音质也不太好，但仔细听也能听出来。很好，就是它了！就照着这个标准找那么三、四个略模糊的访谈，比如通过电话进行的一些访谈，再如法炮制，按100遍的方法听它500小时，这样听力基本也就过关了。\n\n有人大概心里会嘀咕：故意找这种模糊的录音听有什么意义呢？这主要是让你适应不那么理想环境下的听力，比如在喧闹的餐厅里对话，或者是老外通过skype对你进行电话面试，而你只能听清专业录音设备录下来的访谈，那咋行？所以也需要在前面理想条件下1500小时听力练习完成的基础上，训练一下恶劣条件下的听力。\n\n**4\\. 练习口语是最麻烦的，因为说的条件最难创造，这必须得有个大活人认真地跟你聊才行啊！**\n\n当然了，要是你能找个英语母语的老外谈对象，那就又省事又高效了。不过，等口语练好了一定要一脚将其踹掉。要记住，你是一个中国人，肥水不流外国田！\n\n好了，大晚上的不扯淡了。练习英语口语不外乎这么几个途径：交外国朋友，进外国公司，或者花钱雇外国人跟你聊。各人工作、经济情况不同，这就自己选择吧。反正现在改革开放了，一部分人也富起来了，跟谁聊也就丰俭由人了。\n\n不过这里要提醒一点，别去什么英语角练口语，这种地方要么是一百多人围着一个老外，跟看猴似的，要么就是一堆中国人互相来几句好肚油肚，听着就想摸摸对方的肚子看看有多好有多油，纯粹浪费时间！我认为，练口语一定要找英语是母语的人士练习，这样才能事半功倍。\n\n另外，有机会就多去美国英国澳大利亚加拿大什么的地方转转，现场体验一下自己的学习成果。不过我这里讲的主要是码农工作相关的东西，基本没涉及到生活类的英语，比如去麦当劳买个milk shake什么的，这些主要要靠现场体验现场学习，但有了前面阳春白雪的码农高端上流社会英语作为基础，这些下里巴人的生活英语上手很快，对你肯定不在话下。\n> 【补充】有同学想让我推荐一些学习材料，我后来补充了一篇[补充一些英语学习素材](http://blog.jobbole.com/45795/ \"老码农教你学英语：补充一些英语学习素材\")，供大家参考。\n关于码农如何学好英语，我就先说这么多吧。最后再总结一下，英语学习是一个终身的事业，只有通过痛苦的起步阶段，慢慢把它变成你的一个爱好，才能持久下去。等到它真正成为你喜爱的东西了，你就会发现眼中的世界从此变得不同。它变大了，变得多样化了，也变得更美好了。这时，所有的努力和坚持都有了回报。\n\n作者微博：[@老码农的自留地](http://weibo.com/ned11)","mtime":1386295757000,"source":"_posts/老码农教你学英语.md"},"2m3g04wbzog9k3xs":{"_id":"2m3g04wbzog9k3xs","content":"title: \"老码农教你学英语：补充一些英语学习素材\"\nid: 924\ndate: 2013-09-18 11:53:13\ntags: \n- 码农英语\n- 英语材料\ncategories: \n- 程序人生\n---\n\n前几天写了《[老码农教你学英语](http://blog.jobbole.com/45296/)》之后，有一些朋友让我推荐一些各个阶段学习英语的素材。好吧，这次废话少说，下面就是我推荐的素材，供大家参考：\n\n&nbsp;\n\n### 1\\. 白话书\n\n*   《Steve Jobs》 [京东](http://click.union.jd.com/JdClick/?unionId=16231&amp;to=http://item.jd.com/19040912.html)\n*   《The Mythical Man-Month》 [京东](http://click.union.jd.com/JdClick/?unionId=16231&amp;to=http://item.jd.com/10354464.html)\n*   《More Joel on Software.pdf》 [下载链接](http://ishare.iask.sina.com.cn/f/18038174.html)\n&nbsp;\n<!-- more -->\n这里面，Steve Jobs的传记是我强烈推荐看的，不仅语言丰富且精炼（作者曾经是CNN和时代杂志的总编，算是大作家了），而且客观讲述了乔大神波澜壮阔的一生，相当励志。这本书一出来我就马上买了一本，然后认真地把它读了一遍，收获不小。另外两本也很不错，我很久以前看的翻译版，一直也想找原版的来看看，可惜总是没空，这次你们就算替我看了吧。\n\n&nbsp;\n\n### 2\\. 专业基础教课书\n\n*   《Concrete Mathmatics》（居然被翻译为具体数学…） （亚马逊木有）\n*   《Introduction to Algorithms》 京东链接，[亚马逊](http://www.amazon.cn/gp/product/B00AK7BYJY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00AK7BYJY&amp;linkCode=as2&amp;tag=vastwork-23)\n*   《Concurrent Programming in Java: Design Principles and Patterns》 （亚马逊有，京东没有）\n*   《[Operating System Concepts](http://click.union.jd.com/JdClick/?unionId=16231&amp;to=http://item.jd.com/10000609.html)》 京东，[亚马逊](http://www.amazon.cn/gp/product/B003Y8YL9G/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B003Y8YL9G&amp;linkCode=as2&amp;tag=vastwork-23)\n*   《The Art of Computer Programming》 京东，[亚马逊](http://www.amazon.cn/gp/product/B00478TO44/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00478TO44&amp;linkCode=as2&amp;tag=vastwork-23)\n*   《TCP/IP Illustrated Volume 1》 [京东](http://click.union.jd.com/JdClick/?unionId=16231&amp;to=http://item.jd.com/10995850.html)，[亚马逊](http://www.amazon.cn/gp/product/B0083OS6KG/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0083OS6KG&amp;linkCode=as2&amp;tag=vastwork-23)\n以上是离散数学、数据结构、操作系统、计算机网络等方面最经典的教科书，绝对值得认真仔细地读。可说来惭愧，我当年自学英语的时候却没看过这些书，而是根据当时的兴趣找了十几本经济学和教育心理学的教科书来看的，虽然阅读量也够了，知识也学到了，视野也拓宽了，但是失去了再巩固一次专业基础的机会。\n\n写到这儿，我不禁有些黯然神伤：等你们照我的秘籍学完了，不仅英语比我强了，技术上也会把我秒成渣，我还咋混啊？不过我超强的阿Q精神还是很快占了上风，于是我反过来想一想，当年自己就这个水平，只能自己和自己比，有进步就行了，别人怎么上进是别人的事。再说只要时间花进去了总会有所收获，跟着兴趣走也许会更有效率一些吧，总比啃硬骨头啃成半途而废强不是？\n\n不管怎样，我还是要推荐大家尽量多看这里边的书。当然啦，如果你的专业基础还可以，看点其他感兴趣的教科书也不是不行。\n\n&nbsp;\n\n### 3\\. 最新技术书\n\n方向太多，我就不一一列举了。我推荐去 [http://www.manning.com/](http://www.manning.com/) 挑几本符合你技术发展方向的书。Manning基本所有书都有pdf版，你用信用卡付完款后就可以下载了，建议找个大学里的打印店打印成一本书看，一般也就20多块钱，看起来方便。不过我还要提醒一点，pdf页脚有你的名字和邮件地址，电子版的不要到处散发，最多是打印几本送朋友看，不然哪天被manning告上法院可别怪我没提醒你。而且尊重作者的版权，也是作为一个读者的本分嘛。\n\n另外，Manning经常有半价的优惠活动，它的网站右上角也会有”Deal of the day”的当日大减价优惠，所以别全价买它的书，可以经常去看看你想要的书是不是在打折。\n\n这些书最好是买一本看一本，看完一本再买下一本比较好，因为一本书你要是看三个月，有可能另外你感兴趣的技术已经有更新的平台出来，你可能想买的书都不一样了。\n\n在这方面我看过的有《The Definitive Guide to Grails》、《Grails in Action》、《The Neo4j Manual》、《Groovy in Action》, 《MongoDB: The Definitive Guide》、《Node.js in Action》、《AngulaJS in Action》等等。这些书都很实用，基本上边看边练习，照着它的内容走一遍基本的东西就都学会了，剩下的就是多练习，多上StackOverflow查和问了。\n\n&nbsp;\n\n### 4\\. 听力\n\n根据我个人的口味，当然要推荐历届All ThingsD大会上Steve Jobs [专访的音频](http://itunes.apple.com/us/podcast/steve-jobs-at-d-all-things/id530265054)，或者也可以[看视频](http://itunes.apple.com/us/podcast/steve-jobs-at-d-all-things/id529997900)。\n\n这些素材都可以在网页上直接在线访问，点一下每个链接最前面就会开始播放。不过，下载到iTunes里听会更方便。\n\nAll ThingsD大会Steve Jobs 合集也不错：[http://allthingsd.com/tag/steve-jobs/](http://allthingsd.com/tag/steve-jobs/)\n\n其中以D5和D8这两次访谈最为经典，最值得反复听：\n\n《[D8大会专访Steve Jobs](http://allthingsd.com/20100607/steve-jobs-at-d8-the-full-uncut-interview/)》 D8文字直播（一直没找到完整的访谈文字记录，如果谁有请发给我）：[http://networkedblogs.com/4rSrc](http://networkedblogs.com/4rSrc)\n\n[D5大会专访Steve Jobs和Bill Gates](http://allthingsd.com/video/?video_id=60C4F9FA-9AD5-4D04-8BB6-015AEBB1C052) （[D5完整文字](http://allthingsd.com/20070531/d5-gates-jobs-transcript/)）\n\n此外，还有WWDC的keynote address：[https://itunes.apple.com/us/podcast/apple-keynotes/id275834665?mt=2](https://itunes.apple.com/us/podcast/apple-keynotes/id275834665?mt=2)\n\n还有一组篇幅较短的纪录片适合碎片时间听一听，在iTunes里叫Vintage Mac Video, 链接是：[https://itunes.apple.com/cn/itunes-u/vintage-mac-video/id421137560](https://itunes.apple.com/cn/itunes-u/vintage-mac-video/id421137560)\n\n里边有一篇（第36个）就是我推荐的声音不太清楚的 [WWDC 1996 Steve Jobs’s Vision for Apple](https://itunes.apple.com/cn/itunes-u/vintage-mac-video/id421137560#) （这篇比较长一些，其他的大部分都比较短。）\n\n其他还可以听听TED的一些演讲，看了会对创新方面有一些启发。网上能搜到很多，也有个TED的app，可以搜索和下载你喜欢的TED演讲，我前年下载了好多段演讲反复地看，把手机空间都占满了，照相都没法照，后来不得不删除。另外可以下载一个Wall Street Journal的app，里边经常有一些视频小报道，基本都是行业内最新的一些产品和动态。\n\n说到这我想起来，其实本来有个很好的广播app叫TuneIn，我以前每天晚上睡觉前都用它听一小时CNN的新闻，挺长见识的。偶尔在你很困的时候，它还能自动变成催眠曲，让你听着听着就睡着了。是不是很神奇？可惜，我某天突然发现它只能听国内的广播台，后来才知道它被墙了。广播app我迄今还没有其他替代品，如果你们找到了其他能穿墙的app记得告诉我。\n\n反正吧，听力部分也是以各人兴趣为主，不必拘泥于以上素材。而且按我的预想，如果你已经练到听力阶段了，我想你已经具备足够的能力去自己找很多适合自己的素材，无须按我的推荐来听了。所以我就简单提供这么一些内容供你参考吧。\n\n总而言之，兴趣是第一位的，有兴趣才能持久，有兴趣才能乐在其中。不必局限在别人给你推荐的内容中，按照自己的兴趣去练习就好了，关键是为自己创造浸泡在英语中的环境，每天尽可能多的用英语。加油哦。\n\n&nbsp;\n\n### 作者微博：[@老码农的自留地](http://weibo.com/ned11)","mtime":1386295771000,"source":"_posts/老码农教你学英语：补充一些英语学习素材.md"},"e8d39pwrmi3x5ur6":{"_id":"e8d39pwrmi3x5ur6","content":"title: \"通过cookie编码转换解决cookie中文问题\"\nid: 980\ndate: 2013-10-28 10:15:35\ntags: \n- cookie\n- cookie中文\ncategories: \n- JAVA\n---\n\nJAVA 代码向客户端增加Cookie信息\n\n{%codeblock lang:java%}\n<%\nCookie c1 = new Cookie(\"name\",\"张三\");\nCookie c2 = new Cookie(\"address\",\"福建省福州市仓山区\");\nresponse.addCookie(c1);\nresponse.addCookie(c2);\n%>\n{%endcodeblock%}\n\n如果变量中带有中文，那么会出现如下异常。\n\n异常信息：`java.lang.IllegalArgumentException: Control character in cookie value, consider BASE64 encoding your value`\n<!-- more -->\n\n经过google发现：\n\ncookies只支持ASCII字符，而且不能有逗号，分号，空白。或者以$开头。名字在创建后不能改变。如果要存储中文的，先用URLEcode编码，在存入，取出的时候，用decode解码。\n\n解决方法：\n\n将中文编码改成UTF-8编码格式,传到前台\n\n{%codeblock lang:java%}\nString name= URLEncoder.encode(\"张三\", \"UTF-8\");\nString address= URLEncoder.encode(\"福建省福州市\", \"UTF-8\");\nCookie c1 = new Cookie(\"name\",name);\nCookie c2 = new Cookie(\"address\",address);\nresponse.addCookie(c1);\nresponse.addCookie(c2);\n{%endcodeblock%}\n\n那么获取cookie时如何解码：\n\n\n{%codeblock lang:jsp%}\n<%\nCookie c[] = request.getCookies();\nfor(int i=0;i<c.length;i++){\nString name = URLDecoder.decode(c[i].getName(), \"UTF-8\");\nString address = URLDecoder.decode(c[i].getValue(), \"UTF-8\");\n%>\n<h3><%=name %>==><%=address%></h3>\n<%\n}\n%>\n{%endcodeblock%}","mtime":1386295114000,"source":"_posts/通过cookie编码转换解决cookie中文问题.md"},"0vmmabyzv6xqs2v2":{"_id":"0vmmabyzv6xqs2v2","content":"title: \"【MyBatis学习笔记】系列之二：MyBatis增删改查示例\"\nid: 883\ndate: 2013-06-19 11:06:29\ntags: \n- mybatis\n- mybatis增删改查\ncategories: \n- mybatis\n---\n\n在系列一的基础上，我们实现mybatis的增删改查操作。查询操作在上一节已经实现，可以先去看看哈。\n\n1、为了方便地获取SqlSessionFactory实例，先写一个工具类SqlSessionFactoryGen，用以生成SqlSessionFactory实例，代码如下：\n\n[java]package com.hanfeng.demo.utils;\n\nimport java.io.Reader;\n\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\n\n/**\n* 工具类SqlSessionFactoryGen，用以生成SqlSessionFactory实例\n* @author hanfeng\n*\n*/\npublic class SqlSessionFactoryGen {\n private static SqlSessionFactory factory;\n //静态代码块。在类初始化时被执行，如第一次\n //引用类的静态变量，创建类的第一个实例\n static{\n //与configuration.xml中的mapper配置类似，告诉MyBatis应读取的核心配置文件\n String resource = &quot;main/resources/config/configuration.xml&quot;;\n Reader reader = null;\n try {\n reader = Resources.getResourceAsReader(resource);\n } catch (Exception e) {\n e.printStackTrace();\n }\n factory = new SqlSessionFactoryBuilder().build(reader);\n }\n\npublic static SqlSessionFactory getSqlSessionFactory()\n {\n return factory;\n }\n}\n\n[/java]\n\n由于整个程序只需要一个SqlSessionFactory实例，因此通过调用SqlSessionFactoryGen的getSqlSessionFactory()方法获取的是同一个SqlSessionFactory实例。\n\n2、新建执行测试类StudentManagerTest\n\n[java]\npackage com.hanfeng.demo.pojo.test;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport com.hanfeng.demo.dao.StudentMapper;\nimport com.hanfeng.demo.pojo.Student;\nimport com.hanfeng.demo.utils.SqlSessionFactoryGen;\npublic class StudentManagerTest {\n //获取SqlSessionFactory实例\n private static SqlSessionFactory factory = SqlSessionFactoryGen.getSqlSessionFactory();\n public static void main(String[] args) {\n }\n}\n\n[/java]\n\n我们会在测试类的基础上逐步增加方法哈，查询方法见上一节。\n\n3、增加方法\n首先在接口StudentMapper中声明执行增加、编辑、删除操作的方法，代码如下所示：\n\n[java]\n//添加新的学生\n public void add(Student student);\n //编辑学生信息\n public void update(Student student);\n //根据ID删除信息\n public void delete(int id);\n\n[/java]\n\n接着在StudentMapper.xml中编写相应的SQL语句\n\n[xml]\n&lt;!--与StudentMapper接口中的getById方法对应，包括方法名和参数类型。SQL语句中以“#{}”的形式引用参数--&gt;\n &lt;select id=&quot;getById&quot; parameterType=&quot;int&quot; resultMap=&quot;studentResultMap&quot;&gt;\n SELECT *\n FROM student WHERE id = #{id}\n &lt;/select&gt;\n &lt;!-- 新增学生 --&gt;\n &lt;!--执行增加操作的SQL语句。id和parameterType分别与StudentMapper接口中的add方法的名字和\n 参数类型一致。以#{name}的形式引用Student参数的name属性，MyBatis将使用反射读取Student参数\n 的此属性。#{name}中name大小写敏感。引用其他 的gender等属性与此一致。seGeneratedKeys设置\n 为&quot;true&quot;表明要MyBatis获取由数据库自动生成的主 键；keyProperty=&quot;id&quot;指定把获取到的主键值注入\n 到Student的id属性--&gt;\n &lt;insert id=&quot;add&quot; parameterType=&quot;Student&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;\n insert into student(name,gender,major,grade)values(#{name},#{gender},#{major},#{grade})\n &lt;/insert&gt;\n\n &lt;!-- 编辑学生信息 --&gt;\n &lt;!--执行修改操作的SQL语句。id和parameterType属性以及“#{}”的形式的含义与上述insert语句一致。--&gt;\n &lt;update id=&quot;update&quot; parameterType=&quot;Student&quot;&gt;\n update student set name=#{name},\n gender=#{gender},\n major=#{major},\n grade=#{grade}\n where id=#{id}\n &lt;/update&gt;\n\n &lt;!-- 删除学生信息 --&gt;\n &lt;delete id=&quot;delete&quot; parameterType=&quot;int&quot;&gt;\n delete from student where id = #{id}\n &lt;/delete&gt;\n\n[/xml]\n\n测试类完整代码：\n\n[java]\npackage com.hanfeng.demo.pojo.test;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport com.hanfeng.demo.dao.StudentMapper;\nimport com.hanfeng.demo.pojo.Student;\nimport com.hanfeng.demo.utils.SqlSessionFactoryGen;\npublic class StudentManagerTest {\n //获取SqlSessionFactory实例\n private static SqlSessionFactory factory = SqlSessionFactoryGen.getSqlSessionFactory();\n\n //实现增加学生\n public void add(){\n SqlSession sqlSession = factory.openSession();\n try {\n Student student = new Student();\n student.setName(&quot;陈静&quot;);\n student.setGender(&quot;女&quot;);\n student.setMajor(&quot;计算机科学与技术&quot;);\n student.setGrade(&quot;2008&quot;);\n\n StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);\n mapper.add(student);\n\n //提交事务，否则无法实际保存到数据库\n sqlSession.commit();\n\n System.out.println(&quot;数据库生成ID:&quot;+student.getId());\n } catch (Exception e) {\n e.printStackTrace();\n }finally{\n sqlSession.close();\n }\n }\n //根据ID查询学生\n public void QueryStudentById(){\n SqlSession sqlSession = factory.openSession();\n try {\n StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);\n Student student = mapper.getById(4);\n if (student != null) {\n System.out.println(&quot;姓名：&quot;+student.getName()+&quot;\\n专业：&quot;+student.getMajor());\n }else{\n System.out.println(&quot;没有找到相关记录！&quot;);\n }\n } catch (Exception e) {\n e.printStackTrace();\n }finally{\n sqlSession.close();\n }\n }\n\n //编辑学生信息\n public void updateInfo(){\n SqlSession sqlSession = factory.openSession();\n try {\n StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);\n Student student = mapper.getById(3);\n System.out.println(&quot;修改前信息：&quot;+student.getName()+&quot;--&quot;+student.getGender()+&quot;--&quot;+student.getMajor()+&quot;--&quot;+student.getGrade());\n student.setMajor(&quot;数控技术&quot;);\n mapper.update(student);\n sqlSession.commit();\n System.out.println(&quot;修改后信息：&quot;+student.getName()+&quot;--&quot;+student.getGender()+&quot;--&quot;+student.getMajor()+&quot;--&quot;+student.getGrade());\n } catch (Exception e) {\n e.printStackTrace();\n }finally{\n sqlSession.close();\n }\n }\n\n //删除学生信息\n public void deleteInfo(){\n SqlSession sqlSession = factory.openSession();\n try {\n StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);\n mapper.delete(4);\n System.out.println(&quot;删除成功&quot;);\n sqlSession.commit();\n } catch (Exception e) {\n e.printStackTrace();\n }finally{\n sqlSession.close();\n }\n }\n public static void main(String[] args) {\n StudentManagerTest test = new StudentManagerTest();\n //执行增加学生的方法\n// test.add();\n //执行学生查询\n// test.QueryStudentById();\n //执行学生信息修改\n// test.updateInfo();\n // 执行学生信息删除\n test.deleteInfo();\n }\n}\n\n[/java]\n\n源代码：[http://pan.baidu.com/share/link?shareid=1347967662&amp;uk=4161616584](http://pan.baidu.com/share/link?shareid=1347967662&amp;uk=4161616584)","mtime":1386291616000,"source":"_posts/mybatis学习笔记系列之二：mybatis增删改查示例.md"},"egshgk9ionx4ru8u":{"_id":"egshgk9ionx4ru8u","content":"title: \"Mybatis3学习笔记系列之一：Mybatis3入门\"\nid: 873\ndate: 2013-06-19 09:48:26\ntags: \n- mybatis\ncategories: \n- mybatis\n---\n\n## 什么是 MyBatis?\n\n`MyBatis` 是支持普通 SQL 查询,存储过程和高级映射的优秀持久层框架。MyBatis 消除 了几乎所有的 JDBC 代码和参数的手工设置以及结果集的检索。MyBatis 使用简单的 XML 或注解用于配置和原始映射,将接口和 Java 的 POJOs(Plan Old Java Objects,普通的 Java 对象)映射成数据库中的记录。\n\nMyBatis作为持久层框架，其主要思想是将程序中的大量sql语句剥离出来，配置在配置文件中，实现sql的灵活配置。这样做的好处是将sql与程序代码分离，可以在不修改程序代码的情况下，直接在配置文件中修改sql。\n<!-- more -->\n## 从 `iBatis` 到 `MyBatis`，你准备好了吗？\n\n对于从事 `Java EE` 的开发人员来说，iBatis 是一个再熟悉不过的持久层框架了，在 `Hibernate`、`JPA` 这样的一站式对象 / 关系映射（`O/R Mapping`）解决方案盛行之前，iBaits 基本是持久层框架的不二选择。即使在持久层框架层出不穷的今天，iBatis 凭借着易学易用、轻巧灵活等特点，也仍然拥有一席之地。尤其对于擅长 SQL 的开发人员来说，iBatis 对 SQL 和存储过程的直接支持能够让他们在获得 iBatis 封装优势的同时而不丧失 SQL 调优的手段，这是 Hibernate/JPA 所无法比拟的。具体而言，使用 iBatis 框架的主要优势主要体现在如下几个方面：\n首先，iBatis 封装了绝大多数的 `JDBC` 样板代码，使得开发者只需关注 SQL 本身，而不需要花费精力去处理例如注册驱动，创建 `Connection`，以及确保关闭 `Connection` 这样繁杂的代码。\n其次，iBatis 可以算是在所有主流的持久层框架中学习成本最低，最容易上手和掌握的框架。虽说其他持久层框架也号称门槛低，容易上手，但是等到你真正使用时会发现，要想掌握并用好它是一件非常困难的事。在工作中我需要经常参与面试，我曾听到过很多位应聘者描述，他们所在的项目在技术选型时选择 Hibernate，后来发现难以驾驭，不得不将代码用 JDBC 或者 iBatis 改写。\niBatis 自从在 `Apache` 软件基金会网站上发布至今，和他的明星兄弟们（`Http Server`，`Tomcat`，`Struts`，`Maven`，`Ant` 等等）一起接受者万千 Java 开发者的敬仰。然而在今年六月中旬，几乎是发布 3.0 版本的同时，iBatis 主页上的一则 “Apache iBATIS has been retired” 的声明在社区引起了一阵不小的波澜。在 Apache 寄居六年之后，iBatis 将代码托管到 Google Code。在声明中给出的主要理由是，和 Apache 相比，`Google Code` 更有利于开发者的协同工作，也更能适应快速发布。于此同时，iBatis 更名为 MyBatis。\n由一个 MyBatis 示例开始\n\n如果读者接触过一些常用的 Java EE 框架，应该都知道这些框架需要提供一个全局配置文件，用于指定程序正常运行所需的设置和参数信息。而针对常用的持久层框架而言（Hibernate、JPA、iBatis 等），则通常需要配置两类文件：一类用于指定数据源、事务属性以及其他一些参数配置信息（通常是一个独立的文件，可以称之为全局配置文件）；另一类则用于指定数据库表和程序之间的映射信息（可能不止一个文件，我们称之为映射文件）。MyBatis 也不例外，虽然其中的一部分可以通过注解的形式进行，但是这两部分内容本身仍是必不可少的。\n\n根据 iBatis 的习惯，我们通常把全局配置文件命名为 `sqlMapConfig.xml`，文件名本身并没有要求，在 MyBatis 中，也经常会将该文件命名为 `Configuration.xml `（读完全文后读者也许会发现，在 iBatis 中经常出现的 “sqlMap” 在 MyBatis 中被逐渐淡化了，除了此处，还比如 iBatis 配置文件的根元素为 &lt;sqlMapConfig&gt;，指定映射文件的元素为 &lt;sqlMap&gt;，以及 SqlMapClient 等等，这个变化正说明，iBatis 仅是以 SQL 映射为核心的框架，而在 MyBatis 中多以 `Mapper`、`Session`、`Configuration` 等其他常用 `ORM` 框架中的名字代替，体现的无非是两个方面：首先是为了减少开发者在切换框架所带来的学习成本；其次，MyBatis 充分吸收了其他 ORM 框架好的实践，MyBatis 现在已不仅仅是一个 SQL 映射框架了）。在全局配置文件中可以配置的信息主要包括如下几个方面：\n\n*   `properties` --- 用于提供一系列的键值对组成的属性信息，该属性信息可以用于整个配置文件中。\n*   `settings` --- 用于设置 MyBatis 的运行时方式，比如是否启用延迟加载等。\n*   `typeAliases` --- 为 Java 类型指定别名，可以在 XML 文件中用别名取代 Java 类的全限定名。\n*   `typeHandlers` --- 在 MyBatis 通过 PreparedStatement 为占位符设置值，或者从 ResultSet 取出值时，特定类型的类型处理器会被执行。\n*   `objectFactory` --- MyBatis 通过 ObjectFactory 来创建结果对象。可以通过继承 DefaultObjectFactory 来实现自己的 ObjectFactory 类。\n*   `plugins` --- 用于配置一系列拦截器，用于拦截映射 SQL 语句的执行。可以通过实现 Interceptor 接口来实现自己的拦截器。\n*   `environments` --- 用于配置数据源信息，包括连接池、事务属性等。\n*   `mappers` --- 程序中所有用到的 SQL 映射文件都在这里列出，这些映射 SQL 都被 MyBatis 管理。\n\n下面我们根据具体的实例，来了解下mybatis。实例环境：`eclipse 4.2` `mysql 5.5` `mybatis3.2.2`\n\n首先创建web项目，命名为mybatisDemo01，接着复制相关jar包到lib目录下。`mybatis-3.2.2.jar`和`mysql-connector-java-5.1.18.jar`。\n1、创建文件夹`main.resources.config`，用来保存配置文件。创建名为`configuration.xml`的配置文件，其内容如下：\n\n{%codeblock lang:xml%}\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration\nPUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n\"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;\n<configuration>\n<!—类型别名定义。今后可只用Student来代替它冗长的 全限定名—>\n<typeAliases>\n<typeAlias alias=\"Student\" type=\"com.hanfeng.demo.pojo.Student\"/>\n</typeAliases>\n<!— 配置数据源相关的信息 —>\n<environments default=\"development\">\n<environment id=\"development\">\n<transactionManager type=\"JDBC\"/>\n<!—使用连接池的数据源配置—>\n<dataSource type=\"POOLED\">\n<property name=\"driver\" value=\"com.mysql.jdbc.Driver\"/>\n<property name=\"url\" value=\"jdbc:mysql://localhost:3306/db_test\"/>\n<property name=\"username\" value=\"root\"/>\n<property name=\"password\" value=\"123456\"/>\n</dataSource>\n</environment>\n</environments>\n<!— 列出映射文件 —>\n<!—指定要用到的mapper文件。以下的resource属性告诉\nMyBatis要在类路径下的resources目录下找StudentMapper.xml文件。\n我们将把mapper文件存放在src目录下的resources目录中—>\n<mappers>\n<mapper resource=\"main/resources/sqlmap/StudentMapper.xml\"/>\n</mappers>\n</configuration>\n{%endcodeblock%}\n\n一定要注意上面的映射文件 DTD 约束哦，别忘记添加了。这个配置文件比较简单，主要是数据源和映射文件的配置。\n\n2、创建学生类。包名：`com.hanfeng.demo.pojo`\n\n{%codeblock lang:java%}\npackage com.hanfeng.demo.pojo;\n public class Student {\n private int id;\n private String name; //姓名\n private String gender; //性别\n private String major; //专业\n private String grade; //年级\n public int getId() {\n return id;\n }\n public void setId(int id) {\n this.id = id;\n }\n public String getName() {\n return name;\n }\n public void setName(String name) {\n this.name = name;\n }\n public String getGender() {\n return gender;\n }\n public void setGender(String gender) {\n this.gender = gender;\n }\n public String getMajor() {\n return major;\n }\n public void setMajor(String major) {\n this.major = major;\n }\n public String getGrade() {\n return grade;\n }\n public void setGrade(String grade) {\n this.grade = grade;\n }\n }\n{%endcodeblock%}\n\n3、创建接口，在接口中声明访问数据库的方法。包名：`com.hanfeng.demo.dao`\n\n{%codeblock lang:java%}\n package com.hanfeng.demo.dao;\n import com.hanfeng.demo.pojo.Student;\n /**\n * 接口 声明访问数据库的方法\n * @author hanfeng\n *\n */\n public interface StudentMapper {\n //根据学生ID查询学生实体\n public Student getById(int id);\n }\n{%endcodeblock%}\n\n4、编写`mapper`文件，`StudentMapper.xml`。在此文件里，我们写好查询的SQL语句，并配置好映射关系。\n\nMyBatis将根据此文件帮我们实现StudentMapper接口。内容如下：\n\n{%codeblock lang:xml%}\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;\n<!—namespace该是StudentMapper的完整限定名—>\n<mapper namespace=\"com.hanfeng.demo.dao.StudentMapper\">\n<!—定义java bean的属性与数据库表的列之间的映射。type=\"Student\"用到了configuration.xml中定义的别名—>\n<resultMap id=\"studentResultMap\" type=\"Student\">\n<!—id映射—>\n<id property=\"id\" column=\"id\"/>\n<!—普通属性映射—>\n<result property=\"name\" column=\"name\"/>\n<result property=\"gender\" column=\"gender\"/>\n<result property=\"major\" column=\"major\"/>\n<result property=\"grade\" column=\"grade\"/>\n</resultMap>\n<!—与StudentMapper接口中的getById方法对应，包括\n方法名和参数类型。SQL语句中以“#{}”的形式引用参数—>\n<select id=\"getById\" parameterType=\"int\" resultMap=\"studentResultMap\">\nSELECT *\nFROM student WHERE id = #{id}\n</select>\n</mapper>\n{%endcodeblock%}\n5、测试功能。\n\n创建一个专门用来保存测试代码的源文件夹test。包名：`com.hanfeng.demo.pojo.test`\n\n{%codeblock lang:java%}\npackage com.hanfeng.demo.pojo.test;\n import java.io.Reader;\n import org.apache.ibatis.io.Resources;\n import org.apache.ibatis.session.SqlSession;\n import org.apache.ibatis.session.SqlSessionFactory;\n import org.apache.ibatis.session.SqlSessionFactoryBuilder;\n import com.hanfeng.demo.dao.StudentMapper;\n import com.hanfeng.demo.pojo.Student;\n public class StudentTest {\n public static void main(String[] args) {\n //与configuration.xml中的mapper配置类似，告诉MyBatis应读取的核心配置文件\n String resource = &quot;main/resources/config/configuration.xml&quot;;\n Reader reader = null;\n try {\n reader = Resources.getResourceAsReader(resource);\n } catch (Exception e) {\n e.printStackTrace();\n }\n //创建SqlSessionFactory实例。没有指定要用到的\n //environment，则使用默认的environment\n SqlSessionFactory sqlSessionFactory;\n sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);\n SqlSession sqlSession = sqlSessionFactory.openSession();\n try {\n StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class);\n Student student = studentMapper.getById(2);\n if (student != null) {\n System.out.println(&quot;姓名：&quot;+student.getName()+&quot;\\n专业：&quot;+student.getMajor());\n }else{\n System.out.println(&quot;没有找到相关记录！&quot;);\n }\n } catch (Exception e) {\n e.printStackTrace();\n }finally{\n sqlSession.close();\n }\n }\n }\n {%endcodeblock%}\n\n然后运行测试。我们会发现程序正常输出内容，说明测试成功，代码没呀问题。\n\n[![wpid-210073e420d43daf2ad7a97814144c74_6878224.png](http://173.234.48.113/wp-content/uploads/2013/06/wpid-210073e420d43daf2ad7a97814144c74_6878224.png)](http://173.234.48.113/wp-content/uploads/2013/06/wpid-210073e420d43daf2ad7a97814144c74_6878224.png)\n\n例子的架构目录：\n\n[![7020185](http://173.234.48.113/wp-content/uploads/2013/06/7020185-210x300.png)](http://173.234.48.113/wp-content/uploads/2013/06/7020185.png)\n\n源代码：[http://pan.baidu.com/share/link?shareid=989191459&amp;uk=4161616584](http://pan.baidu.com/share/link?shareid=989191459&amp;uk=4161616584)","mtime":1386292759000,"source":"_posts/mybatis3学习笔记系列之一mybatis3入门.md"},"0da399qn420u932l":{"_id":"0da399qn420u932l","content":"title: \"【MyBatis学习笔记】系列之二：MyBatis增删改查示例\"\nid: 883\ndate: 2013-06-19 11:06:29\ntags: \n- mybatis\n- mybatis增删改查\ncategories: \n- mybatis\n---\n\n在系列一的基础上，我们实现mybatis的增删改查操作。查询操作在上一节已经实现，可以先去看看哈。\n\n1、为了方便地获取SqlSessionFactory实例，先写一个工具类SqlSessionFactoryGen，用以生成SqlSessionFactory实例，代码如下：\n\n[java]package com.hanfeng.demo.utils;\n\nimport java.io.Reader;\n\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\n\n/**\n* 工具类SqlSessionFactoryGen，用以生成SqlSessionFactory实例\n* @author hanfeng\n*\n*/\npublic class SqlSessionFactoryGen {\n private static SqlSessionFactory factory;\n //静态代码块。在类初始化时被执行，如第一次\n //引用类的静态变量，创建类的第一个实例\n static{\n //与configuration.xml中的mapper配置类似，告诉MyBatis应读取的核心配置文件\n String resource = &quot;main/resources/config/configuration.xml&quot;;\n Reader reader = null;\n try {\n reader = Resources.getResourceAsReader(resource);\n } catch (Exception e) {\n e.printStackTrace();\n }\n factory = new SqlSessionFactoryBuilder().build(reader);\n }\n\npublic static SqlSessionFactory getSqlSessionFactory()\n {\n return factory;\n }\n}\n\n[/java]\n\n由于整个程序只需要一个SqlSessionFactory实例，因此通过调用SqlSessionFactoryGen的getSqlSessionFactory()方法获取的是同一个SqlSessionFactory实例。\n\n2、新建执行测试类StudentManagerTest\n\n[java]\npackage com.hanfeng.demo.pojo.test;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport com.hanfeng.demo.dao.StudentMapper;\nimport com.hanfeng.demo.pojo.Student;\nimport com.hanfeng.demo.utils.SqlSessionFactoryGen;\npublic class StudentManagerTest {\n //获取SqlSessionFactory实例\n private static SqlSessionFactory factory = SqlSessionFactoryGen.getSqlSessionFactory();\n public static void main(String[] args) {\n }\n}\n\n[/java]\n\n我们会在测试类的基础上逐步增加方法哈，查询方法见上一节。\n\n3、增加方法\n首先在接口StudentMapper中声明执行增加、编辑、删除操作的方法，代码如下所示：\n\n[java]\n//添加新的学生\n public void add(Student student);\n //编辑学生信息\n public void update(Student student);\n //根据ID删除信息\n public void delete(int id);\n\n[/java]\n\n接着在StudentMapper.xml中编写相应的SQL语句\n\n[xml]\n&lt;!--与StudentMapper接口中的getById方法对应，包括方法名和参数类型。SQL语句中以“#{}”的形式引用参数--&gt;\n &lt;select id=&quot;getById&quot; parameterType=&quot;int&quot; resultMap=&quot;studentResultMap&quot;&gt;\n SELECT *\n FROM student WHERE id = #{id}\n &lt;/select&gt;\n &lt;!-- 新增学生 --&gt;\n &lt;!--执行增加操作的SQL语句。id和parameterType分别与StudentMapper接口中的add方法的名字和\n 参数类型一致。以#{name}的形式引用Student参数的name属性，MyBatis将使用反射读取Student参数\n 的此属性。#{name}中name大小写敏感。引用其他 的gender等属性与此一致。seGeneratedKeys设置\n 为&quot;true&quot;表明要MyBatis获取由数据库自动生成的主 键；keyProperty=&quot;id&quot;指定把获取到的主键值注入\n 到Student的id属性--&gt;\n &lt;insert id=&quot;add&quot; parameterType=&quot;Student&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;\n insert into student(name,gender,major,grade)values(#{name},#{gender},#{major},#{grade})\n &lt;/insert&gt;\n\n &lt;!-- 编辑学生信息 --&gt;\n &lt;!--执行修改操作的SQL语句。id和parameterType属性以及“#{}”的形式的含义与上述insert语句一致。--&gt;\n &lt;update id=&quot;update&quot; parameterType=&quot;Student&quot;&gt;\n update student set name=#{name},\n gender=#{gender},\n major=#{major},\n grade=#{grade}\n where id=#{id}\n &lt;/update&gt;\n\n &lt;!-- 删除学生信息 --&gt;\n &lt;delete id=&quot;delete&quot; parameterType=&quot;int&quot;&gt;\n delete from student where id = #{id}\n &lt;/delete&gt;\n\n[/xml]\n\n测试类完整代码：\n\n[java]\npackage com.hanfeng.demo.pojo.test;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport com.hanfeng.demo.dao.StudentMapper;\nimport com.hanfeng.demo.pojo.Student;\nimport com.hanfeng.demo.utils.SqlSessionFactoryGen;\npublic class StudentManagerTest {\n //获取SqlSessionFactory实例\n private static SqlSessionFactory factory = SqlSessionFactoryGen.getSqlSessionFactory();\n\n //实现增加学生\n public void add(){\n SqlSession sqlSession = factory.openSession();\n try {\n Student student = new Student();\n student.setName(&quot;陈静&quot;);\n student.setGender(&quot;女&quot;);\n student.setMajor(&quot;计算机科学与技术&quot;);\n student.setGrade(&quot;2008&quot;);\n\n StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);\n mapper.add(student);\n\n //提交事务，否则无法实际保存到数据库\n sqlSession.commit();\n\n System.out.println(&quot;数据库生成ID:&quot;+student.getId());\n } catch (Exception e) {\n e.printStackTrace();\n }finally{\n sqlSession.close();\n }\n }\n //根据ID查询学生\n public void QueryStudentById(){\n SqlSession sqlSession = factory.openSession();\n try {\n StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);\n Student student = mapper.getById(4);\n if (student != null) {\n System.out.println(&quot;姓名：&quot;+student.getName()+&quot;\\n专业：&quot;+student.getMajor());\n }else{\n System.out.println(&quot;没有找到相关记录！&quot;);\n }\n } catch (Exception e) {\n e.printStackTrace();\n }finally{\n sqlSession.close();\n }\n }\n\n //编辑学生信息\n public void updateInfo(){\n SqlSession sqlSession = factory.openSession();\n try {\n StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);\n Student student = mapper.getById(3);\n System.out.println(&quot;修改前信息：&quot;+student.getName()+&quot;--&quot;+student.getGender()+&quot;--&quot;+student.getMajor()+&quot;--&quot;+student.getGrade());\n student.setMajor(&quot;数控技术&quot;);\n mapper.update(student);\n sqlSession.commit();\n System.out.println(&quot;修改后信息：&quot;+student.getName()+&quot;--&quot;+student.getGender()+&quot;--&quot;+student.getMajor()+&quot;--&quot;+student.getGrade());\n } catch (Exception e) {\n e.printStackTrace();\n }finally{\n sqlSession.close();\n }\n }\n\n //删除学生信息\n public void deleteInfo(){\n SqlSession sqlSession = factory.openSession();\n try {\n StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);\n mapper.delete(4);\n System.out.println(&quot;删除成功&quot;);\n sqlSession.commit();\n } catch (Exception e) {\n e.printStackTrace();\n }finally{\n sqlSession.close();\n }\n }\n public static void main(String[] args) {\n StudentManagerTest test = new StudentManagerTest();\n //执行增加学生的方法\n// test.add();\n //执行学生查询\n// test.QueryStudentById();\n //执行学生信息修改\n// test.updateInfo();\n // 执行学生信息删除\n test.deleteInfo();\n }\n}\n\n[/java]\n\n源代码：[http://pan.baidu.com/share/link?shareid=1347967662&amp;uk=4161616584](http://pan.baidu.com/share/link?shareid=1347967662&amp;uk=4161616584)","mtime":1386291616000,"source":"_posts/mybatis学习笔记系列之二mybatis增删改查示例.md"},"3slyy542nxli99rx":{"_id":"3slyy542nxli99rx","content":"title: \"MyBatis学习笔记系列之二：MyBatis增删改查示例\"\nid: 883\ndate: 2013-06-19 11:06:29\ntags: \n- mybatis\n- mybatis增删改查\ncategories: \n- mybatis\n---\n\n在系列一的基础上，我们实现mybatis的增删改查操作。查询操作在上一节已经实现，可以先去看看哈。\n\n1、为了方便地获取`SqlSessionFactory`实例，先写一个工具类`SqlSessionFactoryGen`，用以生成SqlSessionFactory实例，代码如下：\n<!-- more -->\n{%codeblock lang:java%}\npackage com.hanfeng.demo.utils;\n\nimport java.io.Reader;\n\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\n\n/**\n* 工具类SqlSessionFactoryGen，用以生成SqlSessionFactory实例\n* @author hanfeng\n*\n*/\npublic class SqlSessionFactoryGen {\n private static SqlSessionFactory factory;\n //静态代码块。在类初始化时被执行，如第一次\n //引用类的静态变量，创建类的第一个实例\n static{\n //与configuration.xml中的mapper配置类似，告诉MyBatis应读取的核心配置文件\n String resource = &quot;main/resources/config/configuration.xml&quot;;\n Reader reader = null;\n try {\n reader = Resources.getResourceAsReader(resource);\n } catch (Exception e) {\n e.printStackTrace();\n }\n factory = new SqlSessionFactoryBuilder().build(reader);\n }\n\npublic static SqlSessionFactory getSqlSessionFactory()\n {\n return factory;\n }\n}\n{%endcodeblock%}\n\n由于整个程序只需要一个SqlSessionFactory实例，因此通过调用SqlSessionFactoryGen的`getSqlSessionFactory()`方法获取的是同一个SqlSessionFactory实例。\n\n2、新建执行测试类StudentManagerTest\n\n{%codeblock lang:java%}\npackage com.hanfeng.demo.pojo.test;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport com.hanfeng.demo.dao.StudentMapper;\nimport com.hanfeng.demo.pojo.Student;\nimport com.hanfeng.demo.utils.SqlSessionFactoryGen;\npublic class StudentManagerTest {\n //获取SqlSessionFactory实例\n private static SqlSessionFactory factory = SqlSessionFactoryGen.getSqlSessionFactory();\n public static void main(String[] args) {\n }\n}\n{%endcodeblock%}\n\n我们会在测试类的基础上逐步增加方法哈，查询方法见上一节。\n\n3、增加方法\n首先在接口`StudentMapper`中声明执行增加、编辑、删除操作的方法，代码如下所示：\n\n{%codeblock lang:java%}\n//添加新的学生\n public void add(Student student);\n //编辑学生信息\n public void update(Student student);\n //根据ID删除信息\n public void delete(int id);\n{%endcodeblock%}\n\n接着在`StudentMapper.xml`中编写相应的SQL语句\n\n{%codeblock lang:xml%}\n<!—与StudentMapper接口中的getById方法对应，包括方法名和参数类型。SQL语句中以“#{}”的形式引用参数—>\n<select id=\"getById\" parameterType=\"int\" resultMap=\"studentResultMap\">\nSELECT *\nFROM student WHERE id = #{id}\n</select>\n<!— 新增学生 —>\n<!—执行增加操作的SQL语句。id和parameterType分别与StudentMapper接口中的add方法的名字和\n参数类型一致。以#{name}的形式引用Student参数的name属性，MyBatis将使用反射读取Student参数\n的此属性。#{name}中name大小写敏感。引用其他 的gender等属性与此一致。seGeneratedKeys设置\n为\"true\"表明要MyBatis获取由数据库自动生成的主 键；keyProperty=\"id\"指定把获取到的主键值注入\n到Student的id属性—>\n<insert id=\"add\" parameterType=\"Student\" useGeneratedKeys=\"true\" keyProperty=\"id\">\ninsert into student(name,gender,major,grade)values(#{name},#{gender},#{major},#{grade})\n</insert>\n<!— 编辑学生信息 —>\n<!—执行修改操作的SQL语句。id和parameterType属性以及“#{}”的形式的含义与上述insert语句一致。—>\n<update id=\"update\" parameterType=\"Student\">\nupdate student set name=#{name},\ngender=#{gender},\nmajor=#{major},\ngrade=#{grade}\nwhere id=#{id}\n</update>\n<!— 删除学生信息 —>\n<delete id=\"delete\" parameterType=\"int\">\ndelete from student where id = #{id}\n</delete>\n{%endcodeblock%}\n\n测试类完整代码：\n\n{%codeblock lang:java%}\npackage com.hanfeng.demo.pojo.test;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport com.hanfeng.demo.dao.StudentMapper;\nimport com.hanfeng.demo.pojo.Student;\nimport com.hanfeng.demo.utils.SqlSessionFactoryGen;\npublic class StudentManagerTest {\n //获取SqlSessionFactory实例\n private static SqlSessionFactory factory = SqlSessionFactoryGen.getSqlSessionFactory();\n\n //实现增加学生\n public void add(){\n SqlSession sqlSession = factory.openSession();\n try {\n Student student = new Student();\n student.setName(&quot;陈静&quot;);\n student.setGender(&quot;女&quot;);\n student.setMajor(&quot;计算机科学与技术&quot;);\n student.setGrade(&quot;2008&quot;);\n\n StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);\n mapper.add(student);\n\n //提交事务，否则无法实际保存到数据库\n sqlSession.commit();\n\n System.out.println(&quot;数据库生成ID:&quot;+student.getId());\n } catch (Exception e) {\n e.printStackTrace();\n }finally{\n sqlSession.close();\n }\n }\n //根据ID查询学生\n public void QueryStudentById(){\n SqlSession sqlSession = factory.openSession();\n try {\n StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);\n Student student = mapper.getById(4);\n if (student != null) {\n System.out.println(&quot;姓名：&quot;+student.getName()+&quot;\\n专业：&quot;+student.getMajor());\n }else{\n System.out.println(&quot;没有找到相关记录！&quot;);\n }\n } catch (Exception e) {\n e.printStackTrace();\n }finally{\n sqlSession.close();\n }\n }\n\n //编辑学生信息\n public void updateInfo(){\n SqlSession sqlSession = factory.openSession();\n try {\n StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);\n Student student = mapper.getById(3);\n System.out.println(&quot;修改前信息：&quot;+student.getName()+&quot;--&quot;+student.getGender()+&quot;--&quot;+student.getMajor()+&quot;--&quot;+student.getGrade());\n student.setMajor(&quot;数控技术&quot;);\n mapper.update(student);\n sqlSession.commit();\n System.out.println(&quot;修改后信息：&quot;+student.getName()+&quot;--&quot;+student.getGender()+&quot;--&quot;+student.getMajor()+&quot;--&quot;+student.getGrade());\n } catch (Exception e) {\n e.printStackTrace();\n }finally{\n sqlSession.close();\n }\n }\n\n //删除学生信息\n public void deleteInfo(){\n SqlSession sqlSession = factory.openSession();\n try {\n StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);\n mapper.delete(4);\n System.out.println(&quot;删除成功&quot;);\n sqlSession.commit();\n } catch (Exception e) {\n e.printStackTrace();\n }finally{\n sqlSession.close();\n }\n }\n public static void main(String[] args) {\n StudentManagerTest test = new StudentManagerTest();\n //执行增加学生的方法\n// test.add();\n //执行学生查询\n// test.QueryStudentById();\n //执行学生信息修改\n// test.updateInfo();\n // 执行学生信息删除\n test.deleteInfo();\n }\n}\n\n{%endcodeblock%}\n\n源代码：[http://pan.baidu.com/share/link?shareid=1347967662&amp;uk=4161616584](http://pan.baidu.com/share/link?shareid=1347967662&amp;uk=4161616584)","mtime":1386294184000,"source":"_posts/mybatis3学习笔记系列之二mybatis3增删改查示例.md"},"0diamunafjusw36m":{"_id":"0diamunafjusw36m","content":"title: \"MyBatis学习笔记系列之三：MyBatis入门重点内容\"\nid: 887\ndate: 2013-06-19 11:29:41\ntags: \n- mybatis入门重点\ncategories: \n- mybatis\n---\n\n# 从 XML 中构建 SqlSessionFactory\n\n每 一 个 `MyBatis` 的 应 用 程 序 都 以 一 个 `SqlSessionFactory` 对 象 的 实 例 为 核 心 。 SqlSessionFactory 对 象 的 实 例 可 以 通 过 `SqlSessionFactoryBuilder` 对 象 来 获 得 。 SqlSessionFactoryBuilder 对象可以从 XML 配置文件,或从 `Configuration` 类的习惯准备的实 例中构建 SqlSessionFactory 对象。\n<!-- more -->\n从 XML 文件中构建 SqlSessionFactory 的实例非常简单。这里建议你使用类路径下的资 源文件来配置,但是你可以使用任意的 Reader 实例,这个实例包括由文字形式的文件路径 或 URL 形式的文件路径 file://来创建。MyBatis 包含了一些工具类,称作为资源,这些工具 类包含一些方法,这些方法使得从类路径或其他位置加载资源文件更加简单。\n\n{%codeblock lang:java%}\nString resource = &quot;org/mybatis/example/mybatis-config.xml&quot;;\nInputStream inputStream = Resources.getResourceAsStream(resource);\nsqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n{%endcodeblock%}\n\nXML 配置文件包含对 MyBatis 系统的核心设置,包含获取数据库连接实例的数据源和 决定事务范围和控制的事务管理器。关于 XML 配置文件的详细内容可以在文档后面找到, 这里给出一个简单的示例:\n{%codeblock lang:xml%}\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\nPUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n\"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;\n<configuration>\n<environments default=\"development\">\n<environment id=\"development\">\n<transactionManager type=\"JDBC\"/>\n<dataSource type=\"POOLED\">\n<property name=\"driver\" value=\"${driver}\"/>\n<property name=\"url\" value=\"${url}\"/>\n<property name=\"username\" value=\"${username}\"/>\n<property name=\"password\" value=\"${password}\"/>\n</dataSource>\n</environment>\n</environments>\n<mappers>\n<mapper resource=\"org/mybatis/example/BlogMapper.xml\"/>\n</mappers>\n</configuration>\n{%endcodeblock%}\n\n当然, XML 配置文件中还有很多可以配置的, 在 上面的示例指出的则是最关键的部分。 要注意 XML 头部的声明,需要用来验证 XML 文档正确性。`environment` 元素体中包含对事 务管理和连接池的环境配置。 mappers 元素是包含所有 mapper 映射器) ( 的列表, 这些 mapper 的 XML 文件包含 SQL 代码和映射定义信息。\n\n不使用 XML 构建 SqlSessionFactory\n如果你喜欢从 Java 程序而不是 XML 文件中直接创建配置实例, 或创建你自己的配置构 建器,MyBatis 也提供完整的配置类,提供所有从 XML 文件中加载配置信息的选项。\n\n{%codeblock lang:java%}\nDataSource dataSource = BlogDataSourceFactory.getBlogDataSource();\nTransactionFactory transactionFactory = new JdbcTransactionFactory();\nEnvironment environment = new Environment(&quot;development&quot;, transactionFactory, dataSource);\nConfiguration configuration = new Configuration(environment);\nconfiguration.addMapper(BlogMapper.class);\nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);\n{%endcodeblock%}\n\n注意这种情况下配置是添加映射类。映射类是 Java 类,这些类包含 SQL 映射语句的注 解从而避免了 XML 文件的依赖, XML 映射仍然在大多数高级映射 (比如: 嵌套 Join 映射) 时需要。出于这样的原因,如果存在 XML 配置文件的话,MyBatis 将会自动查找和加载一 个对等的 XML 文件(这种情况下,基于类路径下的 BlogMapper.class 类的类名,那么 BlogMapper.xml 将会被加载)。后面我们会了解更多。\n\n\n### 从 SqlSessionFactory 中获取 SqlSession\n\n现在,我们已经知道如何获取 `SqlSessionFactory` 对象了,基于同样的启示,我们就可以 获得 `SqlSession` 的实例了。 SqlSession 对象完全包含以数据库为背景的所有执行 SQL 操作的 方法。你可以用 SqlSession 实例来直接执行已映射的 SQL 语句。例如:\n\n{%codeblock lang:java%}\nSqlSession session = sqlSessionFactory.openSession();\ntry {\n Blog blog = (Blog) session.selectOne(&quot;org.mybatis.example.BlogMapper.selectBlog&quot;, 101);\n} finally {\n session.close();\n}\n{%endcodeblock%}\n\n这种方法起到的作用, 和我们使用之前的 MyBatis 版本是相似的, 现在有一种更简洁的 方法。使用合理描述参数和 SQL 语句返回值的接口(比如 BlogMapper.class) ,这样现在就 可以至此那个更简单,更安全的代码,没有容易发生的字符串文字和转换的错误。\n\n例如:\n\n{%codeblock lang:java%}\nSqlSession session = sqlSessionFactory.openSession();\ntry {\n BlogMapper mapper = session.getMapper(BlogMapper.class);\n Blog blog = mapper.selectBlog(101);\n} finally {\n session.close();\n}\n{%endcodeblock%}\n\n现在我们来探究一下这里到底执行了什么。\n\n### 探究已映射的 SQL 语句\n\n这里你也许想知道通过 `SqlSession` 和 `Mapper` 对象到底执行了什么操作。已映射的 SQL 语句是一个很大的主题, 而且这个主题会贯穿本文档的大部分内容。 为了给出一个宏观的概 念,这里有一些示例。 上面提到的任何一个示例,语句是通过 XML 或注解定义的。我们先来看看 XML。使 用基于 XML 的映射语言,在过去的几年中使得 MyBatis 非常流行,他为 MyBatis 提供所有 的特性设置。如果你以前用过 MyBatis,这个概念应该很熟悉了,但是 XML 映射文件也有 很多的改进,后面我们会详细来说。这里给出一个基于 XML 映射语句的示例,这些语句应 该可以满足上述示例中 SqlSession 对象的调用。\n\n{%codeblock lang:xml%}\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\nPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;\n<mapper namespace=\"org.mybatis.example.BlogMapper\">\n<select id=\"selectBlog\" parameterType=\"int\" resultType=\"Blog\">\nselect * from Blog where id = #{id}\n</select>\n</mapper>\n{%endcodeblock%}\n\n\n这个简单的例子中看起来有很多额外的东西, 但是也相当简洁了。 你可以在一个单独的 XML 映射文件中定义很多的映射语句,除 XML 头部和文档类型声明之外,你可以得到很 多 方 便 之 处 。 在 文 件 的 剩 余 部 分 是 很 好 的 自 我 解 释 。 在 命 名 空 间 `“com.mybatis.example.BlogMapper”`中,它定义了一个名为`“selectBlog”`的映射语句,这 样它允许你使用完全限定名 `“org.mybatis.example.BlogMapper.selectBlog” `来调用映射语句, 我们下面示例中所有的写法也是这样的。\n\n\tBlog blog = (Blog) session.selectOne(\"org.mybatis.example.BlogMapper.selectBlog\", 101);\n\n要注意这个使用完全限定名调用 Java 对象的方法是相似的,这样做是有原因的。这个 命名可以直接给相同命名空间下的的映射类, 使用一个名称, 参数和返回值和已映射的查询 语句都一样的方法即可。 这就允许你非常容易地调用映射器接口中的方法, 这和你前面看到 的是一样的,下面这个示例中它又出现了。\n\n{%codeblock lang:java%}\nBlogMapper mapper = session.getMapper(BlogMapper.class);\nBlog blog = mapper.selectBlog(101);\n{%endcodeblock%}\n\n第二种方式有很多有点,首先它不是基于文字的,那就更安全了。第二,如果你的 IDE 有代码补全功能,那么你可以利用它来操纵已映射的 SQL 语句。第三,不需要强制类型转 换,同时 BlogMapper 接口可以保持简洁,返回值类型很安全(参数类型也很安全) 。\n\n### 重要 命名空间的一点注释\n\n命名空间 在之前版本的 MyBatis 中是可选项,非常混乱也没有帮助。现在,命名空间 是必须的,而且有一个目的,它使用更长的完全限定名来隔离语句。\n\n命名空间使得接口绑定成为可能,就像你看到的那样,如果之前不了解,那么现在你 就会使用它们了,你应该按照下面给出示例的来练习,以免改变自己的想法。使用命名空 间,并将它放在合适的 Java 包空间之下,将会使你的代码变得简洁,在很长的时间内提高 MyBatis 的作用。\n\n命名解析: 为了减少输入量,MyBatis 对所有的命名配置元素使用如下的命名解析规 则,包括语句,结果映射,缓存等。\n\n直接查找完全限定名(比如“`com.mypackage.MyMapper.selectAllThings`”,如果 ) 发现就使用。\n短名称(比如“`selectAllThings`” )可以用来引用任意含糊的对象。而如果有两个 或两个以上的(比如“`com.foo.selectAllThings` ”和“`com.bar.selectAllThings`” ), 那么就会得到错误报告,说短名称是含糊的,因此就必须使用完全限定名。\n如 BlogMapper 这样的映射器类来说,还有一个妙招。它们中间映射的语句可以不需要 在 XML 中来写,而可以使用 Java 注解来替换。比如,上面的 XML 示例可以如下来替换:\n\n{%codeblock lang:java%}\npackage org.mybatis.example;\npublic interface BlogMapper {\n @Select(&quot;SELECT * FROM blog WHERE id = #{id}&quot;)\n Blog selectBlog(int id);\n}\n{%endcodeblock%}\n\n对于简单语句来说,使用注解代码会更加清晰,然而 Java 注解对于复杂语句来说就会 混乱, 应该限制使用。 因此, 如果你不得不做复杂的事情, 那么最好使用 XML 来映射语句。\n\n当然这也取决于你和你的项目团队的决定, 看哪种更适合你来使用, 还有以长久方式来 使用映射语句的重要性。也就是说,不要将自己局限在一种方式中。你可以轻松地将注解换 成 XML 映射语句,反之亦然。\n\n## 范围和生命周期\n\n理解我们目前已经讨论过的不同范围和生命周期类是很重要的。 不正确的使用它们会导 致严重的并发问题。\n\n### **SqlSessionFactoryBuilder**\n\n这个类可以被实例化,使用和丢弃。一旦你创建了 `SqlSessionFactory` 后,这个类就不需 要存在了。 因此 `SqlSessionFactoryBuilder` 实例的最佳范围是方法范围 (也就是本地方法变量)。 你可以重用 SqlSessionFactoryBuilder 来创建多个 SqlSessionFactory 实例, 但是最好的方式是 不需要保持它一直存在来保证所有 XML 解析资源,因为还有更重要的事情要做。\n\n### SqlSessionFactory\n\n一旦被创建,SqlSessionFactory 应该在你的应用执行期间都存在。没有理由来处理或重 新创建它。 使用 SqlSessionFactory 的最佳实践是在应用运行期间不要重复创建多次。 这样的 操作将被视为是非常糟糕的。 因此 SqlSessionFactory 的最佳范围是应用范围。 有很多方法可 以做到, 最简单的就是使用单例模式或者静态单例模式。\n\n### SqlSession\n\n每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不能被共享,也是线程 不安全的。因此最佳的范围是请求或方法范围。绝对不能将 SqlSession 实例的引用放在一个 类的静态字段甚至是实例字段中。 也绝不能将 SqlSession 实例的引用放在任何类型的管理范 围中, 比如 Serlvet 架构中的 HttpSession。 如果你现在正用任意的 Web 框架, 要考虑 SqlSession 放在一个和 HTTP 请求对象相似的范围内。换句话说,基于收到的 HTTP 请求,你可以打开 了一个 SqlSession,然后返回响应,就可以关闭它了。关闭 Session 很重要,你应该确保使 用 finally 块来关闭它。下面的示例就是一个确保 SqlSession 关闭的基本模式:\n\n{%codeblock lang:java%}\nSqlSession session = sqlSessionFactory.openSession();\ntry {\n // do work\n} finally {\n session.close();\n}\n{%endcodeblock%}\n\n在你的代码中一贯地使用这种模式, 将会保证所有数据库资源都正确地关闭 (假设你没 有通过你自己的连接关闭,这会给 MyBatis 造成一种迹象表明你要自己管理连接资源) 。\n\n### Mapper 实例\n\n映射器是你创建绑定映射语句的接口。映射器接口的实例可以从 SqlSession 中获得。那 么从技术上来说,当被请求时,任意映射器实例的最宽范围和 SqlSession 是相同的。然而, 映射器实例的最佳范围是方法范围。也就是说,它们应该在使用它们的方法中被请求,然后 就抛弃掉。它们不需要明确地关闭,那么在请求对象中保留它们也就不是什么问题了,这和 SqlSession 相似。你也许会发现,在这个水平上管理太多的资源的话会失控。保持简单,将 映射器放在方法范围内。下面的示例就展示了这个实践:\n\n{%codeblock lang:java%}\nSqlSession session = sqlSessionFactory.openSession();\ntry {\n BlogMapper mapper = session.getMapper(BlogMapper.class);\n // do work\n} finally {\n session.close();\n}\n{%endcodeblock%}","mtime":1386294193000,"source":"_posts/mybatis3学习笔记系列之三mybatis入门重点内容.md"},"5ims0szb7hnqalc0":{"_id":"5ims0szb7hnqalc0","content":"title: \"MyBatis实战之一：序言的话\"\nid: 1003\ndate: 2013-11-25 19:30:43\ntags: \ncategories: \n- 未分类\n---\n\n<div><div>序言</div><div>\n</div><div><font face=\"Lucida Console\">在上个项目中使用的hibernate，备受折磨，据说mybatis不错，比hibernate灵活，且性能也好，属于轻量级框架。乘此机会学习下，希望在下一个项目中可以使用上。</font></div></div>\n\n## 简介<a name=\"a\" style=\"color: rgb(0, 136, 204);\"></a>\n<!--more--><div class=\"section\" style=\"background-color: rgb(255, 255, 255);\">\n\n### 什么是 MyBatis?<a name=\"a_MyBatis\" style=\"color: rgb(0, 136, 204);\"></a>\n\nMyBatis 是支持普通 SQL 查询,存储过程和高级映射的优秀持久层框架。MyBatis 消除 了几乎所有的 JDBC 代码和参数的手工设置以及结果集的检索。MyBatis 使用简单的 XML 或注解用于配置和原始映射,将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java 对象)映射成数据库中的记录。\n\nORM基本思想\n\n<p style=\"margin: 0px 7px 10px;\"><font color=\"#333333\" face=\"Helvetica Neue, Helvetica, Arial, sans-serif\">无论是用过的hibernate,mybatis,你都可以法相他们有一个共同点：</font>\n\n<font color=\"#333333\" face=\"Helvetica Neue, Helvetica, Arial, sans-serif\">1\\. 从配置文件(通常是XML配置文件中)得到 sessionfactory.</font>\n\n<font color=\"#333333\" face=\"Helvetica Neue, Helvetica, Arial, sans-serif\">2\\. 由sessionfactory &nbsp;产生 session</font>\n\n<font color=\"#333333\" face=\"Helvetica Neue, Helvetica, Arial, sans-serif\">3\\. 在session 中完成对数据的增删改查和事务提交等.</font>\n\n<font color=\"#333333\" face=\"Helvetica Neue, Helvetica, Arial, sans-serif\">4\\. 在用完之后关闭session 。</font>\n\n<font color=\"#333333\" face=\"Helvetica Neue, Helvetica, Arial, sans-serif\">5\\. 在java 对象和 数据库之间有做mapping 的配置文件，也通常是xml 文件。</font>\n\n<font color=\"#333333\" face=\"Helvetica Neue, Helvetica, Arial, sans-serif\">\n</font>\n\n<font color=\"#333333\" face=\"Helvetica Neue, Helvetica, Arial, sans-serif\">\n</font>\n</p>\n\n</div>\n\n<div>[来自为知笔记(Wiz)](http://www.wiz.cn/i/bf10110a \"来自为知笔记(Wiz)\")</div>","mtime":1386290932000,"source":"_posts/mybatis3实战之一：序言的话.md"},"vdwmlenhgo89xnjr":{"_id":"vdwmlenhgo89xnjr","content":"title: \"MyBatis实战之二：开发环境搭建及HelloWorld\"\nid: 1012\ndate: 2013-11-25 19:38:02\ntags: \ncategories: \n- 未分类\n---\n\n开发环境和普通的web项目一样，这里我们需要到官网去下载用到的mybatis包。<div>\n</div><div>官网：[http://blog.mybatis.org/p/products.html](http://blog.mybatis.org/p/products.html)</div><!--more--><div>github：[https://github.com/mybatis/mybatis-3/releases](https://github.com/mybatis/mybatis-3/releases)</div><div>\n</div><div>下载完毕就开始进入新建web项目。导入mybatis-3.2.4-SNAPSHOT.jar、mysql-connector-java-5.1.27.jar、junit-4.11.jar<span style=\"font-size: 10.5pt; line-height: 1.5;\">到web工程lib目录里头。</span></div><div>![](6866e0e6-7706-45fd-a35e-5f52fc9371e4_files/14550431.png)</div><div>接着创建测试数据库mybatis-test和用户表user，采用utf-8编码字符，防止中文乱码。</div><div>![](6866e0e6-7706-45fd-a35e-5f52fc9371e4_files/13570667.jpg)</div><div>创建用户表user</div><div>![](6866e0e6-7706-45fd-a35e-5f52fc9371e4_files/13724702.png)</div><div>插入一条测试数据</div><div>![](6866e0e6-7706-45fd-a35e-5f52fc9371e4_files/13770613.png)</div><div>\n</div><div>1、添加mybatis配置文件Configuration.xml</div><div>\n</div><div>该文件是mybatis用来简历sessionFactory用的，里面包含数据库连接相关信息，java类对应别名。</div><div>\n</div><div><div><!--WizRtf2Html Charset=0  --><span style=\"font-size:10pt;color:#008080;font-family:'Source Code Pro';\">&lt;?<span style=\"color:#3f7f7f;\">xml<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">version<span style=\"color:WindowText;\">=<span style=\"font-style:italic;color:#2a00ff;\">\"1.0\"</span></span></span>&nbsp;<span style=\"color:#7f007f;\">encoding<span style=\"color:WindowText;\">=<span style=\"font-style:italic;color:#2a00ff;\">\"UTF-8\"</span></span></span>&nbsp;</span></span>?&gt;</span></div><div><span style=\"font-size:10pt;color:#008080;font-family:'Source Code Pro';\">&lt;!<span style=\"color:#3f7f7f;\">DOCTYPE<span style=\"color:WindowText;\">&nbsp;</span></span>configuration<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#808080;\">PUBLIC</span>&nbsp;</span>\"-//mybatis.org//DTD&nbsp;Config&nbsp;3.0//EN\"</span></div><div><span style=\"font-size:10pt;color:#3f7f5f;font-family:'Source Code Pro';\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"<span style=\"color:#008080;\">&gt;</span></span></div><div><span style=\"font-size:10pt;color:#008080;font-family:'Source Code Pro';\">&lt;<span style=\"color:#3f7f7f;\">configuration</span>&gt;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;<span style=\"color:#3f7f7f;\">typeAliases</span>&gt;</span>&nbsp;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;<span style=\"color:#3f7f7f;\">typeAlias<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">alias</span></span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"User\"<span style=\"font-style:normal;color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">type</span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"com.yihaomen.mybatis.model.User\"<span style=\"font-style:normal;color:#008080;\">/&gt;</span></span>&nbsp;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;/<span style=\"color:#3f7f7f;\">typeAliases</span>&gt;</span>&nbsp;</span></div><div></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;<span style=\"color:#3f7f7f;\">environments<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">default</span></span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"development\"<span style=\"font-style:normal;color:#008080;\">&gt;</span></span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;<span style=\"color:#3f7f7f;\">environment<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">id</span></span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"development\"<span style=\"font-style:normal;color:#008080;\">&gt;</span></span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;<span style=\"color:#3f7f7f;\">transactionManager<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">type</span></span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"JDBC\"<span style=\"font-style:normal;color:#008080;\">/&gt;</span></span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;<span style=\"color:#3f7f7f;\">dataSource<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">type</span></span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"POOLED\"<span style=\"font-style:normal;color:#008080;\">&gt;</span></span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;<span style=\"color:#3f7f7f;\">property<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">name</span></span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"driver\"<span style=\"font-style:normal;color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">value</span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"com.mysql.jdbc.Driver\"<span style=\"font-style:normal;color:#008080;\">/&gt;</span></span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;<span style=\"color:#3f7f7f;\">property<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">name</span></span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"url\"<span style=\"font-style:normal;color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">value</span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"jdbc:mysql://127.0.0.1:3306/mybatis-test\"<span style=\"font-style:normal;color:WindowText;\">&nbsp;<span style=\"color:#008080;\">/&gt;</span></span></span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;<span style=\"color:#3f7f7f;\">property<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">name</span></span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"username\"<span style=\"font-style:normal;color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">value</span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"root\"<span style=\"font-style:normal;color:#008080;\">/&gt;</span></span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;<span style=\"color:#3f7f7f;\">property<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">name</span></span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"password\"<span style=\"font-style:normal;color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">value</span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"123456\"<span style=\"font-style:normal;color:#008080;\">/&gt;</span></span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;/<span style=\"color:#3f7f7f;\">dataSource</span>&gt;</span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;/<span style=\"color:#3f7f7f;\">environment</span>&gt;</span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;/<span style=\"color:#3f7f7f;\">environments</span>&gt;</span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;<span style=\"color:#3f7f7f;\">mappers</span>&gt;</span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;<span style=\"color:#3f7f7f;\">mapper<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">resource</span></span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"com/hanfeng/mybatis/model/User.xml\"<span style=\"font-style:normal;color:#008080;\">/&gt;</span></span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;/<span style=\"color:#3f7f7f;\">mappers</span>&gt;</span></span></div><span style=\"font-size:10pt;color:#008080;font-family:'Source Code Pro';\">&lt;/<span style=\"color:#3f7f7f;\">configuration</span>&gt;</span></div><div>2、创建与数据库对应的类</div><div><div><!--WizRtf2Html Charset=0  --><span style=\"font-weight:bold;font-size:10pt;color:#7f0055;font-family:'Source Code Pro';\">package<span style=\"font-weight:normal;color:WindowText;\">&nbsp;com.hanfeng.mybatis.model;</span></span></div><div></div><div><span style=\"font-size:10pt;color:#3f5fbf;font-family:'Source Code Pro';\">/**</span></div><div><span style=\"font-size:10pt;color:#3f5fbf;font-family:'Source Code Pro';\">&nbsp;*&nbsp;<span style=\"font-weight:bold;color:#7f9fbf;\">@author</span>&nbsp;hanfeng&nbsp;E<span style=\"color:#7f7f9f;\">-</span>mail:zhdevelop@gmail.com</span></div><div><span style=\"font-size:10pt;color:#3f5fbf;font-family:'Source Code Pro';\">&nbsp;*&nbsp;<span style=\"font-weight:bold;color:#7f9fbf;\">@version</span>&nbsp;2013年11月25日&nbsp;上午11:51:09</span></div><div><span style=\"font-size:10pt;color:#3f5fbf;font-family:'Source Code Pro';\">&nbsp;*&nbsp;</span></div><div><span style=\"font-size:10pt;color:#3f5fbf;font-family:'Source Code Pro';\">&nbsp;*/</span></div><div></div><div><span style=\"font-weight:bold;font-size:10pt;color:#7f0055;font-family:'Source Code Pro';\">public<span style=\"font-weight:normal;color:WindowText;\">&nbsp;</span>class<span style=\"font-weight:normal;color:WindowText;\">&nbsp;User&nbsp;{</span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">private</span>&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">int</span>&nbsp;<span style=\"color:#0000c0;\">id</span>;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">private</span>&nbsp;String&nbsp;<span style=\"color:#0000c0;\">account</span>;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">private</span>&nbsp;String&nbsp;<span style=\"color:#0000c0;\">password</span>;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">private</span>&nbsp;String&nbsp;<span style=\"color:#0000c0;\">name</span>;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">private</span>&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">int</span>&nbsp;<span style=\"color:#0000c0;\">age</span>;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">private</span>&nbsp;String&nbsp;<span style=\"color:#0000c0;\">address</span>;</span></div><div></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">public</span>&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">int</span>&nbsp;getId()&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">return</span>&nbsp;<span style=\"color:#0000c0;\">id</span>;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">public</span>&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">void</span>&nbsp;setId(<span style=\"font-weight:bold;color:#7f0055;\">int</span>&nbsp;id)&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">this</span>.<span style=\"color:#0000c0;\">id</span>&nbsp;=&nbsp;id;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">public</span>&nbsp;String&nbsp;getAccount()&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">return</span>&nbsp;<span style=\"color:#0000c0;\">account</span>;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">public</span>&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">void</span>&nbsp;setAccount(String&nbsp;account)&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">this</span>.<span style=\"color:#0000c0;\">account</span>&nbsp;=&nbsp;account;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">public</span>&nbsp;String&nbsp;getPassword()&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">return</span>&nbsp;<span style=\"color:#0000c0;\">password</span>;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">public</span>&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">void</span>&nbsp;setPassword(String&nbsp;password)&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">this</span>.<span style=\"color:#0000c0;\">password</span>&nbsp;=&nbsp;password;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">public</span>&nbsp;String&nbsp;getName()&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">return</span>&nbsp;<span style=\"color:#0000c0;\">name</span>;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">public</span>&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">void</span>&nbsp;setName(String&nbsp;name)&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">this</span>.<span style=\"color:#0000c0;\">name</span>&nbsp;=&nbsp;name;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">public</span>&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">int</span>&nbsp;getAge()&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">return</span>&nbsp;<span style=\"color:#0000c0;\">age</span>;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">public</span>&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">void</span>&nbsp;setAge(<span style=\"font-weight:bold;color:#7f0055;\">int</span>&nbsp;age)&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">this</span>.<span style=\"color:#0000c0;\">age</span>&nbsp;=&nbsp;age;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">public</span>&nbsp;String&nbsp;getAddress()&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">return</span>&nbsp;<span style=\"color:#0000c0;\">address</span>;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">public</span>&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">void</span>&nbsp;setAddress(String&nbsp;address)&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">this</span>.<span style=\"color:#0000c0;\">address</span>&nbsp;=&nbsp;address;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">}</span></div></div><div>3、创建类的映射文件</div><div><div><!--WizRtf2Html Charset=0  --><span style=\"font-size:10pt;color:#008080;font-family:'Source Code Pro';\">&lt;?<span style=\"color:#3f7f7f;\">xml<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">version<span style=\"color:WindowText;\">=<span style=\"font-style:italic;color:#2a00ff;\">\"1.0\"</span></span></span>&nbsp;<span style=\"color:#7f007f;\">encoding<span style=\"color:WindowText;\">=<span style=\"font-style:italic;color:#2a00ff;\">\"UTF-8\"</span></span></span></span></span>?&gt;</span></div><div><span style=\"font-size:10pt;color:#008080;font-family:'Source Code Pro';\">&lt;!<span style=\"color:#3f7f7f;\">DOCTYPE<span style=\"color:WindowText;\">&nbsp;</span></span>mapper<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#808080;\">PUBLIC</span>&nbsp;</span>\"-//mybatis.org//DTD&nbsp;Mapper&nbsp;3.0//EN\"<span style=\"color:WindowText;\">&nbsp;</span></span></div><div><span style=\"font-size:10pt;color:#3f7f5f;font-family:'Source Code Pro';\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"<span style=\"color:#008080;\">&gt;</span></span></div><div><span style=\"font-size:10pt;color:#008080;font-family:'Source Code Pro';\">&lt;<span style=\"color:#3f7f7f;\">mapper<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">namespace<span style=\"color:WindowText;\">=<span style=\"font-style:italic;color:#2a00ff;\">\"com.hanfeng.mybatis.model.User\"</span></span></span></span></span>&gt;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;<span style=\"color:#3f7f7f;\">select<span style=\"color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">id</span></span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"selectUserById\"<span style=\"font-style:normal;color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">parameterType</span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"int\"<span style=\"font-style:normal;color:WindowText;\">&nbsp;<span style=\"color:#7f007f;\">resultType</span></span></span>=<span style=\"font-style:italic;color:#2a00ff;\">\"User\"<span style=\"font-style:normal;color:#008080;\">&gt;</span></span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;select&nbsp;*&nbsp;from&nbsp;user&nbsp;where&nbsp;id&nbsp;=&nbsp;#{id}</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008080;\">&lt;/<span style=\"color:#3f7f7f;\">select</span>&gt;</span></span></div><span style=\"font-size:10pt;color:#008080;font-family:'Source Code Pro';\">&lt;/<span style=\"color:#3f7f7f;\">mapper</span>&gt;</span></div><div>\n</div><div>4、创建junit测试类</div><div><div><!--WizRtf2Html Charset=0  --><span style=\"font-weight:bold;font-size:10pt;color:#7f0055;font-family:'Source Code Pro';\">package<span style=\"font-weight:normal;color:WindowText;\">&nbsp;com.hanfeng.mybatis.test;</span></span></div><div></div><div><span style=\"font-weight:bold;font-size:10pt;color:#7f0055;font-family:'Source Code Pro';\">import<span style=\"font-weight:normal;color:WindowText;\">&nbsp;java.io.IOException;</span></span></div><div><span style=\"font-weight:bold;font-size:10pt;color:#7f0055;font-family:'Source Code Pro';\">import<span style=\"font-weight:normal;color:WindowText;\">&nbsp;java.io.Reader;</span></span></div><div></div><div><span style=\"font-weight:bold;font-size:10pt;color:#7f0055;font-family:'Source Code Pro';\">import<span style=\"font-weight:normal;color:WindowText;\">&nbsp;org.apache.ibatis.io.Resources;</span></span></div><div><span style=\"font-weight:bold;font-size:10pt;color:#7f0055;font-family:'Source Code Pro';\">import<span style=\"font-weight:normal;color:WindowText;\">&nbsp;org.apache.ibatis.session.SqlSession;</span></span></div><div><span style=\"font-weight:bold;font-size:10pt;color:#7f0055;font-family:'Source Code Pro';\">import<span style=\"font-weight:normal;color:WindowText;\">&nbsp;org.apache.ibatis.session.SqlSessionFactory;</span></span></div><div><span style=\"font-weight:bold;font-size:10pt;color:#7f0055;font-family:'Source Code Pro';\">import<span style=\"font-weight:normal;color:WindowText;\">&nbsp;org.apache.ibatis.session.SqlSessionFactoryBuilder;</span></span></div><div><span style=\"font-weight:bold;font-size:10pt;color:#7f0055;font-family:'Source Code Pro';\">import<span style=\"font-weight:normal;color:WindowText;\">&nbsp;org.junit.Before;</span></span></div><div><span style=\"font-weight:bold;font-size:10pt;color:#7f0055;font-family:'Source Code Pro';\">import<span style=\"font-weight:normal;color:WindowText;\">&nbsp;org.junit.Test;</span></span></div><div></div><div><span style=\"font-weight:bold;font-size:10pt;color:#7f0055;font-family:'Source Code Pro';\">import<span style=\"font-weight:normal;color:WindowText;\">&nbsp;com.alibaba.fastjson.JSON;</span></span></div><div><span style=\"font-weight:bold;font-size:10pt;color:#7f0055;font-family:'Source Code Pro';\">import<span style=\"font-weight:normal;color:WindowText;\">&nbsp;com.hanfeng.mybatis.model.User;</span></span></div><div></div><div><span style=\"font-size:10pt;color:#3f5fbf;font-family:'Source Code Pro';\">/**&nbsp;</span></div><div><span style=\"font-size:10pt;color:#3f5fbf;font-family:'Source Code Pro';\">&nbsp;*&nbsp;<span style=\"font-weight:bold;color:#7f9fbf;\">@author</span>&nbsp;hanfeng&nbsp;E<span style=\"color:#7f7f9f;\">-</span>mail:zhdevelop@gmail.com&nbsp;</span></div><div><span style=\"font-size:10pt;color:#3f5fbf;font-family:'Source Code Pro';\">&nbsp;*&nbsp;<span style=\"font-weight:bold;color:#7f9fbf;\">@version</span>&nbsp;2013年11月25日&nbsp;上午11:59:18&nbsp;</span></div><div><span style=\"font-size:10pt;color:#3f5fbf;font-family:'Source Code Pro';\">&nbsp;*&nbsp;</span></div><div><span style=\"font-size:10pt;color:#3f5fbf;font-family:'Source Code Pro';\">&nbsp;*/</span></div><div></div><div><span style=\"font-weight:bold;font-size:10pt;color:#7f0055;font-family:'Source Code Pro';\">public<span style=\"font-weight:normal;color:WindowText;\">&nbsp;</span>class<span style=\"font-weight:normal;color:WindowText;\">&nbsp;TestMyBatis{</span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#3f5fbf;\">/**</span></span></div><div><span style=\"font-size:10pt;color:#3f5fbf;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;MyBatis应用是以一个SqlSessionFactory对象的实例为核心，</span></div><div><span style=\"font-size:10pt;color:#3f5fbf;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;该对象的实例可以通过SqlSessionFactoryBulider对象获得。</span></div><div><span style=\"font-size:10pt;color:#3f5fbf;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;</span></div><div><span style=\"font-size:10pt;color:#3f5fbf;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">private</span>&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">static</span>&nbsp;SqlSessionFactory&nbsp;<span style=\"font-style:italic;color:#0000c0;\">sqlSessionFactory</span>;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">private</span>&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">static</span>&nbsp;Reader&nbsp;<span style=\"font-style:italic;color:#0000c0;\">reader</span>;&nbsp;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">public</span>&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">static</span>&nbsp;SqlSessionFactory&nbsp;getSqlSessionFactory()&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">return</span>&nbsp;<span style=\"font-style:italic;color:#0000c0;\">sqlSessionFactory</span>;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#646464;\">@Before</span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">public</span>&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">void</span>&nbsp;before(){</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">try</span>&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-style:italic;color:#0000c0;\">reader</span>&nbsp;=&nbsp;Resources.<span style=\"font-style:italic;\">getResourceAsReader</span>(<span style=\"color:#2a00ff;\">\"Configuration.xml\"</span>);</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-style:italic;color:#0000c0;\">sqlSessionFactory</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">new</span>&nbsp;SqlSessionFactoryBuilder().build(<span style=\"font-style:italic;color:#0000c0;\">reader</span>);</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">catch</span>&nbsp;(IOException&nbsp;e)&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#646464;\">@Test</span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">public</span>&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">void</span>&nbsp;test1(){</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#3f7f5f;\">//获取SqlSession实例，SqlSession对象完全包含以数据库为背景的所有执行sql操作的方法。</span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#3f7f5f;\">//我们可以用&nbsp;SqlSession实例来直接执行已映射的&nbsp;SQL语句</span></span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SqlSession&nbsp;session&nbsp;=&nbsp;<span style=\"font-style:italic;color:#0000c0;\">sqlSessionFactory</span>.openSession();</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">try</span>&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;User&nbsp;user&nbsp;=&nbsp;(User)session.selectOne(<span style=\"color:#2a00ff;\">\"com.hanfeng.mybatis.model.User.selectUserById\"</span>,1);</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.<span style=\"font-style:italic;color:#0000c0;\">out</span>.println(JSON.<span style=\"font-style:italic;\">toJSONString</span>(user));</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span style=\"font-weight:bold;color:#7f0055;\">catch</span>&nbsp;(Exception&nbsp;e)&nbsp;{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<span style=\"font-weight:bold;color:#7f0055;\">finally</span>{</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;session.close();</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style=\"font-size:10pt;color:WindowText;font-family:'Source Code Pro';\">}</span></div></div><div>\n</div><div>执行test case ，成功获取到结果</div><div>![](6866e0e6-7706-45fd-a35e-5f52fc9371e4_files/18230448.png)</div><div>代码地址：[https://github.com/zhdevelop/mybatis3-study.git](https://github.com/zhdevelop/mybatis3-study.git)&nbsp; 01.mybaitis</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div><div>\n</div>\n\n<div>[来自为知笔记(Wiz)](http://www.wiz.cn/i/bf10110a \"来自为知笔记(Wiz)\")</div>","mtime":1386290932000,"source":"_posts/mybatis3实战之二：开发环境搭建及helloworld.md"},"v6flie4238gkcfaq":{"_id":"v6flie4238gkcfaq","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"utf-8\">\n\t<title>Hello World</title>\n\t\n\t<link rel=\"stylesheet\" href=\"style_home.css\">\n\t<link href='http://fonts.googleapis.com/css?family=Source+Sans+Pro:200,300,400' rel='stylesheet' type='text/css'>\n\t<link href='http://fonts.googleapis.com/css?family=Dancing+Script' rel='stylesheet' type='text/css'>\n\t<link href='http://fonts.googleapis.com/css?family=Text+Me+One' rel='stylesheet' type='text/css'>\n\n</head>\n<body>\n\t<h1>About Me</h1>\n\t<div class=\"main\">\n\t\t<h2>欢迎</h2>\n\t\t<p>I'm a developer </p>\n\t\t<h2>轨迹</h2>\n\t\t<p>朱俊望，男，80年代末出生于海峡西岸妈祖故里-福建莆田，现居福建福州，从事码农工作。</p>\n\t\t<p>2011年，毕业于武汉软件工程职业学院软件技术专业，一年(2011-2012)创业经历，一年(2013-至今)码农经验。</p>\n\t\t\n\t\t<h2>技能</h2>\n\n\t\t<ul>\n\t\t\t<li>掌握JAVA EE基础，掌握面向对象编程思想</li>\n\t\t\t<li>掌握jsp、servlet、javabean、jdbc等web开发技术</li>\n\t\t\t<li>熟练运用Struts、hibernate、spring、springMVC框架</li>\n\t\t\t<li>掌握mysql、mssql、oracle数据库基础</li>\n\t\t\t<li>熟练HTML、javascript、css、jquery的运用</li>\n\t\t\t<li>熟练使用Maven、svn、git等管理工具</li>\n\t\t\t<li>熟悉tomcat服务器部署及配置</li>\n\t\t\t<li>Linux平台安装开发及部署</li>\n\t\t</ul>\n\n\n\t\t<h2>项目</h2>\n\t\t<p><strong>JAVA企业级应用：</strong><a href=\"http://zhujunwang.cn/generating-set-matches-management-system/\" alt=\"发电机组配型系统\">产品数据配型管理(2013.7-2013.11)</a></p>\n\n\t\t<h2>链接</h2>\n\t\t<ul id=\"nav\">\n\t\t\t<li><a title=\"BLOG\" href=\"http://zhujunwang.cn\">BLOG</a></li>\n\t\t\t<li><a title=\"Google+\" href=\"https://plus.google.com/100185806262651734769/\">Google+</a></li>\n\t\t\t<li><a title=\"GitHub\" href=\"https://github.com/zhdevelop\">GitHub</a></li>\n\t\t\t<li><a title=\"Git @ OSC\" href=\"http://git.oschina.net/zhdevelop\">Git @ OSC</a></li>\n\t\t\t<li><a title=\"Twitter\" href=\"https://twitter.com/zhdevelop\">Twitter</a></li>\n\t\t\t<li><a title=\"E-Mail\" href=\"mailto:zhdevelop@gmail.com\">E-Mail</a></li>\n\t\t</ul>\n\t</div>\n\t\n<div style=\"display:none;\">\n<script src=\"http://s22.cnzz.com/z_stat.php?id=1000132025&web_id=1000132025\" language=\"JavaScript\"></script>\n</div>\n</body>\n</html>\n","mtime":1386297433000,"source":"about/index.html"},"hndwcfzsaur81k26":{"_id":"hndwcfzsaur81k26","content":"google-site-verification: googlea8a943a877806bc1.html","mtime":1386301225000,"source":"googlea8a943a877806bc1.html"},"h3f1etk8qguwao7l":{"_id":"h3f1etk8qguwao7l","content":"title: Java core 笔记：对象与类\ndate: 2013-12-06 13:28:51\ncategories: JAVA\ntags: [java,面向对象,OOP,对象,类]\n---\n#**1、OOP概述**\n\n面向对象程序是由对象组成的，每个对象包含对用户公开特定功能部分和隐藏的实现部分。\n<!-- more -->\n##**类**\n\n类(`calss`)是构造对象的模板或蓝图。由类构造（`construst`）对象的过程称为创建类的实例（`instance`）。\n\n封装（encapsulation），将数据和行为组合在一个包中，并对对象的使用者隐藏了数据的实现方式。对象中的数据称为实例域（instance fields），操作数据的过程为方法（method）。实现封装的关键在于绝对不能让类中的方法直接访问其他类的实例域。程序仅通过对象的方法与对象的数据进行交互。\n\n##**对象**\n\n三个主要特性\n\n- 对象的行为（`behavior`）--可以对对象施加哪些操作或方法\n- 对象的状态（`state`）   --当施加哪些方法时，对象如何响应\n- 对象标识（`identity`）  --如何辨别具有相同行为与状态的不同对象\n\n每个对象都保存着描述当前特征的信息，且都有一个唯一的身份，这就是对象的状态。对象状态必须通过调用方法实现。\n\n##**识别类**\n\n不同于传统的过程化程序设计，必须从顶部的main函数开始编写。对于OOP来说，我们首先要做的就是先设计类，然后在往每个类中添加方法。\n\n识别类简单规则：分析问题的过程中使用名词，方法对应使用动词。\n\n##**类之间关系**\n常见关系：\n\n- 依赖（uses-a）\n- 聚合（has-a）\n- 继承（is-a）\n\n#**2、使用现有的类**\n\n##**对象与对象变量**\n\n想要使用对象，首先必须构造对象，并指定其初始状态，然后对对象施加方法。在JAVA中，使用构造器（constructor）构造新实例。构造器是特殊的方法，用来构造并初始对象。\n\n\t在Java中，任何对象变量的值都是对存储在另外一个地方的一个对象的引用。\n\n#**3、用户自定义类**\n\n- 构造器与类同名\n- 每个类都可以有1个以上的构造器\n- 构造器可以有0个或N个参数\n- 构造器无返回值\n- 构造器总是伴随着new操作一起调用","mtime":1386310664000,"source":"_posts/java-core-笔记(1)-对象与类.md"},"46ejwkumqwddup2r":{"_id":"46ejwkumqwddup2r","content":"title: Java中instanceof用法\ndate: 2013-12-06 14:57:20\ncategories: JAVA\ntags: [java,instanceof]\n---\nJava 中的`instanceof` 运算符是用来在运行时指出对象是否是特定类的一个实例。instanceof通过返回一个布尔值来指出，这个对象是否是这个特定类或者是它的子类的一个实例。\n<!-- more -->\n**用法：**\n\n\tresult = object instanceof class\n\n**参数：**\n\n- Result：布尔类型。\n- Object：必选项。任意对象表达式。\n- Class：必选项。任意已定义的对象类。\n\n**说明：**\n如果 object 是 class 的一个实例，则 instanceof 运算符返回 true。如果 object 不是指定类的一个实例，或者 object 是 null，则返回 false。\n\n实例：\n{%codeblock lang:java%}\npublic interface IObject { \n} \n\npublic class Foo implements IObject{ \n} \n\npublic class Test extends Foo{ \n} \n\npublic class MultiStateTest { \n        public static void main(String args[]){ \n                test(); \n        } \n\n        public static void test(){ \n                IObject f=new Test(); \n                if(f instanceof java.lang.Object)System.out.println(\"true\"); \n                if(f instanceof Foo)System.out.println(\"true\"); \n                if(f instanceof Test)System.out.println(\"true\"); \n                if(f instanceof IObject)System.out.println(\"true\"); \n        } \n}\n{%endcodeblock%}\n\n结果：\n\n\ttrue \n\ttrue \n\ttrue \n\ttrue","mtime":1386313482000,"source":"_posts/java中instanceof用法.md"},"rrxi6zy4aqvtr5ms":{"_id":"rrxi6zy4aqvtr5ms","content":"title: 抽象类与接口区别\ndate: 2013-12-06 15:15:48\ncategories: JAVA\ntags: [JAVA,抽象类,接口]\n---\nabstract class和interface是Java语言中对抽象概念进行定义的2种机制，他们有什么区别呢？\n\n##**抽象类**\n我们都知道在面向对象的领域一切都是对象，同时所有的对象都是通过类来描述的，但是并不是所有的类都是来描述对象的。如果一个类没有足够的信息来描述一个具体的对象，而需要其他具体的类来支撑它，那么这样的类我们称它为`抽象类`。比如`new Animal()`，我们都知道这个是产生一个动物Animal对象，但是这个Animal具体长成什么样子我们并不知道，它没有一个具体动物的概念，所以他就是一个抽象类，需要一个具体的动物，如狗、猫来对它进行特定的描述，我们才知道它长成啥样。\n<!--more-->\n在面向对象领域由于抽象的概念在问题领域没有对应的具体概念，所以用以表征抽象概念的抽象类是不能实例化的。\n\n同时，抽象类体现了数据抽象的思想，是实现`多态`的一种机制。它定义了一组抽象的方法，至于这组抽象方法的具体表现形式有派生类来实现。同时抽象类提供了继承的概念，它的出发点就是为了继承，否则它没有存在的任何意义。所以说定义的抽象类一定是用来继承的，同时在一个以抽象类为节点的继承关系等级链中，叶子节点一定是具体的实现类。\n\n在使用抽象类时需要注意几点：\n\n1.抽象类不能被实例化，实例化的工作应该交由它的子类来完成，它只需要有一个引用即可。\n2.抽象方法必须由子类来进行重写。\n3.只要包含一个抽象方法的抽象类，该方法必须要定义成抽象类，不管是否还包含有其他方法。\n4.抽象类中可以包含具体的方法，当然也可以不包含抽象方法。\n5.子类中的抽象方法不能与父类的抽象方法同名。\n6.abstract不能与final并列修饰同一个类。\n7.abstract 不能与private、static、final或native并列修饰同一个方法。\n\n**代码：**\n{%codeblock lang:java%}\npublic abstract class Animal {\n    public abstract void cry();\n}\n\npublic class Cat extends Animal{\n\n    @Override\n    public void cry() {\n        System.out.println(\"猫叫：喵喵...\");\n    }\n}\n\npublic class Dog extends Animal{\n\n    @Override\n    public void cry() {\n        System.out.println(\"狗叫:汪汪...\");\n    }\n\n}\n\npublic class Test {\n\n    public static void main(String[] args) {\n        Animal a1 = new Cat();\n        Animal a2 = new Dog();\n        \n        a1.cry();\n        a2.cry();\n    }\n}\n\n{%endcodeblock%}\n\n**输出结果**\n\t--------------------------------------------------------------------\n\tOutput:\n\t猫叫：喵喵...\n\t狗叫:汪汪...\n\n##**接口**\n\n接口是一种比抽象类更加抽象的“类”。这里给“类”加引号是我找不到更好的词来表示，但是我们要明确一点就是，接口本身就不是类，从我们不能实例化一个接口就可以看出。如new Runnable();肯定是错误的，我们只能new它的实现类。\n\n接口是用来建立类与类之间的协议，它所提供的只是一种形式，而没有具体的实现。同时实现该接口的实现类必须要实现该接口的所有方法，通过使用implements关键字，他表示该类在遵循某个或某组特定的接口，同时也表示着“interface只是它的外貌，但是现在需要声明它是如何工作的”。\n\n接口是抽象类的延伸，java了保证数据安全是不能多重继承的，也就是说继承只能存在一个父类，但是接口不同，一个类可以同时实现多个接口，不管这些接口之间有没有关系，所以接口弥补了抽象类不能多重继承的缺陷，但是推荐继承和接口共同使用，因为这样既可以保证数据安全性又可以实现多重继承。\n\n在使用接口过程中需要注意如下几个问题：\n1.`Interface`的方所有法访问权限自动被声明为`public`。确切的说只能为public，当然你可以显示的声明为protected、private，但是编译会出错！\n2.接口中可以定义“成员变量”，或者说是不可变的常量，因为接口中的“成员变量”会自动变为为public static final。可以通过类命名直接访问：ImplementClass.name。\n3.接口中不存在实现的方法。\n4.实现接口的非抽象类必须要实现该接口的所有方法。抽象类可以不用实现。\n5.不能使用new操作符实例化一个接口，但可以声明一个接口变量，该变量必须引用（refer to)一个实现该接口的类的对象。可以使用 instanceof 检查一个对象是否实现了某个特定的接口。例如：if(anObject instanceof Comparable){}。\n6.在实现多接口的时候一定要避免方法名的重复。\n\n##**区别**\n\n###**语法层次**\n\n两者定义不同，通过代码说明。\n\n通过抽象类实现：\n{%codeblock lang:java%}\npublic abstract class Demo {\n    abstract void method1();  \n    void method2(){\n        //实现\n    }\n}\n{%endcodeblock%}\n\n通过接口实现：\n{%codeblock lang:java%}\ninterface Demo {\n    void method1();\n    void method2();\n}\n{%endcodeblock%}\n\n抽象类方式中，抽象类可以拥有任意范围的成员数据，同时也可以拥有自己的非抽象方法，但是接口方式中，它仅能够有静态、不能修改的成员数据（但是我们一般是不会在接口中使用成员数据），同时它所有的方法都必须是抽象的。在某种程度上来说，接口是抽象类的特殊化。\n\n对子类而言，它只能继承一个抽象类（这是java为了数据安全而考虑的），但是却可以实现多个接口。\n\n\n##**参考文献：**\n\n[http://blog.csdn.net/ttgjz/article/details/2960451](http://blog.csdn.net/ttgjz/article/details/2960451)\n","mtime":1386315525000,"source":"_posts/抽象类与接口区别.md"},"gazz8e84ilv9aewg":{"_id":"gazz8e84ilv9aewg","content":"title: 理解泛型\ndate: 2013-12-06 16:23:48\ncategories: JAVA\ntags: \n- java\n- 泛型\n---\n泛型可以解决数据类型的安全问题，其主要原理是在类声明时通过一个标识表示类中某个属性的类型或者某个方法的返回值以及参数类型。\n\n泛型类定义：\n\n\t[访问权限] class 类名称<泛型标识1，泛型标识2,....>{\n\t\t [访问权限] 泛型类型标识 变量名称;\n\t\t [访问权限] 泛型类型标识 方法名称(){};\n\t\t [访问权限] 返回值类型声明 方法名称(泛型类型标识 变量名称){};\n\t}\n<!--more-->\n泛型对象定义：\n\n\t类名称<具体类> 对象名称 = new 类名称<具体类>();\n\n加入泛型，在编译阶段就会检查是否出错，这样就避免了后面程序转换异常的发生。\n\n**泛型安全警告**\n在泛型应用中最好在声明类对象时指定好其内部的数据类型，如Info<String>,如果不指定类型，用户在使用时候会出现不安全的警告信息。\n\n**受限泛型**\n在引用传递中，在泛型操作中也可以设置一个泛型对象的范围上限（extends）和范围下限（super）。\n\n\n","mtime":1386320128000,"source":"_posts/理解泛型.md"},"8856vpl8rj06yqya":{"_id":"8856vpl8rj06yqya","content":"title: springside4学习笔记1-SpringSide4介绍及环境配置\ndate: 2013-12-07 08:44:34\ncategories: SpringSide4\ntags: [框架,spring,springside,江南白衣]\n---\n##*介绍*\n\n`SpringSide`是以`Spring Framework`为核心的，`Pragmatic`风格的`JavaEE`应用参考示例，是JavaEE世界中的主流技术选型，最佳实践的总结与演示。\n\n- Quickstart: 一个迷你的TodoList应用。\n- Showcase: 五花八门的JavaEE技术大派对。\n\n<!-- more -->\n\n官网：[http://www.springside.org.cn/](http://www.springside.org.cn/)\nGithub:[https://github.com/springside/springside4](https://github.com/springside/springside4)\n讨论区：[http://www.oschina.net/p/springside](http://www.oschina.net/p/springside)\n\n##**入门研究**\n\n###**系统环境**\n\n必须保证满足下列2个条件：\n\n1.Install JDK 6.0+ and set the JAVA_HOME.\n2.Install Maven 3.0.3+ and set the PATH. \n\n###**SpringSide4目录**\n1.`Modules` -- SpringSide封装的代码: \n\n  - `Parent`是公共的pom.xml文件；\n  - `Core`是一些使用率最高的核心代码；\n  - `Extension`是不一定会用上的扩展如Memcached/Redis Client封装；\n  - `Test` 则是测试用的封装；\n\n2.`Examples` -- QuickStart 与 Showcase 一小一大两个示例项目.\n3.`Support` -- 其他杂项内容, 如H2的Console启动命令, Maven的常用命令, 生成新项目的模板，Sonar的规则等等.\n\n###**实例运行**\n\n默认情况下，我们直接执行根目录下下的`quick-start.bat`就可以全自动的运行项目。\n\n下面我们使用手工的方式自己输入命令，然后导入项目到eclipse。\n\n1.将所有module编译打包安装到Maven的本地仓库：进入`E:\\git_2\\springside4\\modules`目录（以你自己的项目目录为准，这是我的路径）然后执行：\n\n\tmvn install\n\n![](/img/2013/12/springside4-module-mvn-install.jpg)\n\n\n2.将`quickstart`项目生成为普通elipse项目，这样就可以在eclipse中导入(import)了。进入`E:\\git_2\\springside4\\examples\\quickstart`,执行命令:\n\n\tmvn eclipse:eclipse\n\n注：其实可以忽略第2步的，我们在eclipse中直接导入maven项目即可，前提是你eclipse安装maven插件。\n\n![](/img/2013/12/springside4-example-import.jpg)\n\n3.配置数据库，默认使用的是H2 databse，我更改为mysql，方便研究调试，你可以按自己的需要来。\n\n修改pom.xml文件，注释掉h2的相关配置，更改为mysql。\n{%codeblock lang:xml%}\n<!--  <h2.version>1.3.174</h2.version>-->\n\n<!-- Plugin的属性定义 -->\n<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n<jdk.version>1.6</jdk.version>\n\n<!-- 项目属性 -->\n<!--\n<jdbc.driver.groupId>com.h2database</jdbc.driver.groupId>\n<jdbc.driver.artifactId>h2</jdbc.driver.artifactId>\n<jdbc.driver.version>${h2.version}</jdbc.driver.version>\n-->\t\n<jdbc.driver.groupId>mysql</jdbc.driver.groupId>\n<jdbc.driver.artifactId>mysql-connector-java</jdbc.driver.artifactId>\n<jdbc.driver.version>5.1.22</jdbc.driver.version>\n{%endcodeblock%}\n\n修改刷新开发环境\n\n{%codeblock lang:xml%}\n<sql driver=\"${jdbc.driver}\" url=\"${jdbc.url}\" userid=\"${jdbc.username}\" password=\"${jdbc.password}\" onerror=\"continue\" encoding=\"${project.build.sourceEncoding}\">\n\t<classpath refid=\"maven.test.classpath\" />\n\t<transaction src=\"src/main/resources/sql/mysql/schema.sql\"/>\n\t<transaction src=\"src/test/resources/data/h2/import-data.sql\"/>\n</sql>\n{%endcodeblock%}\n\n修改application.properties\n\n{%codeblock lang:xml%}\n#mysql database setting\njdbc.driver=com.mysql.jdbc.Driver\njdbc.url=jdbc:mysql://localhost/quickstart?useUnicode=true&characterEncoding=utf-8\njdbc.username=root\njdbc.password=123456\n{%endcodeblock%}\n\n创建数据表quickstart，运行refresh-db.bat刷新数据库。\n\n###**运行quickstart**\n\n使用内嵌的jetty server运行项目\n在eclipse中，右击quickstart中的pom.xml文件\n选择：Run Configuration\n\nBase diretory： 选择quickstart项目\nGoals: jetty:run\n\n点击run，运行该项目。\n\n或部署到tomcat上面。我是使用tomcat，部署成功如下图：\n![](/img/2013/12/springside4-quickstart-demo.jpg)\n\n登陆下例子看看如何：\n![](/img/2013/12/springside4-quickstart-demo2.jpg)\n\n","mtime":1386385788000,"source":"_posts/springside4学习笔记1.md"},"aafr5fmnrn1yxy3r":{"_id":"aafr5fmnrn1yxy3r","content":"title: springside4学习笔记1-SpringSide4介绍及环境配置\ndate: 2013-12-07 08:44:34\ncategories: SpringSide4\ntags: [框架,spring,springside,江南白衣]\n---\n##*介绍*\n\n`SpringSide`是以`Spring Framework`为核心的，`Pragmatic`风格的`JavaEE`应用参考示例，是JavaEE世界中的主流技术选型，最佳实践的总结与演示。\n\n- Quickstart: 一个迷你的TodoList应用。\n- Showcase: 五花八门的JavaEE技术大派对。\n\n<!-- more -->\n\n官网：[http://www.springside.org.cn/](http://www.springside.org.cn/)\nGithub:[https://github.com/springside/springside4](https://github.com/springside/springside4)\n讨论区：[http://www.oschina.net/p/springside](http://www.oschina.net/p/springside)\n\n##**入门研究**\n\n###**系统环境**\n\n必须保证满足下列2个条件：\n\n1.Install JDK 6.0+ and set the JAVA_HOME.\n2.Install Maven 3.0.3+ and set the PATH. \n\n###**SpringSide4目录**\n1.`Modules` -- SpringSide封装的代码: \n\n  - `Parent`是公共的pom.xml文件；\n  - `Core`是一些使用率最高的核心代码；\n  - `Extension`是不一定会用上的扩展如Memcached/Redis Client封装；\n  - `Test` 则是测试用的封装；\n\n2.`Examples` -- QuickStart 与 Showcase 一小一大两个示例项目.\n3.`Support` -- 其他杂项内容, 如H2的Console启动命令, Maven的常用命令, 生成新项目的模板，Sonar的规则等等.\n\n###**实例运行**\n\n默认情况下，我们直接执行根目录下下的`quick-start.bat`就可以全自动的运行项目。\n\n下面我们使用手工的方式自己输入命令，然后导入项目到eclipse。\n\n1.将所有module编译打包安装到Maven的本地仓库：进入`E:\\git_2\\springside4\\modules`目录（以你自己的项目目录为准，这是我的路径）然后执行：\n\n\tmvn install\n\n![](/img/2013/12/springside4-module-mvn-install.jpg)\n\n\n2.将`quickstart`项目生成为普通elipse项目，这样就可以在eclipse中导入(import)了。进入`E:\\git_2\\springside4\\examples\\quickstart`,执行命令:\n\n\tmvn eclipse:eclipse\n\n注：其实可以忽略第2步的，我们在eclipse中直接导入maven项目即可，前提是你eclipse安装maven插件。\n\n![](/img/2013/12/springside4-example-import.jpg)\n\n3.配置数据库，默认使用的是H2 databse，我更改为mysql，方便研究调试，你可以按自己的需要来。\n\n修改pom.xml文件，注释掉h2的相关配置，更改为mysql。\n{%codeblock lang:xml%}\n<!--  <h2.version>1.3.174</h2.version>-->\n\n<!-- Plugin的属性定义 -->\n<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n<jdk.version>1.6</jdk.version>\n\n<!-- 项目属性 -->\n<!--\n<jdbc.driver.groupId>com.h2database</jdbc.driver.groupId>\n<jdbc.driver.artifactId>h2</jdbc.driver.artifactId>\n<jdbc.driver.version>${h2.version}</jdbc.driver.version>\n-->\t\n<jdbc.driver.groupId>mysql</jdbc.driver.groupId>\n<jdbc.driver.artifactId>mysql-connector-java</jdbc.driver.artifactId>\n<jdbc.driver.version>5.1.22</jdbc.driver.version>\n{%endcodeblock%}\n\n修改刷新开发环境\n\n{%codeblock lang:xml%}\n<sql driver=\"${jdbc.driver}\" url=\"${jdbc.url}\" userid=\"${jdbc.username}\" password=\"${jdbc.password}\" onerror=\"continue\" encoding=\"${project.build.sourceEncoding}\">\n\t<classpath refid=\"maven.test.classpath\" />\n\t<transaction src=\"src/main/resources/sql/mysql/schema.sql\"/>\n\t<transaction src=\"src/test/resources/data/h2/import-data.sql\"/>\n</sql>\n{%endcodeblock%}\n\n修改application.properties\n\n{%codeblock lang:xml%}\n#mysql database setting\njdbc.driver=com.mysql.jdbc.Driver\njdbc.url=jdbc:mysql://localhost/quickstart?useUnicode=true&characterEncoding=utf-8\njdbc.username=root\njdbc.password=123456\n{%endcodeblock%}\n\n创建数据表quickstart，运行refresh-db.bat刷新数据库。\n\n###**运行quickstart**\n\n使用内嵌的jetty server运行项目\n在eclipse中，右击quickstart中的pom.xml文件\n选择：Run Configuration\n\nBase diretory： 选择quickstart项目\nGoals: jetty:run\n\n点击run，运行该项目。\n\n或部署到tomcat上面。我是使用tomcat，部署成功如下图：\n![](/img/2013/12/springside4-quickstart-demo.jpg)\n\n登陆下例子看看如何：\n![](/img/2013/12/springside4-quickstart-demo2.jpg)\n\n下面就可以开始根据例子对springside的核心代码研究。请看后续博文。\n","mtime":1386385863000,"source":"_posts/springside4学习笔记1-SpringSide4介绍及环境配置.md"},"6jjjfjbsiuo5o0ff":{"_id":"6jjjfjbsiuo5o0ff","content":"title: springside4学习笔记2-设计与技术选型\ndate: 2013-12-07 11:15:50\ncategories: [SpringSide4]\ntags: [技术选型,架构]\n---\n#**1. Web**\n\n- **MVC Framwork**： `SpringMVC3.0 Restful`的风格终于回归了MVC框架的简单本质，对比之下Struts2概念太复杂更新又太懒了。\n\n- **Template**：`JSP2.0`且尽量使用`JSP EL`而不是taglib，万一要写taglib也用纯JSP来编写，一向是SpringSide的推荐，Freemarker们始终有点小众, 而Thymeleaf与美工配合度非常高，可惜也是太少用户了。\n\n- **Layout Decoration**： Tiles的配置都太复杂了，`SiteMesh2`好些，但Sitemesh3烂尾了。\n\n- **Javascript Library**： 随大流用了`JQuery`。其实Dojo的面向对象语法更优美，但用户数和插件社区差了点。\n\n- **CSS Framework**： 最热火的`Twitter Bootstrap`，提供了简便的布局能力和基本的页面美化。\n\n- **JavaScript/CSS Compressor**: 还是随便选的`YUI Compressor`。\n\n- **Validation**: `JQuery Validation Plugin`这种客户端校验的客户体验更好，而Spring MVC集成`Hibernate Valiator`的服务端校验则可以避免恶意用户跳过页面直接发送请求，校验规则也更多，需要混合使用。\n<!--more-->\n#**2. WebService**\n\n- **SOAP WebService**： `JAX-WS2.0`的注解 + `Apache CXF` 无疑是最成熟的，一说起Axis1/2我都要打冷颤。\n\n- **Restful Service**： `JAX-RS 1.0 + Jersey/CXF`，够标准。但直接使用Spring MVC能使架构更简单。 如果追求极致的性能标，直接写Servlet也没啥。\n\n- **Restful Client**: 刚出来的`JAX-RS 2.0`标准，实际是用Jersey的client api做蓝本的， 而直接使用Spring的`RestTemplate`可以减少第三方包的引入。\n\n为了隔绝变化影响，隐藏细节，对外暴露的DTO和应用内部的领域对象是不同的类型，用Dozer进行复制。\n\n请求参数的校验，`JSR303 Bean Validator`的实现`Hibernate Validator`没太多的竞争对手。\n\n#**3. Database**\n\n- **数据库设计基本原则**:\n1.主键的列名统一为id。\n2.为方便数据操作及维护，不建立任何外键，用程序去保证关联关系。\n3.为表名添加前缀以便日后管理。比如有几十个表，将联系比较紧密的表，使用相同的前缀。\n4.表名全小写，因为MySQL在Linux下默认区分表名大小写。 \n\n- **ORM Framework**： 快速开发的应用里，领域对象肯定是用`JPA标注`的。至于API用`Hibernate`还是JPA，因为那个极简便的，DAO只要写接口就好了的`Spring-Data-JPA`，所以选了JPA。 当然，JPA的实现还是用Hibernate。\n\n追求高性能的应用，如各种Web服务，当然就是`MyBatis`了。如果项目再简单点，`Spring JDBC`其实也不错。\n\n- **传统数据库**: 无非还是`Oracle`与`MySQL`的选择，如果你恨MySQL还是Oracle家的东西，可以考虑越来越多人用的，语法和Oracle很像的`Postgresql`。\n\n- **NOSQL数据库**: 国内用的比较多的还是`Redis`和`MongoDB`.Redis更像一个数据结构服务器，暴露各种数据结构的专有API。而MongoDB将数据存成BSON格式，也提供类似SQL的查询语句，更像一个schema-less的数据库。\n\n- **数据库连接池**: `Apache DBCP`本来一统江湖，现在被人批评又慢又复杂，所以有了`Tomcat JDBC`，另外温少的`Druid也`是一个选择。\n\n- **Cache**：在JVM里的缓存，最老牌最多人用的依然是`Ehcache`，一些更强大的DataGrid方案如`HazelCast`，JBoss的Infinispan反而没什么人用。另外最简单的JVM内缓存是`Guava`的Cache。\n\n而中央式的缓存，`Memcached`已经成为了事实标准。而且当主创撒手不管后，社区现在反而有着稳定的更新。 Client方面，比较稳健选择的还是`Spymemcached`。\n\n#**3. Services**\n\n- **Security Framework**： 选择`Apache Shiro`是因为SpringSecurity的代码复杂度已经超过了它的实际需要，扩展困难痛苦。另一个原因是SpringSecurity的基本API居然只支持基于角色的判断，e.g. hasRole(\"Administrator\")，而Shiro同时还支持我们其实更常用的基于Permission的判断，e.g. hasPermission(\"User:Edit\")。\n\n- **JMS**： `ActiveMQ`是最多人选用的应用服务器无关的JMS实现，JBoss的HornetQ同样只是JBoss的用户在使用。Spring自带的`JMS`封装很好用。但还有更高级的如支持跨平台的`AMQP协议`的`RabbmitMQ`。\n\n- **Schedule**： 对于固定时间间隔的任务，JDK自带的`Executor`已足够好。Cron式定时执行，Spring的`Scheduler`也能满足。而且Spring的提供的纯XML配置也让Scheduler变得很简单，`Quartz`更大的优势体现在保证集群中有且仅有一台服务器执行任务。另外，SpringSide还演示了基于Redis做了一个适合海量的只需单次触发的任务。\n\n- **JMX**: Jolokia能将JMX中的MBean以`Restful+JSON`的方式暴露出来，使JMX这个古老的，在平台互通中显得有点封闭的协议重新焕发了青春。而Spring-Jmx将普通POJO注释一下就变成MBean也非常方便。\n\n#**4. Utilizes**\n\n- **General**： `Apache Commons Lang`说是伴着我们长大的也不为过，3.0版连package名也改了，全面支持泛型。 `Guava` 是Google新鲜推出的优雅产品。但说它会一桶天下又不定，因为它有时候太新潮了，反而用不惯。比如StringUtils我还是喜欢用Apache的，IO也同样是Apache Commons IO的好使。\n\n- **XML**： 用JDK自带的`JAXB`就算了，不折腾。\n\n- **JSON**： GSon虽然系出名门而且接口优雅，但`Jackson`的功能更加丰富到匪夷所思，而且比GSon快很多。\n\n- **Email**： Spring自带的`Email`封装挺好用的。\n\n- **Logging**: `Slf4j`作为入口，早就替代了`Apache Common Logging`了，下面的实现Log4j 1.x 被批判太多同步方法太慢，Log4j作者的后作Logback就好很多了，但社区似乎不甘心log在一家QOS公司手里，又在推动log4j2.0的发展，目前还是beta版。\n\n最后，`Freemarker`虽然不用来做页面Template，平时用来生成点东西也不错的。 JodaTime这种要直接加入JDK的就不多说它了。HttpClient用Apache HttpClient还是用JDK自带的要看情况，简单的用JDK，需要keep alive什么的用Apache。\n\n#**5. Test**\n\n- **Unit Test**： `JUnit`始终是正统，TestNG的功能如测试用例分组它也慢慢支持了。\n\n- **Mock**： `Mockito`的API比老牌的EasyMock更为优雅，而PowerMock则能配合Mockito完成static方法，函数内部new 出来的对象这些Mockito做不了的mock。\n\n- **Functional Test**：Selenium与WebDriver的合并后，最大改进是原来基于javascript的方案， 变成了直接调用浏览器的核心API，性能好了。\n\n#**6. Development Environment**\n\n`JDK6`这样没什么兼容性问题又成熟得一塌糊涂的版本建议大家都升级吧。`JDK7`也不错，有G1垃圾收集器和Try-Catch新语法的语法糖。\n\n用Jetty7是因为它的嵌入式版本做得好，集成测试不用部署直接就开跑了。开发时一般也不用Eclipse插件，直接自己在代码里启动了，省下打包拷贝War文件的时间。\n\n用`H2 Database`，既是嵌入式的，又可以持久化到文件用Web Console查看，性能还是嵌入式中最好的。\n\n用`Maven`，在项目构建脚本不复杂的时候的首选，否则就只能ant+ivy了，或者像hibernate和spring一样，用gradle.\n\n另外，用`Log4jdbc`在开发时查看实际执行的SQL。\n\n最后，用`Jenkins`做持续集成, `Sonar`做代码质量检查，是大部分好项目的共同爱好。\n\n\n本文转载于：[https://github.com/springside/springside4/wiki/Design](https://github.com/springside/springside4/wiki/Design)","mtime":1386387289000,"source":"_posts/springside4学习笔记2-设计与技术选型.md"},"xy0p78vw0pjl7csi":{"_id":"xy0p78vw0pjl7csi","content":"title: JSR 303 - Bean Validation 介绍\ndate: 2013-12-07 11:54:28\ncategories: Java进阶\ntags: [JSR 303,Bean Validation]\n---\n##**简介**\n\n`JSR 303 – Bean Validation` 是一个数据验证的规范，2009 年 11 月确定最终方案。2009 年 12 月 Java EE 6 发布，Bean Validation 作为一个重要特性被包含其中。本文将对 `Bean Validation` 的主要功能进行介绍，并通过一些示例来演示如何在 Java 开发过程正确的使用 Bean Validation。\n<!-- more -->\n##**关于 Bean Validation**\n\n在任何时候，当你要处理一个应用程序的业务逻辑，数据校验是你必须要考虑和面对的事情。应用程序必须通过某种手段来确保输入进来的数据从语义上来讲是正确的。在通常的情况下，应用程序是分层的，不同的层由不同的开发人员来完成。很多时候同样的数据验证逻辑会出现在不同的层，这样就会导致代码冗余和一些管理的问题，比如说语义的一致性等。为了避免这样的情况发生，最好是将验证逻辑与相应的域模型进行绑定。\n\nBean Validation 为 JavaBean 验证定义了相应的元数据模型和 API。缺省的元数据是 `Java Annotations`，通过使用 XML 可以对原有的元数据信息进行覆盖和扩展。在应用程序中，通过使用 Bean Validation 或是你自己定义的 `constraint`，例如 `@NotNull`, `@Max`, `@ZipCode`， 就可以确保数据模型（JavaBean）的正确性。constraint 可以附加到字段，getter 方法，类或者接口上面。对于一些特定的需求，用户可以很容易的开发定制化的 constraint。Bean Validation 是一个运行时的数据验证框架，在验证之后验证的错误信息会被马上返回。\n\n`JSR 303 – Bean Validation` 规范 [http://jcp.org/en/jsr/detail?id=303](http://jcp.org/en/jsr/detail?id=303)\n\n`Hibernate Validator` 是 Bean Validation 的参考实现 . Hibernate Validator 提供了 JSR 303 规范中所有内置`constraint` 的实现，除此之外还有一些附加的 constraint。如果想了解更多有关 Hibernate Validator 的信息，请查看 [http://hibernate.org/validator/](http://hibernate.org/validator/)\n\n##**Bean Validation 中的 constraint**\n\n表 1. Bean Validation 中内置的 constraint\n<table><tr><td>Constraint</td><td>详细信息</td></tr><tr><td>@Null</td><td> 被注释的元素必须为 null</td></tr><tr><td>@NotNull</td><td> 被注释的元素必须不为 null</td></tr><tr><td>@AssertTrue</td><td> 被注释的元素必须为 true</td></tr><tr><td>@AssertFalse</td><td> 被注释的元素必须为 false</td></tr><tr><td>@Min(value)</td><td> 被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td>@Max(value)</td><td> 被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td>@DecimalMin(value)</td><td> 被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td>@DecimalMax(value)</td><td> 被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td>@Size(max, min)</td><td> 被注释的元素的大小必须在指定的范围内</td></tr><tr><td>@Digits (integer, fraction)</td><td> 被注释的元素必须是一个数字，其值必须在可接受的范围内</td></tr><tr><td>@Past</td><td> 被注释的元素必须是一个过去的日期</td></tr><tr><td>@Future</td><td> 被注释的元素必须是一个将来的日期</td></tr><tr><td>@Pattern(value)</td><td> 被注释的元素必须符合指定的正则表达式</td></tr></table>\n\n表 2. Hibernate Validator 附加的 constraint\n<table><tr><td>Constraint</td><td>详细信息</td></tr><tr><td>@Email</td> <td> 被注释的元素必须是电子邮箱地址</td> </tr> <tr> <td>@Length</td> <td> 被注释的字符串的大小必须在指定的范围内</td> </tr> <tr> <td>@NotEmpty</td> <td> 被注释的字符串的必须非空</td> </tr> <tr> <td>@Range</td> <td> 被注释的元素必须在合适的范围内</td> </tr> </table>\n\n一个 constraint 通常由 annotation 和相应的 constraint validator 组成，它们是一对多的关系。也就是说可以有多个 constraint validator 对应一个 annotation。在运行时，Bean Validation 框架本身会根据被注释元素的类型来选择合适的 constraint validator 对数据进行验证。\n\n有些时候，在用户的应用中需要一些更复杂的 constraint。Bean Validation 提供扩展 constraint 的机制。可以通过两种方法去实现，一种是组合现有的 constraint 来生成一个更复杂的 constraint，另外一种是开发一个全新的 constraint。\n\nBean Validation2个规范。\n\n- Bean Validation 1.0（[JSR-303](http://jcp.org/en/jsr/detail?id=303)）\n\n定义了基于注解方式的JavaBean验证元数据模型和API，也可以通过XML进行元数据定义，但注解将覆盖XML的元数据定义。\nJSR-303主要是对JavaBean进行验证，如方法级别（方法参数/返回值）、依赖注入等的验证是没有指定的。因此又有了JSR-349规范的产生。\n\n- Bean Validation 1.1（[JSR-349](http://jcp.org/en/jsr/detail?id=349)）\nBean Validation 标准化了Java平台的约束定义、描述、和验证。\nSpring3.1目前已经完全支持依赖注入验证和方法级别验证的支持\n\n\nBean Validation在开发中的位置\n\n1.**表现层验证**：SpringMVC提供对JSR-303的表现层验证；\n2.**业务逻辑层验证**：Spring3.1提供对业务逻辑层的方法验证（当然方法验证可以出现在其他层，但笔者觉得方法验证应该验证业务逻辑）；\n3.**DAO层验证**：Hibernate提供DAO层的模型数据的验证（可参考hibernate validator参考文档的7.3. ORM集成）。\n4.**数据库端的验证**：通过数据库约束来进行；\n5.**客户端验证支持**：JSR-303也提供编程式验证支持。\n\n\n##**Hibernate Validation**\n\n具体使用参考文档\n\n各版本文档下载：[http://docs.jboss.org/hibernate/validator/](http://docs.jboss.org/hibernate/validator/)\n\n\n##**参考文献**\n1.[JSR 303 - Bean Validation 介绍及最佳实践](http://www.ibm.com/developerworks/cn/java/j-lo-jsr303/)\n2.[Spring3.1 对Bean Validation规范的新支持(方法级别验证)](http://jinnianshilongnian.iteye.com/blog/1495594)","mtime":1386397531000,"source":"_posts/jsr-303-bean-validation-介绍及最佳实践.md"},"4h0xuklkah520kvv":{"_id":"4h0xuklkah520kvv","content":"title: JSR 303 - Bean Validation 介绍\ndate: 2013-12-07 11:54:28\ncategories: Java进阶\ntags: [JSR 303,Bean Validation]\n---\n##**简介**\n\n`JSR 303 – Bean Validation` 是一个数据验证的规范，2009 年 11 月确定最终方案。2009 年 12 月 Java EE 6 发布，Bean Validation 作为一个重要特性被包含其中。本文将对 `Bean Validation` 的主要功能进行介绍，并通过一些示例来演示如何在 Java 开发过程正确的使用 Bean Validation。\n<!-- more -->\n##**关于 Bean Validation**\n\n在任何时候，当你要处理一个应用程序的业务逻辑，数据校验是你必须要考虑和面对的事情。应用程序必须通过某种手段来确保输入进来的数据从语义上来讲是正确的。在通常的情况下，应用程序是分层的，不同的层由不同的开发人员来完成。很多时候同样的数据验证逻辑会出现在不同的层，这样就会导致代码冗余和一些管理的问题，比如说语义的一致性等。为了避免这样的情况发生，最好是将验证逻辑与相应的域模型进行绑定。\n\nBean Validation 为 JavaBean 验证定义了相应的元数据模型和 API。缺省的元数据是 `Java Annotations`，通过使用 XML 可以对原有的元数据信息进行覆盖和扩展。在应用程序中，通过使用 Bean Validation 或是你自己定义的 `constraint`，例如 `@NotNull`, `@Max`, `@ZipCode`， 就可以确保数据模型（JavaBean）的正确性。constraint 可以附加到字段，getter 方法，类或者接口上面。对于一些特定的需求，用户可以很容易的开发定制化的 constraint。Bean Validation 是一个运行时的数据验证框架，在验证之后验证的错误信息会被马上返回。\n\n`JSR 303 – Bean Validation` 规范 [http://jcp.org/en/jsr/detail?id=303](http://jcp.org/en/jsr/detail?id=303)\n\n`Hibernate Validator` 是 Bean Validation 的参考实现 . Hibernate Validator 提供了 JSR 303 规范中所有内置`constraint` 的实现，除此之外还有一些附加的 constraint。如果想了解更多有关 Hibernate Validator 的信息，请查看 [http://hibernate.org/validator/](http://hibernate.org/validator/)\n\n##**Bean Validation 中的 constraint**\n\n表 1. Bean Validation 中内置的 constraint\n<table><tr><td>Constraint</td><td>详细信息</td></tr><tr><td>@Null</td><td> 被注释的元素必须为 null</td></tr><tr><td>@NotNull</td><td> 被注释的元素必须不为 null</td></tr><tr><td>@AssertTrue</td><td> 被注释的元素必须为 true</td></tr><tr><td>@AssertFalse</td><td> 被注释的元素必须为 false</td></tr><tr><td>@Min(value)</td><td> 被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td>@Max(value)</td><td> 被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td>@DecimalMin(value)</td><td> 被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td>@DecimalMax(value)</td><td> 被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td>@Size(max, min)</td><td> 被注释的元素的大小必须在指定的范围内</td></tr><tr><td>@Digits (integer, fraction)</td><td> 被注释的元素必须是一个数字，其值必须在可接受的范围内</td></tr><tr><td>@Past</td><td> 被注释的元素必须是一个过去的日期</td></tr><tr><td>@Future</td><td> 被注释的元素必须是一个将来的日期</td></tr><tr><td>@Pattern(value)</td><td> 被注释的元素必须符合指定的正则表达式</td></tr></table>\n\n表 2. Hibernate Validator 附加的 constraint\n<table><tr><td>Constraint</td><td>详细信息</td></tr><tr><td>@Email</td> <td> 被注释的元素必须是电子邮箱地址</td> </tr> <tr> <td>@Length</td> <td> 被注释的字符串的大小必须在指定的范围内</td> </tr> <tr> <td>@NotEmpty</td> <td> 被注释的字符串的必须非空</td> </tr> <tr> <td>@Range</td> <td> 被注释的元素必须在合适的范围内</td> </tr> </table>\n\n一个 constraint 通常由 annotation 和相应的 constraint validator 组成，它们是一对多的关系。也就是说可以有多个 constraint validator 对应一个 annotation。在运行时，Bean Validation 框架本身会根据被注释元素的类型来选择合适的 constraint validator 对数据进行验证。\n\n有些时候，在用户的应用中需要一些更复杂的 constraint。Bean Validation 提供扩展 constraint 的机制。可以通过两种方法去实现，一种是组合现有的 constraint 来生成一个更复杂的 constraint，另外一种是开发一个全新的 constraint。\n\nBean Validation2个规范。\n\n- Bean Validation 1.0（[JSR-303](http://jcp.org/en/jsr/detail?id=303)）\n\n定义了基于注解方式的JavaBean验证元数据模型和API，也可以通过XML进行元数据定义，但注解将覆盖XML的元数据定义。\nJSR-303主要是对JavaBean进行验证，如方法级别（方法参数/返回值）、依赖注入等的验证是没有指定的。因此又有了JSR-349规范的产生。\n\n- Bean Validation 1.1（[JSR-349](http://jcp.org/en/jsr/detail?id=349)）\nBean Validation 标准化了Java平台的约束定义、描述、和验证。\nSpring3.1目前已经完全支持依赖注入验证和方法级别验证的支持\n\n\nBean Validation在开发中的位置\n\n1.**表现层验证**：SpringMVC提供对JSR-303的表现层验证；\n2.**业务逻辑层验证**：Spring3.1提供对业务逻辑层的方法验证（当然方法验证可以出现在其他层，但笔者觉得方法验证应该验证业务逻辑）；\n3.**DAO层验证**：Hibernate提供DAO层的模型数据的验证（可参考hibernate validator参考文档的7.3. ORM集成）。\n4.**数据库端的验证**：通过数据库约束来进行；\n5.**客户端验证支持**：JSR-303也提供编程式验证支持。\n\n\n##**Hibernate Validation**\n\n具体使用参考文档\n\n各版本文档下载：[http://docs.jboss.org/hibernate/validator/](http://docs.jboss.org/hibernate/validator/)\n\n\n##**参考文献**\n1.[JSR 303 - Bean Validation 介绍及最佳实践](http://www.ibm.com/developerworks/cn/java/j-lo-jsr303/)\n2.[Spring3.1 对Bean Validation规范的新支持(方法级别验证)](http://jinnianshilongnian.iteye.com/blog/1495594)","mtime":1386397531000,"source":"_posts/jsr-303-bean-validation-介绍.md"},"c464gw4cwo9xnjy0":{"_id":"c464gw4cwo9xnjy0","content":"title: Dozer总结\ndate: 2013-12-07 14:38:21\ncategories: [Java进阶]\ntags: [java,Dozer]\n---\n##**介绍**\nDozer 是一个对象转换工具。 \n\n`Dozer`可以在JavaBean到JavaBean之间进行递归数据复制,并且这些JavaBean可以是不同的复杂的类型。 \n所有的mapping，Dozer将会很直接的将名称相同的fields进行复制，如果field名不同，或者有特别的对应要求，则可以在xml中进行定义。<!-- more -->\n\n官网：[http://dozer.sourceforge.net/documentation/about.html](http://dozer.sourceforge.net/documentation/about.html)\nGithub:[https://github.com/DozerMapper/dozer](https://github.com/DozerMapper/dozer)\n\n##**为什么使用Dozer**\n分析多层架构的J2EE系统，经常存在JavaBean直接的拷贝。比如我们在DAO层，通过Do取得业务层需要的数据，将这些数据传递给 Service层的VO。Do与VO就存在典型的值拷贝。 \n\n典型的解决方案就是手动拷贝，弊端很明显，代码中充斥大量Set 和Get方法，真正的业务被埋藏值与值的拷贝之中。另一种方案就是使用BeanUtil，但BeanUtil不够很好的灵活性，又时候还不得不手动拷贝。Dozer可以灵活的对对象进行转换，且使用简单。 \n\n##**Dozer 支持的转换类型**\n\nPrimitive 基本数据类型 , 后面带 Wrapper 是包装类 Complex Type 是复杂类型 \n\n•\tPrimitive to Primitive Wrapper \n•\tPrimitive to Custom Wrapper \n•\tPrimitive Wrapper to Primitive Wrapper \n•\tPrimitive to Primitive \n•\tComplex Type to Complex Type \n•\tString to Primitive \n•\tString to Primitive Wrapper \n•\tString to Complex Type if the Complex Type contains a String constructor \n•\tString 到复杂类型 , 如果复杂类型包含一个 String 类型的构造器 \n•\tString to Map \n•\tCollection to Collection \n•\tCollection to Array \n•\tMap to Complex Type \n•\tMap to Custom Map Type \n•\tEnum to Enum \n•\tEach of these can be mapped to one another: java.util.Date, java.sql.Date, java.sql.Time, java.sql.Timestamp, java.util.Calendar, java.util.GregorianCalendar \n•\tString to any of the supported Date/Calendar Objects. \n•\tObjects containing a toString() method that produces a long representing time in (ms) to any supported Date/Calendar object. \n\n##**dozer使用分类**\n\n根据有无映射文件和文件的多少，有三种方式： \n第一种：该方式用于数据类型为基本类型，名称相同的对象映射 \n\nJava代码  \n{%codeblock lang:java%}\nMapper mapper = new DozerBeanMapper();  \nSourceObject sourceObject = new SourceObject();  \nDestinationObject destObject = (DestinationObject) mapper.map(sourceObject, DestinationObject.class);  \n    //  or  \nDestinationObject destObject = new DestinationObject();  \nmapper.map(sourceObject, destObject);  \n{%endcodeblock%}\n\n第二种：该方式用于数据类型不一致，或者名称不相同或者有级联关系等情况下的映射，该方式可以添加多个配置文件dozerBeanMapping.xml、someOtherDozerBeanMappings.xml 等 \n\nJava代码  \n{%codeblock lang:java%}\nList myMappingFiles = new ArrayList();  \nmyMappingFiles.add(\"dozerBeanMapping.xml\");  \n//myMappingFiles.add(\"someOtherDozerBeanMappings.xml\");  \nDozerBeanMapper mapper = new DozerBeanMapper();  \nSourceObject sourceObject = new SourceObject();  \nmapper.setMappingFiles(myMappingFiles);  \nDestinationObject stObject=  \n(DestinationObject) mapper.map(sourceObject, DestinationObject.class);  \n{%endcodeblock%}\n\n第三种：该方式用于数据类型不一致，或者名称不相同或者有级联关系等情况下的映射，配置文件只有一个映射文件叫dozerBeanMapping.xml且在根目录下 \n\nJava代码  \n{%codeblock lang:java%}\nMapper mapper = DozerBeanMapperSingletonWrapper.getInstance();  \nSourceObject sourceObject = new SourceObject();  \nDestinationObject destObject = (DestinationObject) mapper.map(sourceObject, DestinationObject.class);  \n//or  \n//Mapper mapper = DozerBeanMapperSingletonWrapper.getInstance();  \n//DestinationObject destObject = new DestinationObject();  \nmapper.map(sourceObject, destObject);  \n{%endcodeblock%}\n\n##**参考文献**\n1.[Dozer 使用总结，也许对你有帮助](http://seyaa.iteye.com/blog/762494)\n","mtime":1386399854000,"source":"_posts/dozer总结.md"},"hqsh9xz34vpfmnwr":{"_id":"hqsh9xz34vpfmnwr","content":"title: PO、DO、VO的区别\ndate: 2013-12-07 15:06:23\ncategories: Java进阶\ntags: [java,PO,DO,VO]\n---\n`Rational Mapping`（对象关系映射）的缩写。通俗点讲，就是将对象与关系数据库绑定，用对象来表示关系数据。在`O/R Mapping`的世界里，有两个基本的也是重要的东东需要了解，即`VO`，`PO`。\n\nVO，值对象(`Value Object`)，PO，持久对象(`Persisent Object`)，它们是由一组属性和属性的get和set方法组成。从结构上看，它们并没有什么不同的地方。但从其意义和本质上来看是完全不同的。\n\n<!--more-->\n1．VO是用new关键字创建，由GC回收的。 \n\nPO则是向数据库中添加新数据时创建，删除数据库中数据时削除的。并且它只能存活在一个数据库连接中，断开连接即被销毁。 \n \n2．VO是值对象，精确点讲它是业务对象，是存活在业务层的，是业务逻辑使用的，它存活的目的就是为数据提供一个生存的地方。 \nPO则是有状态的，每个属性代表其当前的状态。它是物理数据的对象表示。使用它，可以使我们的程序与物理数据解耦，并且可以简化对象数据与物理数据之间的转换。\n \n3．VO的属性是根据当前业务的不同而不同的，也就是说，它的每一个属性都一一对应当前业务逻辑所需要的数据的名称。 \nPO的属性是跟数据库表的字段一一对应的。PO对象需要实现序列化接口。\n\n==================================================================================\nTO(Transfer Object)，数据传输对象\n在应用程序不同tie(关系)之间传输的对象 \n \nBO(business object) 业务对象 \n从业务模型的角度看,见UML元件领域模型中的领域对象。封装业务逻辑的java对象,通过调用DAO方法,结合PO,VO进行业务操作。 \n \nPOJO(plain ordinary java object) 简单无规则java对象\n纯的传统意义的java对象。就是说在一些Object/Relation Mapping工具中，能够做到维护数据库表记录的persisent object完全是一个符合Java Bean规范的纯Java对象，没有增加别的属性和方法。我的理解就是最基本的Java Bean，只有属性字段及setter和getter方法！。 \n \nDAO(data access object) 数据访问对象 \n是一个sun的一个标准j2ee设计模式，这个模式中有个接口就是DAO，它负持久层的操作。为业务层提供接口。此对象用于访问数据库。通常和PO结合使用，DAO中包含了各种数据库的操作方法。通过它的方法,结合PO对数据库进行相关的操作。夹在业务逻辑与数据库资源中间。配合VO, 提供数据库的CRUD操作... ","mtime":1386400306000,"source":"_posts/po、do、vo的区别.md"},"ze72to6sl4b2l6t9":{"_id":"ze72to6sl4b2l6t9","content":"title: SpringSide4学习笔记3-QuickStart分析(1)\ndate: 2013-12-07 15:23:16\ncategories: SpringSide4\ntags: [springside4,quickstart,源码研究]\n---\n##**项目结构**\n\n  QuickStart项目给予Maven构建的，对于Maven不熟悉的朋友请自行google哈。\n\n##**项目选型**\n\n- Spring Framework 3.2.3\n- Hibernate 4.2.3\n- Spring data jpa 1.3.2\n- sitemesh 2.4.2\n- shiro 1.2.2\n- hibernate validator 4.3.1\n\n<!-- more -->\n\n##**配置文件分析**\n\n1.pom.xml文件\n\n首先是定义依赖库的版本，独立出来方便管理。\n\n{%codeblock lang:xml%}\n<properties>\n\t<springside.version>4.1.0.GA</springside.version>\n\t<spring.version>3.2.3.RELEASE</spring.version>\n</properties>\t\t\n{%endcodeblock%}\n\n依赖项定义\n\n{%codeblock lang:xml%}\n<dependencies>\n\t<!-- SPRINGSIDE -->\n\t<dependency>\n\t\t<groupId>org.springside</groupId>\n\t\t<artifactId>springside-core</artifactId>\n\t\t<version>${springside.version}</version>\n\t</dependency>\n<dependencies>\t\n{%endcodeblock%}\n\n其他详情请看项目具体配置。\n\n2.web.xml分析\n\n在web.xml中通过`contextConfigLocation`配置spring，contextConfigLocation参数定义了要装入的 Spring 配置文件。\n\n如果想装入多个配置文件，可以在`<param-value>`标记中用逗号作分隔符\n\n{%codeblock lang:xml%}\n<context-param>\n\t<param-name>contextConfigLocation</param-name>\n\t<param-value>\n\t\tclasspath*:/applicationContext.xml,\n\t\tclasspath*:/applicationContext-shiro.xml\n\t</param-value>\n</context-param>\n{%endcodeblock%}\n\n> Spring 3.1的功能，以后就不用为了区分Test, Dev,Production环境，搞几个只有细微区别的application.xml, application-test.xml及引用它们的web.xml了。\n\n首先，将`applicationContext.xml`中的namespace从`3.0`升级到`3.1`.xsd，然后就可以在文件末尾加入不同环境的定义，比如不同的`dataSource`\n{%codeblock lang:xml%}\n<beans profile=\"test\">\n\t<jdbc:embedded-database id=\"dataSource\">\n\t\t<jdbc:script location=\"classpath:com/bank/config/sql/schema.sql\"/>\n\t</jdbc:embedded-database>\n</beans>\n \n<beans profile=\"production\">\n\t<jee:jndi-lookup id=\"dataSource\" jndi-name=\"java:comp/env/jdbc/datasource\"/>\n</beans>\n{%endcodeblock%}\n在web.xml里，你需要定义使用的profile，最聪明的做法是定义成`context-param`，注意这里定义的是default值，在非生产环境，可以用系统变量\"`spring.profiles.active`\"进行覆盖。\n\n{%codeblock lang:xml%}\n<context-param>\n\t<param-name>spring.profiles.default</param-name>\n\t<param-value>production</param-value>\n</context-param>\n{%endcodeblock%}\n\n如果您想要在自己所定义的Servlet类别中使用Spring的容器功能，则也可以使用 `org.springframework.web.context.ContextLoaderListener`。ContextLoaderListener预设会读取applicationContext.xml。\n\n{%codeblock lang:xml%}\n<listener>\n\t<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n</listener>\n{%endcodeblock%}\n\n加入encodingFilter解决中文乱码问题。`<filter-mapping>`紧紧的放在`<filter>`的后面该配置顺序不可调换，切记，不然无效哦。\n\n{%codeblock lang:xml%}\n<filter>\n\t<filter-name>encodingFilter</filter-name>\n\t<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\n\t<init-param>\n\t\t<param-name>encoding</param-name>\n\t\t<param-value>UTF-8</param-value>\n\t</init-param>\n\t<init-param>\n\t\t<param-name>forceEncoding</param-name>\n\t\t<param-value>true</param-value>\n\t</init-param>\n</filter>\n<filter-mapping>\n\t<filter-name>encodingFilter</filter-name>\n\t<url-pattern>/*</url-pattern>\n</filter-mapping>\n{%endcodeblock%}\n\n在Java Web项目中使用`Hibernate`经常会遇到`LazyInitializationException`。这是因为controller和model层（java代码）将通过JPA的一些启用了延迟加载功能 的领域（如用`getRefrence()` 方法或者在关联关系中采用`fetch=FetchType.LAZY` ）返回给view层（jsp代码）的时候，由于加载领域对象的`JPA Session`已经关闭，导致这些延迟加载的数据访问异常。\n\n这时就可以使用OpenEntityManagerInViewFilter来将一个JPAsession与一次完整的请求过程对应的线程相绑定。\n\n{%codeblock lang:xml%}\n<filter>\n\t<filter-name>openEntityManagerInViewFilter</filter-name>\n\t<filter-class>org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter</filter-class>\n</filter>\n<filter-mapping>\n\t<filter-name>openEntityManagerInViewFilter</filter-name>\n\t<url-pattern>/*</url-pattern>\n</filter-mapping>\n{%endcodeblock%}\n\n配置Shiro过滤器,先让Shiro过滤系统接收到的请求。这里`filter-name`必须对应`applicationContext.xml`中定义的`<bean id=\"shiroFilter\"/>`。使用`[/*]`匹配所有请求,保证所有的可控请求都经过Shiro的过滤。\n通常会将此`filter-mapping`放置到最前面(即其他filter-mapping前面),以保证它是过滤器链中第一个起作用的\n\n{%codeblock lang:xml%}\n<filter>\n\t<filter-name>shiroFilter</filter-name>\n\t<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\n\t<init-param>\n\t <!-- 该值缺省为false,表示生命周期由SpringApplicationContext管理,\n\t      设置为true则表示由ServletContainer管理 -->  \n\t\t<param-name>targetFilterLifecycle</param-name>\n\t\t<param-value>true</param-value>\n\t</init-param>\n</filter>\n<filter-mapping>\n\t<filter-name>shiroFilter</filter-name>\n\t<url-pattern>/*</url-pattern>\n</filter-mapping>\n{%endcodeblock%}\n\n配置SiteMeshFilter，否则SiteMesh不起作用哦，什么是SiteMesh，请自行google。\n\n{%codeblock lang:xml%}\n<filter>\n\t<filter-name>sitemeshFilter</filter-name>\n\t<filter-class>com.opensymphony.sitemesh.webapp.SiteMeshFilter</filter-class>\n</filter>\n<filter-mapping>\n\t<filter-name>sitemeshFilter</filter-name>\n\t<url-pattern>/*</url-pattern>\n</filter-mapping>\n{%endcodeblock%}\n\n`DispatcherServlet`是前端控制器设计模式的实现，提供Spring Web MVC的集中访问点，而且负责职责的分派，而且与Spring IoC容器无缝集成。\n\n{%codeblock lang:xml%}\n<servlet>\n\t<servlet-name>springServlet</servlet-name>\n\t<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n\t<!--加载spring-mvc.xml进行初始化-->\n\t<init-param>\n\t\t<param-name>contextConfigLocation</param-name>\n\t\t<param-value>/WEB-INF/spring-mvc.xml</param-value>\n\t</init-param>\n\t <!--启动时初始化servlet-->\n\t<load-on-startup>1</load-on-startup>\n</servlet>\n<servlet-mapping>\n\t<servlet-name>springServlet</servlet-name>\n\t<!--拦截所有的请求-->\n\t<url-pattern>/</url-pattern>\n</servlet-mapping>\n{%endcodeblock%}\n\n设置session会话时间\n\n{%codeblock lang:xml%}\n<session-config>\n\t<session-timeout>20</session-timeout>\n</session-config>\n{%endcodeblock%}\n\n配置系统错误页面\n\n{%codeblock lang:xml%}\n<error-page>\n\t<exception-type>java.lang.Throwable</exception-type>\n\t<location>/WEB-INF/views/error/500.jsp</location>\n</error-page>\n<error-page>\n\t<error-code>500</error-code>\n\t<location>/WEB-INF/views/error/500.jsp</location>\n</error-page>\n<error-page>\n\t<error-code>404</error-code>\n\t<location>/WEB-INF/views/error/404.jsp</location>\n</error-page>\n{%endcodeblock%}\n\n\n##**参考文献**\n1.[用Profile 统一环境配置](https://github.com/springside/springside4/wiki/Spring)\n2.[org.springframework.web.context.ContextLoaderListener作用](http://blog.csdn.net/taijianyu/article/details/3176263)\n3.[Spring的OpenEntityManagerInViewFilter](http://whoosh.iteye.com/blog/1300721)\n4.[SpringMVC整合Shiro](http://blog.csdn.net/jadyer/article/details/12208847)\n5.[DispatcherServlet详解](http://jinnianshilongnian.iteye.com/blog/1602617)\n","mtime":1386405480000,"source":"_posts/springside4学习笔记3-quickstart分析(1).md"},"l3xmnqe5ke7ihmqi":{"_id":"l3xmnqe5ke7ihmqi","content":"title: SpringSide4笔记3-QuickStart分析(2)\ndate: 2013-12-07 16:32:49\ncategories:\ntags:\n---","mtime":1386405169000,"source":"_posts/springside4笔记3-quickstart分析(2).md"},"sovbzs41tjm0f3it":{"_id":"sovbzs41tjm0f3it","content":"title: SpringSide4笔记3-QuickStart分析(2)\ndate: 2013-12-07 16:32:49\ncategories:\ntags:\n---","mtime":1386405169000,"source":"_posts/springside4学习笔记-quickstart分析(2).md"},"8fnlwi0yiictafgo":{"_id":"8fnlwi0yiictafgo","content":"title: SpringSide4学习笔记4-QuickStart分析(2)\ndate: 2013-12-07 16:32:49\ncategories: SpringSide4\ntags: [springside4,quickstart,源码研究]\n---\n接[上一节](http://zhujunwang.cn/2013/12/07/springside4%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03-quickstart%E5%88%86%E6%9E%90(1)/)我们继续项目配置文件的分析。\n\n3.application.properties\n\n这个配置文件，没啥好讲的，主要就是配置数据库参数之类的。\n<!--more -->\n4.applicationContext.xml\n\nSpring的公共配置信息，这个是重点了，要深刻理解啊。\n\n这是spring3.2版本的xml头文件，注意编码要为utf-8。\n\n我们需要什么样的标签的时候，就引入什么样的命名空间和Schema 定义。\n\n{%codeblock lang:xml%}\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txmlns:context=\"http://www.springframework.org/schema/context\" xmlns:jdbc=\"http://www.springframework.org/schema/jdbc\"  \n\txmlns:jee=\"http://www.springframework.org/schema/jee\" xmlns:tx=\"http://www.springframework.org/schema/tx\"\n\txmlns:jpa=\"http://www.springframework.org/schema/data/jpa\"\n\txsi:schemaLocation=\"\n\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd\n\t\thttp://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd\n\t\thttp://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd\n\t\thttp://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd\n\t\thttp://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd\"\n\tdefault-lazy-init=\"true\">\n{%endcodeblock%}\n\n\n\n\n\n\n\n\n\n\n\n{%codeblock lang:xml%}\n\n{%endcodeblock%}\n\n{%codeblock lang:xml%}\n\n{%endcodeblock%}\n\n{%codeblock lang:xml%}\n\n{%endcodeblock%}\n\n{%codeblock lang:xml%}\n\n{%endcodeblock%}\n\n{%codeblock lang:xml%}\n\n{%endcodeblock%}\n\n{%codeblock lang:xml%}\n\n{%endcodeblock%}","mtime":1386406351000,"source":"_posts/springside4学习笔记4-quickstart分析(2).md"},"qoj9dof84bxp6pyi":{"_id":"qoj9dof84bxp6pyi","content":"title: SpringSide4学习笔记3-QuickStart分析(1)\ndate: 2013-12-07 15:23:16\ncategories: SpringSide4\ntags: [springside4,quickstart,源码研究]\n---\n##**项目结构**\n\n  QuickStart项目给予Maven构建的，对于Maven不熟悉的朋友请自行google哈。\n\n##**项目选型**\n\n- Spring Framework 3.2.3\n- Hibernate 4.2.3\n- Spring data jpa 1.3.2\n- sitemesh 2.4.2\n- shiro 1.2.2\n- hibernate validator 4.3.1\n\n<!-- more -->\n\n##**配置文件分析**\n\n1.pom.xml文件\n\n首先是定义依赖库的版本，独立出来方便管理。\n\n{%codeblock lang:xml%}\n<properties>\n\t<springside.version>4.1.0.GA</springside.version>\n\t<spring.version>3.2.3.RELEASE</spring.version>\n</properties>\t\t\n{%endcodeblock%}\n\n依赖项定义\n\n{%codeblock lang:xml%}\n<dependencies>\n\t<!-- SPRINGSIDE -->\n\t<dependency>\n\t\t<groupId>org.springside</groupId>\n\t\t<artifactId>springside-core</artifactId>\n\t\t<version>${springside.version}</version>\n\t</dependency>\n<dependencies>\t\n{%endcodeblock%}\n\n其他详情请看项目具体配置。\n\n2.web.xml分析\n\n在web.xml中通过`contextConfigLocation`配置spring，contextConfigLocation参数定义了要装入的 Spring 配置文件。\n\n如果想装入多个配置文件，可以在`<param-value>`标记中用逗号作分隔符\n\n{%codeblock lang:xml%}\n<context-param>\n\t<param-name>contextConfigLocation</param-name>\n\t<param-value>\n\t\tclasspath*:/applicationContext.xml,\n\t\tclasspath*:/applicationContext-shiro.xml\n\t</param-value>\n</context-param>\n{%endcodeblock%}\n\n> Spring 3.1的功能，以后就不用为了区分Test, Dev,Production环境，搞几个只有细微区别的application.xml, application-test.xml及引用它们的web.xml了。\n\n首先，将`applicationContext.xml`中的namespace从`3.0`升级到`3.1`.xsd，然后就可以在文件末尾加入不同环境的定义，比如不同的`dataSource`\n{%codeblock lang:xml%}\n<beans profile=\"test\">\n\t<jdbc:embedded-database id=\"dataSource\">\n\t\t<jdbc:script location=\"classpath:com/bank/config/sql/schema.sql\"/>\n\t</jdbc:embedded-database>\n</beans>\n \n<beans profile=\"production\">\n\t<jee:jndi-lookup id=\"dataSource\" jndi-name=\"java:comp/env/jdbc/datasource\"/>\n</beans>\n{%endcodeblock%}\n在web.xml里，你需要定义使用的profile，最聪明的做法是定义成`context-param`，注意这里定义的是default值，在非生产环境，可以用系统变量\"`spring.profiles.active`\"进行覆盖。\n\n{%codeblock lang:xml%}\n<context-param>\n\t<param-name>spring.profiles.default</param-name>\n\t<param-value>production</param-value>\n</context-param>\n{%endcodeblock%}\n\n如果您想要在自己所定义的Servlet类别中使用Spring的容器功能，则也可以使用 `org.springframework.web.context.ContextLoaderListener`。ContextLoaderListener预设会读取applicationContext.xml。\n\n{%codeblock lang:xml%}\n<listener>\n\t<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n</listener>\n{%endcodeblock%}\n\n加入encodingFilter解决中文乱码问题。`<filter-mapping>`紧紧的放在`<filter>`的后面该配置顺序不可调换，切记，不然无效哦。\n\n{%codeblock lang:xml%}\n<filter>\n\t<filter-name>encodingFilter</filter-name>\n\t<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\n\t<init-param>\n\t\t<param-name>encoding</param-name>\n\t\t<param-value>UTF-8</param-value>\n\t</init-param>\n\t<init-param>\n\t\t<param-name>forceEncoding</param-name>\n\t\t<param-value>true</param-value>\n\t</init-param>\n</filter>\n<filter-mapping>\n\t<filter-name>encodingFilter</filter-name>\n\t<url-pattern>/*</url-pattern>\n</filter-mapping>\n{%endcodeblock%}\n\n在Java Web项目中使用`Hibernate`经常会遇到`LazyInitializationException`。这是因为controller和model层（java代码）将通过JPA的一些启用了延迟加载功能 的领域（如用`getRefrence()` 方法或者在关联关系中采用`fetch=FetchType.LAZY` ）返回给view层（jsp代码）的时候，由于加载领域对象的`JPA Session`已经关闭，导致这些延迟加载的数据访问异常。\n\n这时就可以使用OpenEntityManagerInViewFilter来将一个JPAsession与一次完整的请求过程对应的线程相绑定。\n\n{%codeblock lang:xml%}\n<filter>\n\t<filter-name>openEntityManagerInViewFilter</filter-name>\n\t<filter-class>org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter</filter-class>\n</filter>\n<filter-mapping>\n\t<filter-name>openEntityManagerInViewFilter</filter-name>\n\t<url-pattern>/*</url-pattern>\n</filter-mapping>\n{%endcodeblock%}\n\n配置Shiro过滤器,先让Shiro过滤系统接收到的请求。这里`filter-name`必须对应`applicationContext.xml`中定义的`<bean id=\"shiroFilter\"/>`。使用`[/*]`匹配所有请求,保证所有的可控请求都经过Shiro的过滤。\n通常会将此`filter-mapping`放置到最前面(即其他filter-mapping前面),以保证它是过滤器链中第一个起作用的\n\n{%codeblock lang:xml%}\n<filter>\n\t<filter-name>shiroFilter</filter-name>\n\t<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\n\t<init-param>\n\t <!-- 该值缺省为false,表示生命周期由SpringApplicationContext管理,\n\t      设置为true则表示由ServletContainer管理 -->  \n\t\t<param-name>targetFilterLifecycle</param-name>\n\t\t<param-value>true</param-value>\n\t</init-param>\n</filter>\n<filter-mapping>\n\t<filter-name>shiroFilter</filter-name>\n\t<url-pattern>/*</url-pattern>\n</filter-mapping>\n{%endcodeblock%}\n\n配置SiteMeshFilter，否则SiteMesh不起作用哦，什么是SiteMesh，请自行google。\n\n{%codeblock lang:xml%}\n<filter>\n\t<filter-name>sitemeshFilter</filter-name>\n\t<filter-class>com.opensymphony.sitemesh.webapp.SiteMeshFilter</filter-class>\n</filter>\n<filter-mapping>\n\t<filter-name>sitemeshFilter</filter-name>\n\t<url-pattern>/*</url-pattern>\n</filter-mapping>\n{%endcodeblock%}\n\n`DispatcherServlet`是前端控制器设计模式的实现，提供Spring Web MVC的集中访问点，而且负责职责的分派，而且与Spring IoC容器无缝集成。\n\n{%codeblock lang:xml%}\n<servlet>\n\t<servlet-name>springServlet</servlet-name>\n\t<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n\t<!--加载spring-mvc.xml进行初始化-->\n\t<init-param>\n\t\t<param-name>contextConfigLocation</param-name>\n\t\t<param-value>/WEB-INF/spring-mvc.xml</param-value>\n\t</init-param>\n\t <!--启动时初始化servlet-->\n\t<load-on-startup>1</load-on-startup>\n</servlet>\n<servlet-mapping>\n\t<servlet-name>springServlet</servlet-name>\n\t<!--拦截所有的请求-->\n\t<url-pattern>/</url-pattern>\n</servlet-mapping>\n{%endcodeblock%}\n\n设置session会话时间\n\n{%codeblock lang:xml%}\n<session-config>\n\t<session-timeout>20</session-timeout>\n</session-config>\n{%endcodeblock%}\n\n配置系统错误页面\n\n{%codeblock lang:xml%}\n<error-page>\n\t<exception-type>java.lang.Throwable</exception-type>\n\t<location>/WEB-INF/views/error/500.jsp</location>\n</error-page>\n<error-page>\n\t<error-code>500</error-code>\n\t<location>/WEB-INF/views/error/500.jsp</location>\n</error-page>\n<error-page>\n\t<error-code>404</error-code>\n\t<location>/WEB-INF/views/error/404.jsp</location>\n</error-page>\n{%endcodeblock%}\n\n\n##**参考文献**\n1.[用Profile 统一环境配置](https://github.com/springside/springside4/wiki/Spring)\n2.[org.springframework.web.context.ContextLoaderListener作用](http://blog.csdn.net/taijianyu/article/details/3176263)\n3.[Spring的OpenEntityManagerInViewFilter](http://whoosh.iteye.com/blog/1300721)\n4.[SpringMVC整合Shiro](http://blog.csdn.net/jadyer/article/details/12208847)\n5.[DispatcherServlet详解](http://jinnianshilongnian.iteye.com/blog/1602617)\n","mtime":1386405480000,"source":"_posts/springside4学习笔记3-quickstart分析).md"},"3x1zixjw3fueoisn":{"_id":"3x1zixjw3fueoisn","content":"title: SpringSide4学习笔记3-QuickStart分析(1)\ndate: 2013-12-07 15:23:16\ncategories: SpringSide4\ntags: [springside4,quickstart,源码研究]\n---\n##**项目结构**\n\n  QuickStart项目给予Maven构建的，对于Maven不熟悉的朋友请自行google哈。\n\n##**项目选型**\n\n- Spring Framework 3.2.3\n- Hibernate 4.2.3\n- Spring data jpa 1.3.2\n- sitemesh 2.4.2\n- shiro 1.2.2\n- hibernate validator 4.3.1\n\n<!-- more -->\n\n##**配置文件分析**\n\n1.pom.xml文件\n\n首先是定义依赖库的版本，独立出来方便管理。\n\n{%codeblock lang:xml%}\n<properties>\n\t<springside.version>4.1.0.GA</springside.version>\n\t<spring.version>3.2.3.RELEASE</spring.version>\n</properties>\t\t\n{%endcodeblock%}\n\n依赖项定义\n\n{%codeblock lang:xml%}\n<dependencies>\n\t<!-- SPRINGSIDE -->\n\t<dependency>\n\t\t<groupId>org.springside</groupId>\n\t\t<artifactId>springside-core</artifactId>\n\t\t<version>${springside.version}</version>\n\t</dependency>\n<dependencies>\t\n{%endcodeblock%}\n\n其他详情请看项目具体配置。\n\n2.web.xml分析\n\n在web.xml中通过`contextConfigLocation`配置spring，contextConfigLocation参数定义了要装入的 Spring 配置文件。\n\n如果想装入多个配置文件，可以在`<param-value>`标记中用逗号作分隔符\n\n{%codeblock lang:xml%}\n<context-param>\n\t<param-name>contextConfigLocation</param-name>\n\t<param-value>\n\t\tclasspath*:/applicationContext.xml,\n\t\tclasspath*:/applicationContext-shiro.xml\n\t</param-value>\n</context-param>\n{%endcodeblock%}\n\n> Spring 3.1的功能，以后就不用为了区分Test, Dev,Production环境，搞几个只有细微区别的application.xml, application-test.xml及引用它们的web.xml了。\n\n首先，将`applicationContext.xml`中的namespace从`3.0`升级到`3.1`.xsd，然后就可以在文件末尾加入不同环境的定义，比如不同的`dataSource`\n{%codeblock lang:xml%}\n<beans profile=\"test\">\n\t<jdbc:embedded-database id=\"dataSource\">\n\t\t<jdbc:script location=\"classpath:com/bank/config/sql/schema.sql\"/>\n\t</jdbc:embedded-database>\n</beans>\n \n<beans profile=\"production\">\n\t<jee:jndi-lookup id=\"dataSource\" jndi-name=\"java:comp/env/jdbc/datasource\"/>\n</beans>\n{%endcodeblock%}\n在web.xml里，你需要定义使用的profile，最聪明的做法是定义成`context-param`，注意这里定义的是default值，在非生产环境，可以用系统变量\"`spring.profiles.active`\"进行覆盖。\n\n{%codeblock lang:xml%}\n<context-param>\n\t<param-name>spring.profiles.default</param-name>\n\t<param-value>production</param-value>\n</context-param>\n{%endcodeblock%}\n\n如果您想要在自己所定义的Servlet类别中使用Spring的容器功能，则也可以使用 `org.springframework.web.context.ContextLoaderListener`。ContextLoaderListener预设会读取applicationContext.xml。\n\n{%codeblock lang:xml%}\n<listener>\n\t<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n</listener>\n{%endcodeblock%}\n\n加入encodingFilter解决中文乱码问题。`<filter-mapping>`紧紧的放在`<filter>`的后面该配置顺序不可调换，切记，不然无效哦。\n\n{%codeblock lang:xml%}\n<filter>\n\t<filter-name>encodingFilter</filter-name>\n\t<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\n\t<init-param>\n\t\t<param-name>encoding</param-name>\n\t\t<param-value>UTF-8</param-value>\n\t</init-param>\n\t<init-param>\n\t\t<param-name>forceEncoding</param-name>\n\t\t<param-value>true</param-value>\n\t</init-param>\n</filter>\n<filter-mapping>\n\t<filter-name>encodingFilter</filter-name>\n\t<url-pattern>/*</url-pattern>\n</filter-mapping>\n{%endcodeblock%}\n\n在Java Web项目中使用`Hibernate`经常会遇到`LazyInitializationException`。这是因为controller和model层（java代码）将通过JPA的一些启用了延迟加载功能 的领域（如用`getRefrence()` 方法或者在关联关系中采用`fetch=FetchType.LAZY` ）返回给view层（jsp代码）的时候，由于加载领域对象的`JPA Session`已经关闭，导致这些延迟加载的数据访问异常。\n\n这时就可以使用OpenEntityManagerInViewFilter来将一个JPAsession与一次完整的请求过程对应的线程相绑定。\n\n{%codeblock lang:xml%}\n<filter>\n\t<filter-name>openEntityManagerInViewFilter</filter-name>\n\t<filter-class>org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter</filter-class>\n</filter>\n<filter-mapping>\n\t<filter-name>openEntityManagerInViewFilter</filter-name>\n\t<url-pattern>/*</url-pattern>\n</filter-mapping>\n{%endcodeblock%}\n\n配置Shiro过滤器,先让Shiro过滤系统接收到的请求。这里`filter-name`必须对应`applicationContext.xml`中定义的`<bean id=\"shiroFilter\"/>`。使用`[/*]`匹配所有请求,保证所有的可控请求都经过Shiro的过滤。\n通常会将此`filter-mapping`放置到最前面(即其他filter-mapping前面),以保证它是过滤器链中第一个起作用的\n\n{%codeblock lang:xml%}\n<filter>\n\t<filter-name>shiroFilter</filter-name>\n\t<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\n\t<init-param>\n\t <!-- 该值缺省为false,表示生命周期由SpringApplicationContext管理,\n\t      设置为true则表示由ServletContainer管理 -->  \n\t\t<param-name>targetFilterLifecycle</param-name>\n\t\t<param-value>true</param-value>\n\t</init-param>\n</filter>\n<filter-mapping>\n\t<filter-name>shiroFilter</filter-name>\n\t<url-pattern>/*</url-pattern>\n</filter-mapping>\n{%endcodeblock%}\n\n配置SiteMeshFilter，否则SiteMesh不起作用哦，什么是SiteMesh，请自行google。\n\n{%codeblock lang:xml%}\n<filter>\n\t<filter-name>sitemeshFilter</filter-name>\n\t<filter-class>com.opensymphony.sitemesh.webapp.SiteMeshFilter</filter-class>\n</filter>\n<filter-mapping>\n\t<filter-name>sitemeshFilter</filter-name>\n\t<url-pattern>/*</url-pattern>\n</filter-mapping>\n{%endcodeblock%}\n\n`DispatcherServlet`是前端控制器设计模式的实现，提供Spring Web MVC的集中访问点，而且负责职责的分派，而且与Spring IoC容器无缝集成。\n\n{%codeblock lang:xml%}\n<servlet>\n\t<servlet-name>springServlet</servlet-name>\n\t<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n\t<!--加载spring-mvc.xml进行初始化-->\n\t<init-param>\n\t\t<param-name>contextConfigLocation</param-name>\n\t\t<param-value>/WEB-INF/spring-mvc.xml</param-value>\n\t</init-param>\n\t <!--启动时初始化servlet-->\n\t<load-on-startup>1</load-on-startup>\n</servlet>\n<servlet-mapping>\n\t<servlet-name>springServlet</servlet-name>\n\t<!--拦截所有的请求-->\n\t<url-pattern>/</url-pattern>\n</servlet-mapping>\n{%endcodeblock%}\n\n设置session会话时间\n\n{%codeblock lang:xml%}\n<session-config>\n\t<session-timeout>20</session-timeout>\n</session-config>\n{%endcodeblock%}\n\n配置系统错误页面\n\n{%codeblock lang:xml%}\n<error-page>\n\t<exception-type>java.lang.Throwable</exception-type>\n\t<location>/WEB-INF/views/error/500.jsp</location>\n</error-page>\n<error-page>\n\t<error-code>500</error-code>\n\t<location>/WEB-INF/views/error/500.jsp</location>\n</error-page>\n<error-page>\n\t<error-code>404</error-code>\n\t<location>/WEB-INF/views/error/404.jsp</location>\n</error-page>\n{%endcodeblock%}\n\n\n##**参考文献**\n1.[用Profile 统一环境配置](https://github.com/springside/springside4/wiki/Spring)\n2.[org.springframework.web.context.ContextLoaderListener作用](http://blog.csdn.net/taijianyu/article/details/3176263)\n3.[Spring的OpenEntityManagerInViewFilter](http://whoosh.iteye.com/blog/1300721)\n4.[SpringMVC整合Shiro](http://blog.csdn.net/jadyer/article/details/12208847)\n5.[DispatcherServlet详解](http://jinnianshilongnian.iteye.com/blog/1602617)\n","mtime":1386405480000,"source":"_posts/springside4学习笔记3-quickstart分析1.md"},"qpay9fr9m5muswuc":{"_id":"qpay9fr9m5muswuc","content":"title: SpringSide4学习笔记4-QuickStart分析(2)\ndate: 2013-12-07 16:32:49\ncategories: SpringSide4\ntags: [springside4,quickstart,源码研究]\n---\n接[上一节](http://zhujunwang.cn/2013/12/07/springside4%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03-quickstart%E5%88%86%E6%9E%901/)我们继续项目配置文件的分析。\n\n3.application.properties\n\n这个配置文件，没啥好讲的，主要就是配置数据库参数之类的。\n<!--more -->\n4.applicationContext.xml\n\nSpring的公共配置信息，这个是重点了，要深刻理解啊。\n\n这是spring3.2版本的xml头文件，注意编码要为utf-8。\n\n我们需要什么样的标签的时候，就引入什么样的命名空间和Schema 定义。\n\n{%codeblock lang:xml%}\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txmlns:context=\"http://www.springframework.org/schema/context\" xmlns:jdbc=\"http://www.springframework.org/schema/jdbc\"  \n\txmlns:jee=\"http://www.springframework.org/schema/jee\" xmlns:tx=\"http://www.springframework.org/schema/tx\"\n\txmlns:jpa=\"http://www.springframework.org/schema/data/jpa\"\n\txsi:schemaLocation=\"\n\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd\n\t\thttp://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd\n\t\thttp://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd\n\t\thttp://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd\n\t\thttp://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd\"\n\tdefault-lazy-init=\"true\">\n{%endcodeblock%}\n\n使用annotation 自动注册bean, 并保证`@Required`、`@Autowired`的属性被注入。为了防止在整合时候事务不起作用，我们需要使用`context:exclude-filter`进行黑名单过滤。在主容器中，我们排除掉`@controller`和`@ControllerAdvice`的注解，该注解让springmvc来处理。\n\n{%codeblock lang:xml%}\n<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->\n<context:component-scan base-package=\"org.springside.examples.quickstart\">\n\t<context:exclude-filter type=\"annotation\" expression=\"org.springframework.stereotype.Controller\"/>\n\t<context:exclude-filter type=\"annotation\" expression=\"org.springframework.web.bind.annotation.ControllerAdvice\"/>\n</context:component-scan>\n{%endcodeblock%}\n\nJPA实体管理工厂的配置\n\n{%codeblock lang:xml%}\n<!-- Jpa Entity Manager 配置 -->\n<bean id=\"entityManagerFactory\" class=\"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean\"> \n\t<property name=\"dataSource\" ref=\"dataSource\"/>\n\t<property name=\"jpaVendorAdapter\" ref=\"hibernateJpaVendorAdapter\"/>\n\t<property name=\"packagesToScan\" value=\"org.springside.examples.quickstart\"/>\n\t<property name=\"jpaProperties\">\n\t\t<props>\n\t\t\t<!-- 命名规则 My_NAME->MyName -->\n\t\t\t<prop key=\"hibernate.ejb.naming_strategy\">org.hibernate.cfg.ImprovedNamingStrategy</prop>\n\t\t</props>\n\t</property>\n</bean>\n{%endcodeblock%}\n\n指定实现JPA的适配器\n\n{%codeblock lang:xml%}\n<bean id=\"hibernateJpaVendorAdapter\" class=\"org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter\">\n\t<property name=\"databasePlatform\">\n\t\t<bean factory-method=\"getDialect\" class=\"org.springside.modules.persistence.Hibernates\">\n\t\t\t<constructor-arg ref=\"dataSource\"/>\n\t\t</bean>\n\t</property>\n</bean>\n{%endcodeblock%}\n\nSpring Data Jpa配置\n\n{%codeblock lang:xml%}\n<!-- Spring Data Jpa配置 -->\n<jpa:repositories base-package=\"org.springside.examples.quickstart\"  transaction-manager-ref=\"transactionManager\" entity-manager-factory-ref=\"entityManagerFactory\"/>\n{%endcodeblock%}\n\nJpa 事务配置\n\n{%codeblock lang:xml%}\n<!-- Jpa 事务配置 -->\n<bean id=\"transactionManager\" class=\"org.springframework.orm.jpa.JpaTransactionManager\">\n\t<property name=\"entityManagerFactory\" ref=\"entityManagerFactory\"/>\n</bean>\n{%endcodeblock%}\n\n使用annotation定义事务\n\n{%codeblock lang:xml%}\n<!-- 使用annotation定义事务 -->\n<tx:annotation-driven transaction-manager=\"transactionManager\" proxy-target-class=\"true\" />\n{%endcodeblock%}\n\nJSR303 Validator定义\n\n{%codeblock lang:xml%}\n<!-- JSR303 Validator定义 -->\n<bean id=\"validator\" class=\"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean\" />\n{%endcodeblock%}\n\n各种开发环境配置，production环境、local development环境、functional test 环境、unit test环境\n\n{%codeblock lang:xml%}\n<!-- production环境 -->\n<beans profile=\"production\">\n\t<context:property-placeholder ignore-unresolvable=\"true\"\n\tlocation=\"classpath*:/application.properties\" />\t\n\n<!-- 数据源配置, 使用Tomcat JDBC连接池 -->\n<bean id=\"dataSource\" class=\"org.apache.tomcat.jdbc.pool.DataSource\" destroy-method=\"close\">\n\t<!-- Connection Info -->\n\t<property name=\"driverClassName\" value=\"${jdbc.driver}\" />\n\t<property name=\"url\" value=\"${jdbc.url}\" />\n\t<property name=\"username\" value=\"${jdbc.username}\" />\n\t<property name=\"password\" value=\"${jdbc.password}\" />\n\n\t<!-- Connection Pooling Info -->\n\t<property name=\"maxActive\" value=\"${jdbc.pool.maxActive}\" />\n\t<property name=\"maxIdle\" value=\"${jdbc.pool.maxIdle}\" />\n\t<property name=\"defaultAutoCommit\" value=\"false\" />\n\t<!-- 连接Idle一个小时后超时 -->\n\t<property name=\"timeBetweenEvictionRunsMillis\" value=\"3600000\" />\n\t<property name=\"minEvictableIdleTimeMillis\" value=\"3600000\" />\n</bean>\n\n<!-- 数据源配置,使用应用服务器的数据库连接池 -->\n<!--<jee:jndi-lookup id=\"dataSource\" jndi-name=\"java:comp/env/jdbc/ExampleDB\" />-->\n</beans>\n\n<!-- local development环境 -->\n<beans profile=\"development\">\n<context:property-placeholder ignore-resource-not-found=\"true\"\n\tlocation=\"classpath*:/application.properties,\n  \t\t\t  classpath*:/application.development.properties\" />\t\n\n<!-- Tomcat JDBC连接池 -->\n<bean id=\"dataSource\" class=\"org.apache.tomcat.jdbc.pool.DataSource\" destroy-method=\"close\">\n\t<property name=\"driverClassName\" value=\"${jdbc.driver}\" />\n\t<property name=\"url\" value=\"${jdbc.url}\" />\n\t<property name=\"username\" value=\"${jdbc.username}\" />\n\t<property name=\"password\" value=\"${jdbc.password}\" />\n\t<property name=\"defaultAutoCommit\" value=\"false\" />\n</bean>\n</beans>\n\n<!-- functional test 环境 -->\n<beans profile=\"functional\">\n<context:property-placeholder ignore-resource-not-found=\"true\"\n\tlocation=\"classpath*:/application.properties,\n  \t\t\t  classpath*:/application.functional.properties,\n  \t\t\t  classpath*:/application.functional-local.properties\" />\t\n\n<!-- Tomcat JDBC连接池 -->\n<bean id=\"dataSource\" class=\"org.apache.tomcat.jdbc.pool.DataSource\" destroy-method=\"close\">\n\t<property name=\"driverClassName\" value=\"${jdbc.driver}\" />\n\t<property name=\"url\" value=\"${jdbc.url}\" />\n\t<property name=\"username\" value=\"${jdbc.username}\" />\n\t<property name=\"password\" value=\"${jdbc.password}\" />\n\t<property name=\"defaultAutoCommit\" value=\"false\" />\n</bean>\n\n<!-- 初始化数据表结构 -->\n<jdbc:initialize-database data-source=\"dataSource\" ignore-failures=\"ALL\">\n\t<jdbc:script location=\"classpath:sql/${db.type}/schema.sql\" />\n</jdbc:initialize-database>\t\n</beans>\n\n<!-- unit test环境 -->\n<beans profile=\"test\">\n\t<context:property-placeholder ignore-resource-not-found=\"true\"\n\tlocation=\"classpath*:/application.properties,\n  \t\t\t  classpath*:/application.test.properties\" />\t\n\n<!-- Spring Simple连接池 -->\n<bean id=\"dataSource\" class=\"org.springframework.jdbc.datasource.SimpleDriverDataSource\">\n\t<property name=\"driverClass\" value=\"${jdbc.driver}\" />\n\t<property name=\"url\" value=\"${jdbc.url}\" />\n\t<property name=\"username\" value=\"${jdbc.username}\" />\n\t<property name=\"password\" value=\"${jdbc.password}\" />\n</bean>\n\n<!-- 初始化数据表结构 与默认数据-->\n<jdbc:initialize-database data-source=\"dataSource\" ignore-failures=\"ALL\">\n\t<jdbc:script location=\"classpath:sql/h2/schema.sql\" />\n\t<jdbc:script location=\"classpath:data/h2/import-data.sql\" encoding=\"UTF-8\"/>\n</jdbc:initialize-database>\n</beans>\n{%endcodeblock%}\n\n\n\n##**参考文献**\n1.[context:component-scan扫描使用上的容易忽略的use-default-filters](http://jinnianshilongnian.iteye.com/blog/1762632)\n2.[用Profile 统一环境配置](https://github.com/springside/springside4/wiki/Spring)\n\n","mtime":1386407917000,"source":"_posts/springside4学习笔记4-quickstart分析2.md"},"9r9p1l0e8ao04hdt":{"_id":"9r9p1l0e8ao04hdt","content":"title: SpringSide4学习笔记3-QuickStart分析(1)\ndate: 2013-12-07 15:23:16\ncategories: SpringSide4\ntags: [springside4,quickstart,源码研究]\n---\n##**项目结构**\n\n  QuickStart项目给予Maven构建的，对于Maven不熟悉的朋友请自行google哈。\n\n##**项目选型**\n\n- Spring Framework 3.2.3\n- Hibernate 4.2.3\n- Spring data jpa 1.3.2\n- sitemesh 2.4.2\n- shiro 1.2.2\n- hibernate validator 4.3.1\n\n<!-- more -->\n\n##**配置文件分析**\n\n1.pom.xml文件\n\n首先是定义依赖库的版本，独立出来方便管理。\n\n{%codeblock lang:xml%}\n<properties>\n\t<springside.version>4.1.0.GA</springside.version>\n\t<spring.version>3.2.3.RELEASE</spring.version>\n</properties>\t\t\n{%endcodeblock%}\n\n依赖项定义\n\n{%codeblock lang:xml%}\n<dependencies>\n\t<!-- SPRINGSIDE -->\n\t<dependency>\n\t\t<groupId>org.springside</groupId>\n\t\t<artifactId>springside-core</artifactId>\n\t\t<version>${springside.version}</version>\n\t</dependency>\n<dependencies>\t\n{%endcodeblock%}\n\n其他详情请看项目具体配置。\n\n2.web.xml分析\n\n在web.xml中通过`contextConfigLocation`配置spring，contextConfigLocation参数定义了要装入的 Spring 配置文件。\n\n如果想装入多个配置文件，可以在`<param-value>`标记中用逗号作分隔符\n\n{%codeblock lang:xml%}\n<context-param>\n\t<param-name>contextConfigLocation</param-name>\n\t<param-value>\n\t\tclasspath*:/applicationContext.xml,\n\t\tclasspath*:/applicationContext-shiro.xml\n\t</param-value>\n</context-param>\n{%endcodeblock%}\n\n> Spring 3.1的功能，以后就不用为了区分Test, Dev,Production环境，搞几个只有细微区别的application.xml, application-test.xml及引用它们的web.xml了。\n\n首先，将`applicationContext.xml`中的namespace从`3.0`升级到`3.1`.xsd，然后就可以在文件末尾加入不同环境的定义，比如不同的`dataSource`\n{%codeblock lang:xml%}\n<beans profile=\"test\">\n\t<jdbc:embedded-database id=\"dataSource\">\n\t\t<jdbc:script location=\"classpath:com/bank/config/sql/schema.sql\"/>\n\t</jdbc:embedded-database>\n</beans>\n \n<beans profile=\"production\">\n\t<jee:jndi-lookup id=\"dataSource\" jndi-name=\"java:comp/env/jdbc/datasource\"/>\n</beans>\n{%endcodeblock%}\n在web.xml里，你需要定义使用的profile，最聪明的做法是定义成`context-param`，注意这里定义的是default值，在非生产环境，可以用系统变量\"`spring.profiles.active`\"进行覆盖。\n\n{%codeblock lang:xml%}\n<context-param>\n\t<param-name>spring.profiles.default</param-name>\n\t<param-value>production</param-value>\n</context-param>\n{%endcodeblock%}\n\n如果您想要在自己所定义的Servlet类别中使用Spring的容器功能，则也可以使用 `org.springframework.web.context.ContextLoaderListener`。ContextLoaderListener预设会读取applicationContext.xml。\n\n{%codeblock lang:xml%}\n<listener>\n\t<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n</listener>\n{%endcodeblock%}\n\n加入encodingFilter解决中文乱码问题。`<filter-mapping>`紧紧的放在`<filter>`的后面该配置顺序不可调换，切记，不然无效哦。\n\n{%codeblock lang:xml%}\n<filter>\n\t<filter-name>encodingFilter</filter-name>\n\t<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\n\t<init-param>\n\t\t<param-name>encoding</param-name>\n\t\t<param-value>UTF-8</param-value>\n\t</init-param>\n\t<init-param>\n\t\t<param-name>forceEncoding</param-name>\n\t\t<param-value>true</param-value>\n\t</init-param>\n</filter>\n<filter-mapping>\n\t<filter-name>encodingFilter</filter-name>\n\t<url-pattern>/*</url-pattern>\n</filter-mapping>\n{%endcodeblock%}\n\n在Java Web项目中使用`Hibernate`经常会遇到`LazyInitializationException`。这是因为controller和model层（java代码）将通过JPA的一些启用了延迟加载功能 的领域（如用`getRefrence()` 方法或者在关联关系中采用`fetch=FetchType.LAZY` ）返回给view层（jsp代码）的时候，由于加载领域对象的`JPA Session`已经关闭，导致这些延迟加载的数据访问异常。\n\n这时就可以使用OpenEntityManagerInViewFilter来将一个JPAsession与一次完整的请求过程对应的线程相绑定。\n\n{%codeblock lang:xml%}\n<filter>\n\t<filter-name>openEntityManagerInViewFilter</filter-name>\n\t<filter-class>org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter</filter-class>\n</filter>\n<filter-mapping>\n\t<filter-name>openEntityManagerInViewFilter</filter-name>\n\t<url-pattern>/*</url-pattern>\n</filter-mapping>\n{%endcodeblock%}\n\n配置Shiro过滤器,先让Shiro过滤系统接收到的请求。这里`filter-name`必须对应`applicationContext.xml`中定义的`<bean id=\"shiroFilter\"/>`。使用`[/*]`匹配所有请求,保证所有的可控请求都经过Shiro的过滤。\n通常会将此`filter-mapping`放置到最前面(即其他filter-mapping前面),以保证它是过滤器链中第一个起作用的\n\n{%codeblock lang:xml%}\n<filter>\n\t<filter-name>shiroFilter</filter-name>\n\t<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\n\t<init-param>\n\t <!-- 该值缺省为false,表示生命周期由SpringApplicationContext管理,\n\t      设置为true则表示由ServletContainer管理 -->  \n\t\t<param-name>targetFilterLifecycle</param-name>\n\t\t<param-value>true</param-value>\n\t</init-param>\n</filter>\n<filter-mapping>\n\t<filter-name>shiroFilter</filter-name>\n\t<url-pattern>/*</url-pattern>\n</filter-mapping>\n{%endcodeblock%}\n\n配置SiteMeshFilter，否则SiteMesh不起作用哦，什么是SiteMesh，请自行google。\n\n{%codeblock lang:xml%}\n<filter>\n\t<filter-name>sitemeshFilter</filter-name>\n\t<filter-class>com.opensymphony.sitemesh.webapp.SiteMeshFilter</filter-class>\n</filter>\n<filter-mapping>\n\t<filter-name>sitemeshFilter</filter-name>\n\t<url-pattern>/*</url-pattern>\n</filter-mapping>\n{%endcodeblock%}\n\n`DispatcherServlet`是前端控制器设计模式的实现，提供Spring Web MVC的集中访问点，而且负责职责的分派，而且与Spring IoC容器无缝集成。\n\n{%codeblock lang:xml%}\n<servlet>\n\t<servlet-name>springServlet</servlet-name>\n\t<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n\t<!--加载spring-mvc.xml进行初始化-->\n\t<init-param>\n\t\t<param-name>contextConfigLocation</param-name>\n\t\t<param-value>/WEB-INF/spring-mvc.xml</param-value>\n\t</init-param>\n\t <!--启动时初始化servlet-->\n\t<load-on-startup>1</load-on-startup>\n</servlet>\n<servlet-mapping>\n\t<servlet-name>springServlet</servlet-name>\n\t<!--拦截所有的请求-->\n\t<url-pattern>/</url-pattern>\n</servlet-mapping>\n{%endcodeblock%}\n\n设置session会话时间\n\n{%codeblock lang:xml%}\n<session-config>\n\t<session-timeout>20</session-timeout>\n</session-config>\n{%endcodeblock%}\n\n配置系统错误页面\n\n{%codeblock lang:xml%}\n<error-page>\n\t<exception-type>java.lang.Throwable</exception-type>\n\t<location>/WEB-INF/views/error/500.jsp</location>\n</error-page>\n<error-page>\n\t<error-code>500</error-code>\n\t<location>/WEB-INF/views/error/500.jsp</location>\n</error-page>\n<error-page>\n\t<error-code>404</error-code>\n\t<location>/WEB-INF/views/error/404.jsp</location>\n</error-page>\n{%endcodeblock%}\n\n\n##**参考文献**\n1.[用Profile 统一环境配置](https://github.com/springside/springside4/wiki/Spring)\n2.[org.springframework.web.context.ContextLoaderListener作用](http://blog.csdn.net/taijianyu/article/details/3176263)\n3.[Spring的OpenEntityManagerInViewFilter](http://whoosh.iteye.com/blog/1300721)\n4.[SpringMVC整合Shiro](http://blog.csdn.net/jadyer/article/details/12208847)\n5.[DispatcherServlet详解](http://jinnianshilongnian.iteye.com/blog/1602617)\n","mtime":1386405480000,"source":"_posts/springside4笔记3-quickstart分析1.md"},"24xi4tewbg1muxth":{"_id":"24xi4tewbg1muxth","content":"title: SpringSide4学习笔记4-QuickStart分析(2)\ndate: 2013-12-07 16:32:49\ncategories: SpringSide4\ntags: [springside4,quickstart,源码研究]\n---\n接[上一节](http://zhujunwang.cn/2013/12/07/springside4%E7%AC%94%E8%AE%B03-quickstart%E5%88%86%E6%9E%901/)我们继续项目配置文件的分析。\n\n3.application.properties\n\n这个配置文件，没啥好讲的，主要就是配置数据库参数之类的。\n<!--more -->\n4.applicationContext.xml\n\nSpring的公共配置信息，这个是重点了，要深刻理解啊。\n\n这是spring3.2版本的xml头文件，注意编码要为utf-8。\n\n我们需要什么样的标签的时候，就引入什么样的命名空间和Schema 定义。\n\n{%codeblock lang:xml%}\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txmlns:context=\"http://www.springframework.org/schema/context\" xmlns:jdbc=\"http://www.springframework.org/schema/jdbc\"  \n\txmlns:jee=\"http://www.springframework.org/schema/jee\" xmlns:tx=\"http://www.springframework.org/schema/tx\"\n\txmlns:jpa=\"http://www.springframework.org/schema/data/jpa\"\n\txsi:schemaLocation=\"\n\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd\n\t\thttp://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd\n\t\thttp://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd\n\t\thttp://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd\n\t\thttp://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd\"\n\tdefault-lazy-init=\"true\">\n{%endcodeblock%}\n\n使用annotation 自动注册bean, 并保证`@Required`、`@Autowired`的属性被注入。为了防止在整合时候事务不起作用，我们需要使用`context:exclude-filter`进行黑名单过滤。在主容器中，我们排除掉`@controller`和`@ControllerAdvice`的注解，该注解让springmvc来处理。\n\n{%codeblock lang:xml%}\n<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->\n<context:component-scan base-package=\"org.springside.examples.quickstart\">\n\t<context:exclude-filter type=\"annotation\" expression=\"org.springframework.stereotype.Controller\"/>\n\t<context:exclude-filter type=\"annotation\" expression=\"org.springframework.web.bind.annotation.ControllerAdvice\"/>\n</context:component-scan>\n{%endcodeblock%}\n\nJPA实体管理工厂的配置\n\n{%codeblock lang:xml%}\n<!-- Jpa Entity Manager 配置 -->\n<bean id=\"entityManagerFactory\" class=\"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean\"> \n\t<property name=\"dataSource\" ref=\"dataSource\"/>\n\t<property name=\"jpaVendorAdapter\" ref=\"hibernateJpaVendorAdapter\"/>\n\t<property name=\"packagesToScan\" value=\"org.springside.examples.quickstart\"/>\n\t<property name=\"jpaProperties\">\n\t\t<props>\n\t\t\t<!-- 命名规则 My_NAME->MyName -->\n\t\t\t<prop key=\"hibernate.ejb.naming_strategy\">org.hibernate.cfg.ImprovedNamingStrategy</prop>\n\t\t</props>\n\t</property>\n</bean>\n{%endcodeblock%}\n\n指定实现JPA的适配器\n\n{%codeblock lang:xml%}\n<bean id=\"hibernateJpaVendorAdapter\" class=\"org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter\">\n\t<property name=\"databasePlatform\">\n\t\t<bean factory-method=\"getDialect\" class=\"org.springside.modules.persistence.Hibernates\">\n\t\t\t<constructor-arg ref=\"dataSource\"/>\n\t\t</bean>\n\t</property>\n</bean>\n{%endcodeblock%}\n\nSpring Data Jpa配置\n\n{%codeblock lang:xml%}\n<!-- Spring Data Jpa配置 -->\n<jpa:repositories base-package=\"org.springside.examples.quickstart\"  transaction-manager-ref=\"transactionManager\" entity-manager-factory-ref=\"entityManagerFactory\"/>\n{%endcodeblock%}\n\nJpa 事务配置\n\n{%codeblock lang:xml%}\n<!-- Jpa 事务配置 -->\n<bean id=\"transactionManager\" class=\"org.springframework.orm.jpa.JpaTransactionManager\">\n\t<property name=\"entityManagerFactory\" ref=\"entityManagerFactory\"/>\n</bean>\n{%endcodeblock%}\n\n使用annotation定义事务\n\n{%codeblock lang:xml%}\n<!-- 使用annotation定义事务 -->\n<tx:annotation-driven transaction-manager=\"transactionManager\" proxy-target-class=\"true\" />\n{%endcodeblock%}\n\nJSR303 Validator定义\n\n{%codeblock lang:xml%}\n<!-- JSR303 Validator定义 -->\n<bean id=\"validator\" class=\"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean\" />\n{%endcodeblock%}\n\n各种开发环境配置，production环境、local development环境、functional test 环境、unit test环境\n\n{%codeblock lang:xml%}\n<!-- production环境 -->\n<beans profile=\"production\">\n\t<context:property-placeholder ignore-unresolvable=\"true\"\n\tlocation=\"classpath*:/application.properties\" />\t\n\n<!-- 数据源配置, 使用Tomcat JDBC连接池 -->\n<bean id=\"dataSource\" class=\"org.apache.tomcat.jdbc.pool.DataSource\" destroy-method=\"close\">\n\t<!-- Connection Info -->\n\t<property name=\"driverClassName\" value=\"${jdbc.driver}\" />\n\t<property name=\"url\" value=\"${jdbc.url}\" />\n\t<property name=\"username\" value=\"${jdbc.username}\" />\n\t<property name=\"password\" value=\"${jdbc.password}\" />\n\n\t<!-- Connection Pooling Info -->\n\t<property name=\"maxActive\" value=\"${jdbc.pool.maxActive}\" />\n\t<property name=\"maxIdle\" value=\"${jdbc.pool.maxIdle}\" />\n\t<property name=\"defaultAutoCommit\" value=\"false\" />\n\t<!-- 连接Idle一个小时后超时 -->\n\t<property name=\"timeBetweenEvictionRunsMillis\" value=\"3600000\" />\n\t<property name=\"minEvictableIdleTimeMillis\" value=\"3600000\" />\n</bean>\n\n<!-- 数据源配置,使用应用服务器的数据库连接池 -->\n<!--<jee:jndi-lookup id=\"dataSource\" jndi-name=\"java:comp/env/jdbc/ExampleDB\" />-->\n</beans>\n\n<!-- local development环境 -->\n<beans profile=\"development\">\n<context:property-placeholder ignore-resource-not-found=\"true\"\n\tlocation=\"classpath*:/application.properties,\n  \t\t\t  classpath*:/application.development.properties\" />\t\n\n<!-- Tomcat JDBC连接池 -->\n<bean id=\"dataSource\" class=\"org.apache.tomcat.jdbc.pool.DataSource\" destroy-method=\"close\">\n\t<property name=\"driverClassName\" value=\"${jdbc.driver}\" />\n\t<property name=\"url\" value=\"${jdbc.url}\" />\n\t<property name=\"username\" value=\"${jdbc.username}\" />\n\t<property name=\"password\" value=\"${jdbc.password}\" />\n\t<property name=\"defaultAutoCommit\" value=\"false\" />\n</bean>\n</beans>\n\n<!-- functional test 环境 -->\n<beans profile=\"functional\">\n<context:property-placeholder ignore-resource-not-found=\"true\"\n\tlocation=\"classpath*:/application.properties,\n  \t\t\t  classpath*:/application.functional.properties,\n  \t\t\t  classpath*:/application.functional-local.properties\" />\t\n\n<!-- Tomcat JDBC连接池 -->\n<bean id=\"dataSource\" class=\"org.apache.tomcat.jdbc.pool.DataSource\" destroy-method=\"close\">\n\t<property name=\"driverClassName\" value=\"${jdbc.driver}\" />\n\t<property name=\"url\" value=\"${jdbc.url}\" />\n\t<property name=\"username\" value=\"${jdbc.username}\" />\n\t<property name=\"password\" value=\"${jdbc.password}\" />\n\t<property name=\"defaultAutoCommit\" value=\"false\" />\n</bean>\n\n<!-- 初始化数据表结构 -->\n<jdbc:initialize-database data-source=\"dataSource\" ignore-failures=\"ALL\">\n\t<jdbc:script location=\"classpath:sql/${db.type}/schema.sql\" />\n</jdbc:initialize-database>\t\n</beans>\n\n<!-- unit test环境 -->\n<beans profile=\"test\">\n\t<context:property-placeholder ignore-resource-not-found=\"true\"\n\tlocation=\"classpath*:/application.properties,\n  \t\t\t  classpath*:/application.test.properties\" />\t\n\n<!-- Spring Simple连接池 -->\n<bean id=\"dataSource\" class=\"org.springframework.jdbc.datasource.SimpleDriverDataSource\">\n\t<property name=\"driverClass\" value=\"${jdbc.driver}\" />\n\t<property name=\"url\" value=\"${jdbc.url}\" />\n\t<property name=\"username\" value=\"${jdbc.username}\" />\n\t<property name=\"password\" value=\"${jdbc.password}\" />\n</bean>\n\n<!-- 初始化数据表结构 与默认数据-->\n<jdbc:initialize-database data-source=\"dataSource\" ignore-failures=\"ALL\">\n\t<jdbc:script location=\"classpath:sql/h2/schema.sql\" />\n\t<jdbc:script location=\"classpath:data/h2/import-data.sql\" encoding=\"UTF-8\"/>\n</jdbc:initialize-database>\n</beans>\n{%endcodeblock%}\n\n\n\n##**参考文献**\n1.[context:component-scan扫描使用上的容易忽略的use-default-filters](http://jinnianshilongnian.iteye.com/blog/1762632)\n2.[用Profile 统一环境配置](https://github.com/springside/springside4/wiki/Spring)\n\n","mtime":1386408253000,"source":"_posts/springside4笔记4-quickstart分析2.md"},"mhufy6hfeyx8pdli":{"_id":"mhufy6hfeyx8pdli","content":"title: springside4学习笔记1-SpringSide4介绍及环境配置\ndate: 2013-12-07 08:44:34\ncategories: SpringSide4\ntags: [框架,spring,springside,江南白衣]\n---\n##*介绍*\n\n`SpringSide`是以`Spring Framework`为核心的，`Pragmatic`风格的`JavaEE`应用参考示例，是JavaEE世界中的主流技术选型，最佳实践的总结与演示。\n\n- Quickstart: 一个迷你的TodoList应用。\n- Showcase: 五花八门的JavaEE技术大派对。\n\n<!-- more -->\n\n官网：[http://www.springside.org.cn/](http://www.springside.org.cn/)\nGithub:[https://github.com/springside/springside4](https://github.com/springside/springside4)\n讨论区：[http://www.oschina.net/p/springside](http://www.oschina.net/p/springside)\n\n##**入门研究**\n\n###**系统环境**\n\n必须保证满足下列2个条件：\n\n1.Install JDK 6.0+ and set the JAVA_HOME.\n2.Install Maven 3.0.3+ and set the PATH. \n\n###**SpringSide4目录**\n1.`Modules` -- SpringSide封装的代码: \n\n  - `Parent`是公共的pom.xml文件；\n  - `Core`是一些使用率最高的核心代码；\n  - `Extension`是不一定会用上的扩展如Memcached/Redis Client封装；\n  - `Test` 则是测试用的封装；\n\n2.`Examples` -- QuickStart 与 Showcase 一小一大两个示例项目.\n3.`Support` -- 其他杂项内容, 如H2的Console启动命令, Maven的常用命令, 生成新项目的模板，Sonar的规则等等.\n\n###**实例运行**\n\n默认情况下，我们直接执行根目录下下的`quick-start.bat`就可以全自动的运行项目。\n\n下面我们使用手工的方式自己输入命令，然后导入项目到eclipse。\n\n1.将所有module编译打包安装到Maven的本地仓库：进入`E:\\git_2\\springside4\\modules`目录（以你自己的项目目录为准，这是我的路径）然后执行：\n\n\tmvn install\n\n![](/img/2013/12/springside4-module-mvn-install.jpg)\n\n\n2.将`quickstart`项目生成为普通elipse项目，这样就可以在eclipse中导入(import)了。进入`E:\\git_2\\springside4\\examples\\quickstart`,执行命令:\n\n\tmvn eclipse:eclipse\n\n注：其实可以忽略第2步的，我们在eclipse中直接导入maven项目即可，前提是你eclipse安装maven插件。\n\n![](/img/2013/12/springside4-example-import.jpg)\n\n3.配置数据库，默认使用的是H2 databse，我更改为mysql，方便研究调试，你可以按自己的需要来。\n\n修改pom.xml文件，注释掉h2的相关配置，更改为mysql。\n{%codeblock lang:xml%}\n<!--  <h2.version>1.3.174</h2.version>-->\n\n<!-- Plugin的属性定义 -->\n<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n<jdk.version>1.6</jdk.version>\n\n<!-- 项目属性 -->\n<!--\n<jdbc.driver.groupId>com.h2database</jdbc.driver.groupId>\n<jdbc.driver.artifactId>h2</jdbc.driver.artifactId>\n<jdbc.driver.version>${h2.version}</jdbc.driver.version>\n-->\t\n<jdbc.driver.groupId>mysql</jdbc.driver.groupId>\n<jdbc.driver.artifactId>mysql-connector-java</jdbc.driver.artifactId>\n<jdbc.driver.version>5.1.22</jdbc.driver.version>\n{%endcodeblock%}\n\n修改刷新开发环境\n\n{%codeblock lang:xml%}\n<sql driver=\"${jdbc.driver}\" url=\"${jdbc.url}\" userid=\"${jdbc.username}\" password=\"${jdbc.password}\" onerror=\"continue\" encoding=\"${project.build.sourceEncoding}\">\n\t<classpath refid=\"maven.test.classpath\" />\n\t<transaction src=\"src/main/resources/sql/mysql/schema.sql\"/>\n\t<transaction src=\"src/test/resources/data/h2/import-data.sql\"/>\n</sql>\n{%endcodeblock%}\n\n修改application.properties\n\n{%codeblock lang:xml%}\n#mysql database setting\njdbc.driver=com.mysql.jdbc.Driver\njdbc.url=jdbc:mysql://localhost/quickstart?useUnicode=true&characterEncoding=utf-8\njdbc.username=root\njdbc.password=123456\n{%endcodeblock%}\n\n创建数据表quickstart，运行refresh-db.bat刷新数据库。\n\n###**运行quickstart**\n\n使用内嵌的jetty server运行项目\n在eclipse中，右击quickstart中的pom.xml文件\n选择：Run Configuration\n\nBase diretory： 选择quickstart项目\nGoals: jetty:run\n\n点击run，运行该项目。\n\n或部署到tomcat上面。我是使用tomcat，部署成功如下图：\n![](/img/2013/12/springside4-quickstart-demo.jpg)\n\n登陆下例子看看如何：\n![](/img/2013/12/springside4-quickstart-demo2.jpg)\n\n下面就可以开始根据例子对springside的核心代码研究。请看后续博文。\n","mtime":1386385863000,"source":"_posts/springside4笔记1-SpringSide4介绍及环境配置.md"},"vx3gfgxngpa0wkmx":{"_id":"vx3gfgxngpa0wkmx","content":"title: springside4学习笔记2-设计与技术选型\ndate: 2013-12-07 11:15:50\ncategories: [SpringSide4]\ntags: [技术选型,架构]\n---\n#**1. Web**\n\n- **MVC Framwork**： `SpringMVC3.0 Restful`的风格终于回归了MVC框架的简单本质，对比之下Struts2概念太复杂更新又太懒了。\n\n- **Template**：`JSP2.0`且尽量使用`JSP EL`而不是taglib，万一要写taglib也用纯JSP来编写，一向是SpringSide的推荐，Freemarker们始终有点小众, 而Thymeleaf与美工配合度非常高，可惜也是太少用户了。\n\n- **Layout Decoration**： Tiles的配置都太复杂了，`SiteMesh2`好些，但Sitemesh3烂尾了。\n\n- **Javascript Library**： 随大流用了`JQuery`。其实Dojo的面向对象语法更优美，但用户数和插件社区差了点。\n\n- **CSS Framework**： 最热火的`Twitter Bootstrap`，提供了简便的布局能力和基本的页面美化。\n\n- **JavaScript/CSS Compressor**: 还是随便选的`YUI Compressor`。\n\n- **Validation**: `JQuery Validation Plugin`这种客户端校验的客户体验更好，而Spring MVC集成`Hibernate Valiator`的服务端校验则可以避免恶意用户跳过页面直接发送请求，校验规则也更多，需要混合使用。\n<!--more-->\n#**2. WebService**\n\n- **SOAP WebService**： `JAX-WS2.0`的注解 + `Apache CXF` 无疑是最成熟的，一说起Axis1/2我都要打冷颤。\n\n- **Restful Service**： `JAX-RS 1.0 + Jersey/CXF`，够标准。但直接使用Spring MVC能使架构更简单。 如果追求极致的性能标，直接写Servlet也没啥。\n\n- **Restful Client**: 刚出来的`JAX-RS 2.0`标准，实际是用Jersey的client api做蓝本的， 而直接使用Spring的`RestTemplate`可以减少第三方包的引入。\n\n为了隔绝变化影响，隐藏细节，对外暴露的DTO和应用内部的领域对象是不同的类型，用Dozer进行复制。\n\n请求参数的校验，`JSR303 Bean Validator`的实现`Hibernate Validator`没太多的竞争对手。\n\n#**3. Database**\n\n- **数据库设计基本原则**:\n1.主键的列名统一为id。\n2.为方便数据操作及维护，不建立任何外键，用程序去保证关联关系。\n3.为表名添加前缀以便日后管理。比如有几十个表，将联系比较紧密的表，使用相同的前缀。\n4.表名全小写，因为MySQL在Linux下默认区分表名大小写。 \n\n- **ORM Framework**： 快速开发的应用里，领域对象肯定是用`JPA标注`的。至于API用`Hibernate`还是JPA，因为那个极简便的，DAO只要写接口就好了的`Spring-Data-JPA`，所以选了JPA。 当然，JPA的实现还是用Hibernate。\n\n追求高性能的应用，如各种Web服务，当然就是`MyBatis`了。如果项目再简单点，`Spring JDBC`其实也不错。\n\n- **传统数据库**: 无非还是`Oracle`与`MySQL`的选择，如果你恨MySQL还是Oracle家的东西，可以考虑越来越多人用的，语法和Oracle很像的`Postgresql`。\n\n- **NOSQL数据库**: 国内用的比较多的还是`Redis`和`MongoDB`.Redis更像一个数据结构服务器，暴露各种数据结构的专有API。而MongoDB将数据存成BSON格式，也提供类似SQL的查询语句，更像一个schema-less的数据库。\n\n- **数据库连接池**: `Apache DBCP`本来一统江湖，现在被人批评又慢又复杂，所以有了`Tomcat JDBC`，另外温少的`Druid也`是一个选择。\n\n- **Cache**：在JVM里的缓存，最老牌最多人用的依然是`Ehcache`，一些更强大的DataGrid方案如`HazelCast`，JBoss的Infinispan反而没什么人用。另外最简单的JVM内缓存是`Guava`的Cache。\n\n而中央式的缓存，`Memcached`已经成为了事实标准。而且当主创撒手不管后，社区现在反而有着稳定的更新。 Client方面，比较稳健选择的还是`Spymemcached`。\n\n#**3. Services**\n\n- **Security Framework**： 选择`Apache Shiro`是因为SpringSecurity的代码复杂度已经超过了它的实际需要，扩展困难痛苦。另一个原因是SpringSecurity的基本API居然只支持基于角色的判断，e.g. hasRole(\"Administrator\")，而Shiro同时还支持我们其实更常用的基于Permission的判断，e.g. hasPermission(\"User:Edit\")。\n\n- **JMS**： `ActiveMQ`是最多人选用的应用服务器无关的JMS实现，JBoss的HornetQ同样只是JBoss的用户在使用。Spring自带的`JMS`封装很好用。但还有更高级的如支持跨平台的`AMQP协议`的`RabbmitMQ`。\n\n- **Schedule**： 对于固定时间间隔的任务，JDK自带的`Executor`已足够好。Cron式定时执行，Spring的`Scheduler`也能满足。而且Spring的提供的纯XML配置也让Scheduler变得很简单，`Quartz`更大的优势体现在保证集群中有且仅有一台服务器执行任务。另外，SpringSide还演示了基于Redis做了一个适合海量的只需单次触发的任务。\n\n- **JMX**: Jolokia能将JMX中的MBean以`Restful+JSON`的方式暴露出来，使JMX这个古老的，在平台互通中显得有点封闭的协议重新焕发了青春。而Spring-Jmx将普通POJO注释一下就变成MBean也非常方便。\n\n#**4. Utilizes**\n\n- **General**： `Apache Commons Lang`说是伴着我们长大的也不为过，3.0版连package名也改了，全面支持泛型。 `Guava` 是Google新鲜推出的优雅产品。但说它会一桶天下又不定，因为它有时候太新潮了，反而用不惯。比如StringUtils我还是喜欢用Apache的，IO也同样是Apache Commons IO的好使。\n\n- **XML**： 用JDK自带的`JAXB`就算了，不折腾。\n\n- **JSON**： GSon虽然系出名门而且接口优雅，但`Jackson`的功能更加丰富到匪夷所思，而且比GSon快很多。\n\n- **Email**： Spring自带的`Email`封装挺好用的。\n\n- **Logging**: `Slf4j`作为入口，早就替代了`Apache Common Logging`了，下面的实现Log4j 1.x 被批判太多同步方法太慢，Log4j作者的后作Logback就好很多了，但社区似乎不甘心log在一家QOS公司手里，又在推动log4j2.0的发展，目前还是beta版。\n\n最后，`Freemarker`虽然不用来做页面Template，平时用来生成点东西也不错的。 JodaTime这种要直接加入JDK的就不多说它了。HttpClient用Apache HttpClient还是用JDK自带的要看情况，简单的用JDK，需要keep alive什么的用Apache。\n\n#**5. Test**\n\n- **Unit Test**： `JUnit`始终是正统，TestNG的功能如测试用例分组它也慢慢支持了。\n\n- **Mock**： `Mockito`的API比老牌的EasyMock更为优雅，而PowerMock则能配合Mockito完成static方法，函数内部new 出来的对象这些Mockito做不了的mock。\n\n- **Functional Test**：Selenium与WebDriver的合并后，最大改进是原来基于javascript的方案， 变成了直接调用浏览器的核心API，性能好了。\n\n#**6. Development Environment**\n\n`JDK6`这样没什么兼容性问题又成熟得一塌糊涂的版本建议大家都升级吧。`JDK7`也不错，有G1垃圾收集器和Try-Catch新语法的语法糖。\n\n用Jetty7是因为它的嵌入式版本做得好，集成测试不用部署直接就开跑了。开发时一般也不用Eclipse插件，直接自己在代码里启动了，省下打包拷贝War文件的时间。\n\n用`H2 Database`，既是嵌入式的，又可以持久化到文件用Web Console查看，性能还是嵌入式中最好的。\n\n用`Maven`，在项目构建脚本不复杂的时候的首选，否则就只能ant+ivy了，或者像hibernate和spring一样，用gradle.\n\n另外，用`Log4jdbc`在开发时查看实际执行的SQL。\n\n最后，用`Jenkins`做持续集成, `Sonar`做代码质量检查，是大部分好项目的共同爱好。\n\n\n本文转载于：[https://github.com/springside/springside4/wiki/Design](https://github.com/springside/springside4/wiki/Design)","mtime":1386387289000,"source":"_posts/springside4笔记2-设计与技术选型.md"},"wfzv3cpd6b8t3mpz":{"_id":"wfzv3cpd6b8t3mpz","content":"title: 重温spring3-spring概述\ndate: 2013-12-09 09:08:34\ncategories: Spring3\ntags: [Spring3,概述]\n---\n##**Spring是什么**\n\n`Spring`是一个开源的轻量级`Java SE`（Java 标准版本）/`Java EE`（Java 企业版本）开发应用框架，其目的是用于`简化企业级应用程序开发`。应用程序是由一组相互协作的对象组成。而在传统应用程序开发中，一个完整的应用是由一组相互协作的对象组成。所以开发一个应用除了要开发业务逻辑之外，最多的是关注如何使这些对象协作来完成所需功能，而且要低耦合、高内聚。业务逻辑开发是不可避免的，那如果有个框架出来帮我们来创建对象及管理这些对象之间的依赖关系。可能有人说了，比如“抽象工厂、工厂方法设计模式”不也可以帮我们创建对象，“生成器模式”帮我们处理对象间的依赖关系，不也能完成这些功能吗？可是这些又需要我们创建另一些工厂类、生成器类，我们又要而外管理这些类，增加了我们的负担，如果能有种通过配置方式来创建对象，管理对象之间依赖关系，我们不需要通过工厂和生成器来创建及管理对象之间的依赖关系，这样我们是不是减少了许多工作，加速了开发，能节省出很多时间来干其他事。Spring框架刚出来时主要就是来完成这个功能。\n<!-- more -->\nSpring框架除了帮我们`管理对象及其依赖关系`，还提供像`通用日志记录`、`性能统计`、`安全控制`、`异常处理`等面向切面的能力，还能帮我管理最头疼的`数据库事务`，本身提供了一套简单的JDBC访问实现，提供与第三方数据访问`框架集成`（如Hibernate、JPA），与各种Java EE技术整合（如Java Mail、任务调度等等），提供一套自己的web层框架`Spring MVC`、而且还能非常简单的与第三方web框架集成。从这里我们可以认为Spring是一个超级粘合平台，除了自己提供功能外，还提供粘合其他技术和框架的能力，从而使我们可以更自由的选择到底使用什么技术进行开发。而且不管是JAVA SE（C/S架构）应用程序还是JAVA EE（B/S架构）应用程序都可以使用这个平台进行开发。让我们来深入看一下Spring到底能帮我们做些什么？\n \n##**Spring能帮我们做什么**\n\nSpring除了不能帮我们写业务逻辑，其余的几乎什么都能帮助我们简化开发：\n \n1.传统程序开发，创建对象及组装对象间依赖关系由我们在程序内部进行控制，这样会加大各个对象间的耦合，如果我们要修改对象间的依赖关系就必须修改源代码，重新编译、部署；而如果采用Spring，则由Spring根据配置文件来进行创建及组装对象间依赖关系，只需要改配置文件即可，无需重新编译。所以，Spring能帮我们根据配置文件创建及组装对象之间的依赖关系。\n \n2.当我们要进行一些日志记录、权限控制、性能统计等时，在传统应用程序当中我们可能在需要的对象或方法中进行，而且比如权限控制、性能统计大部分是重复的，这样代码中就存在大量重复代码，即使有人说我把通用部分提取出来，那必然存在调用还是存在重复，像性能统计我们可能只是在必要时才进行，在诊断完毕后要删除这些代码；还有日志记录，比如记录一些方法访问日志、数据访问日志等等，这些都会渗透到各个要访问方法中；还有权限控制，必须在方法执行开始进行审核，想想这些是多么可怕而且是多么无聊的工作。如果采用Spring，这些日志记录、权限控制、性能统计从业务逻辑中分离出来，通过Spring支持的面向切面编程，在需要这些功能的地方动态添加这些功能，无需渗透到各个需要的方法或对象中；有人可能说了，我们可以使用“代理设计模式”或“包装器设计模式”，你可以使用这些，但还是需要通过编程方式来创建代理对象，还是要耦合这些代理对象，而采用Spring 面向切面编程能提供一种更好的方式来完成上述功能，一般通过`配置方式`，而且不需要在现有代码中添加任何额外代码，现有代码专注业务逻辑。所以，Spring 面向切面编程能帮助我们无耦合的实现日志记录，性能统计，安全控制。\n \n3.在传统应用程序当中，我们如何来完成数据库事务管理？需要一系列“获取连接，执行SQL，提交或回滚事务，关闭连接”，而且还要保证在最后一定要关闭连接，多么可怕的事情，而且也很无聊；如果采用Spring，我们只需获取连接，执行SQL，其他的都交给Spring来管理了，简单吧。所以，Spring能非常简单的帮我们管理数据库事务。\n \n4.Spring还提供了与第三方数据访问框架（如Hibernate、JPA）无缝集成，而且自己也提供了一套JDBC访问模板，来方便数据库访问。\n \n5.Spring还提供与第三方Web（如Struts、JSF）框架无缝集成，而且自己也提供了一套Spring MVC框架，来方便web层搭建。\n \n6.Spring能方便的与Java EE（如Java Mail、任务调度）整合，与更多技术整合（比如缓存框架）。\n \nSpring能帮我们做这么多事情，提供这么多功能和与那么多主流技术整合，而且是帮我们做了开发中比较头疼和困难的事情，那可能有人会问，难道只有Spring这一个框架，没有其他选择？当然有，比如EJB需要依赖应用服务器、开发效率低、在开发中小型项目是宰鸡拿牛刀，虽然发展到现在EJB比较好用了，但还是比较笨重还需要依赖应用服务器等。那为何需要使用Spring，而不是其他框架呢？让我们接着往下看。\n \n##**为何需要Spring**\n\n概念\n\n1、应用程序：是能完成我们所需要功能的成品，比如购物网站、OA系统。\n2、框架：是能完成一定功能的半成品，比如我们可以使用框架进行购物网站开发；框架做一部分功能，我们自己做一部分功能，这样应用程序就创建出来了。而且框架规定了你在开发应用程序时的整体架构，提供了一些基础功能，还规定了类和对象的如何创建、如何协作等，从而简化我们开发，让我们专注于业务逻辑开发。\n3、非侵入式设计：从框架角度可以这样理解，无需继承框架提供的类，这种设计就可以看作是非侵入式设计，如果继承了这些框架类，就是侵入设计，如果以后想更换框架之前写过的代码几乎无法重用，如果非侵入式设计则之前写过的代码仍然可以继续使用。\n4、轻量级及重量级：轻量级是相对于重量级而言的，轻量级一般就是非入侵性的、所依赖的东西非常少、资源占用非常少、部署简单等等，其实就是比较容易使用，而重量级正好相反。\n5、POJO：POJO（Plain Old Java Objects）简单的Java对象，它可以包含业务逻辑或持久化逻辑，但不担当任何特殊角色且不继承或不实现任何其它Java框架的类或接口。\n6、容器：在日常生活中容器就是一种盛放东西的器具，从程序设计角度看就是装对象的的对象，因为存在放入、拿出等操作，所以容器还要管理对象的生命周期。\n7、控制反转：即Inversion of Control，缩写为IoC，控制反转还有一个名字叫做依赖注入（Dependency Injection），就是由容器控制程序之间的关系，而非传统实现中，由程序代码直接操控。\n8、Bean：一般指容器管理对象，在Spring中指Spring IoC容器管理对象。\n \n##**为什么需要Spring及Spring的优点**\n\n- 非常轻量级的容器：以集中的、自动化的方式进行应用程序对象创建和装配，负责对象创建和装配，管理对象生命周期，能组合成复杂的应用程序。Spring容器是非侵入式的（不需要依赖任何Spring特定类），而且完全采用POJOs进行开发，使应用程序更容易测试、更容易管理。而且核心JAR包非常小，Spring3.0.5不到1M，而且不需要依赖任何应用服务器，可以部署在任何环境（Java SE或Java EE）。\n- AOP：AOP是Aspect Oriented Programming的缩写，意思是面向切面编程，提供从另一个角度来考虑程序结构以完善面向对象编程（相对于OOP），即可以通过在编译期间、装载期间或运行期间实现在不修改源代码的情况下给程序动态添加功能的一种技术。通俗点说就是把可重用的功能提取出来，然后将这些通用功能在合适的时候织入到应用程序中；比如安全，日记记录，这些都是通用的功能，我们可以把它们提取出来，然后在程序执行的合适地方织入这些代码并执行它们，从而完成需要的功能并复用了这些功能。\n- 简单的数据库事务管理：在使用数据库的应用程序当中，自己管理数据库事务是一项很让人头疼的事，而且很容易出现错误，Spring支持可插入的事务管理支持，而且无需JEE环境支持，通过Spring管理事务可以把我们从事务管理中解放出来来专注业务逻辑。\n- JDBC抽象及ORM框架支持：Spring使JDBC更加容易使用；提供DAO（数据访问对象）支持，非常方便集成第三方ORM框架，比如Hibernate等；并且完全支持Spring事务和使用Spring提供的一致的异常体系。\n- 灵活的Web层支持：Spring本身提供一套非常强大的MVC框架，而且可以非常容易的与第三方MVC框架集成，比如Struts等。\n- 简化各种技术集成：提供对Java Mail、任务调度、JMX、JMS、JNDI、EJB、动态语言、远程访问、Web Service等的集成。\nSpring能帮助我们简化应用程序开发，帮助我们创建和组装对象，为我们管理事务，简单的MVC框架，可以把Spring看作是一个超级粘合平台，能把很多技术整合在一起，形成一个整体，使系统结构更优良、性能更出众，从而加速我们程序开发，有如上优点，我们没有理由不考虑使用它。\n \n##**如何学好Spring**\n\n要学好Spring，首先要明确Spring是个什么东西，能帮我们做些什么事情，知道了这些然后做个简单的例子，这样就基本知道怎么使用Spring了。Spring核心是IoC容器，所以一定要透彻理解什么是IoC容器，以及如何配置及使用容器，其他所有技术都是基于容器实现的；理解好IoC后，接下来是面向切面编程，首先还是明确概念，基本配置，最后是实现原理，接下来就是数据库事务管理，其实Spring管理事务是通过面向切面编程实现的，所以基础很重要，IoC容器和面向切面编程搞定后，其余都是基于这俩东西的实现，学起来就更加轻松了。要学好Spring不能急，一定要把基础打牢，基础牢固了，这就是磨刀不误砍柴工。\n \n**Spring基础**\n\nSpring架构图如下\n![](/img/2013/12/spring3-jiagoutu.jpg)\n  \n \n**核心容器**：包括`Core`、`Beans`、`Context`、`EL`模块。\n\n- Core模块：封装了框架依赖的最底层部分，包括资源访问、类型转换及一些常用工具类。\n- Beans模块：提供了框架的基础部分，包括反转控制和依赖注入。其中Bean Factory是容器核心，本质是“工厂设计模式”的实现，而且无需编程实现“单例设计模式”，单例完全由容器控制，而且提倡面向接口编程，而非面向实现编程；所有应用程序对象及对象间关系由框架管理，从而真正把你从程序逻辑中把维护对象之间的依赖关系提取出来，所有这些依赖关系都由BeanFactory来维护。\n- Context模块：以Core和Beans为基础，集成Beans模块功能并添加资源绑定、数据验证、国际化、Java EE支持、容器生命周期、事件传播等；核心接口是ApplicationContext。\n- EL模块：提供强大的表达式语言支持，支持访问和修改属性值，方法调用，支持访问及修改数组、容器和索引器，命名变量，支持算数和逻辑运算，支持从Spring 容器获取Bean，它也支持列表投影、选择和一般的列表聚合等。\n \n**AOP、Aspects模块**：\n\n- AOP模块：Spring AOP模块提供了符合 AOP Alliance规范的面向方面的编程（aspect-oriented programming）实现，提供比如日志记录、权限控制、性能统计等通用功能和业务逻辑分离的技术，并且能动态的把这些功能添加到需要的代码中；这样各专其职，降低业务逻辑和通用功能的耦合。\n- Aspects模块：提供了对AspectJ的集成，AspectJ提供了比Spring ASP更强大的功能。\n \n**数据访问/集成模块**：该模块包括了JDBC、ORM、OXM、JMS和事务管理。\n\n- 事务模块：该模块用于Spring管理事务，只要是Spring管理对象都能得到Spring管理事务的好处，无需在代码中进行事务控制了，而且支持编程和声明性的事物管理。\n- JDBC模块：提供了一个JBDC的样例模板，使用这些模板能消除传统冗长的JDBC编码还有必须的事务控制，而且能享受到Spring管理事务的好处。\n- ORM模块：提供与流行的“对象-关系”映射框架的无缝集成，包括Hibernate、JPA、Ibatiss等。而且可以使用Spring事务管理，无需额外控制事务。\n- OXM模块：提供了一个对Object/XML映射实现，将java对象映射成XML数据，或者将XML数据映射成java对象，Object/XML映射实现包括JAXB、Castor、XMLBeans和XStream。\n- JMS模块：用于JMS(Java Messaging Service)，提供一套 “消息生产者、消息消费者”模板用于更加简单的使用JMS，JMS用于用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。\n- Web/Remoting模块：Web/Remoting模块包含了Web、Web-Servlet、Web-Struts、Web-Porlet模块。\n- Web模块：提供了基础的web功能。例如多文件上传、集成IoC容器、远程过程访问（RMI、Hessian、Burlap）以及Web Service支持，并提供一个RestTemplate类来提供方便的Restful services访问。\n- Web-Servlet模块：提供了一个Spring MVC Web框架实现。Spring MVC框架提供了基于注解的请求资源注入、更简单的数据绑定、数据验证等及一套非常易用的JSP标签，完全无缝与Spring其他技术协作。\n- Web-Struts模块：提供了与Struts无缝集成，Struts1.x 和Struts2.x都支持\n \n**Test模块**： Spring支持Junit和TestNG测试框架，而且还额外提供了一些基于Spring的测试功能，比如在测试Web框架时，模拟Http请求的功能。\n \n**典型应用场景**\n\nSpring可以应用到许多场景，从最简单的标准Java SE程序到企业级应用程序都能使用Spring来构建。以下介绍几个比较流行的应用场景：\n \n●典型Web应用程序应用场景：\n![](/img/2013/12/spring3-yingyongchangjing.jpg)\n\n在Web应用程序应用场景中，典型的三层架构：数据模型层实现域对象；数据访问层实现数据访问；逻辑层实现业务逻辑；web层提供页面展示；所有这些层组件都由Spring进行管理，享受到Spring事务管理、AOP等好处，而且请求唯一入口就是DispachterServlet，它通过把请求映射为相应web层组件来实现相应请求功能。\n \n●远程访问应用场景：\nSpring能非常方便的提供暴露RMI服务，远程访问服务如Hessian、Burlap等，实现非常简单只需通过在Spring中配置相应的地址及需要暴露的服务即可轻松实现；\n \n●EJB应用场景：\nSpring也可以与EJB轻松集成。\n\n##**参考学习文献**\n\n后续重温系列，如果没指明参考，默认都是以下参考。\n\n1.[跟我学spring3](http://jinnianshilongnian.iteye.com/blog/1508589)","mtime":1386556985000,"source":"_posts/重温spring3-spring概述.md"},"ck29r03jrg0949sm":{"_id":"ck29r03jrg0949sm","content":"title: 重温spring3-理解Ioc基础概念\ndate: 2013-12-09 09:33:13\ncategories:  Spring3\ntags: [spring3,Ioc]\n---\n##**IoC是什么**\n\n`Ioc—Inversion of Control`，即“控制反转”，不是什么技术，而是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。如何理解好Ioc呢？理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来深入分析一下：\n<!-- more -->\n- **谁控制谁，控制什么**：传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对象的创建；谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。\n\n- **为何是反转，哪些方面反转了**：有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。\n\n用图例说明一下，传统程序设计如下图，都是主动去创建相关对象然后再组合起来：\n![](/img/2013/12/spring3-chuangtongyingyong.jpg)\n\n当有了IoC/DI的容器后，在客户端类中不再主动去创建这些对象了，如下图所示:\n![](/img/2013/12/spring3-iocyingyong.jpg)\n\n#**IoC能做什么**\n\nIoC不是一种技术，只是一种`思想`，一个重要的面向对象编程的法则，它能指导我们如何设计出`松耦合、更优良`的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IoC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。\n\n其实IoC对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IoC/DI思想中，应用程序就变成被动的了，被动的等待IoC容器来创建并注入它所需要的资源了。\nIoC很好的体现了面向对象设计法则之一——好莱坞法则：“别找我们，我们找你”；即由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。\n \n##**IoC和DI**\n\n`DI—Dependency Injection`，即“依赖注入”：是组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。\n \n理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来深入分析一下：\n \n- 谁依赖于谁：当然是某个容器管理对象依赖于IoC容器；“被注入对象的对象”依赖于“依赖对象”；\n- 为什么需要依赖：容器管理对象需要IoC容器来提供对象需要的外部资源；\n- 谁注入谁：很明显是IoC容器注入某个对象，也就是注入“依赖对象”；\n- 注入了什么：就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。\n \nIoC和DI由什么关系呢？其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IoC 而言，“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”。","mtime":1386553762000,"source":"_posts/重温spring3-ioc基础.md"},"rom3rgcdi8h3dth7":{"_id":"rom3rgcdi8h3dth7","content":"title: 重温spring3-理解Ioc基础概念\ndate: 2013-12-09 09:33:13\ncategories:  Spring3\ntags: [spring3,Ioc]\n---\n##**IoC是什么**\n\n`Ioc—Inversion of Control`，即“控制反转”，不是什么技术，而是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。如何理解好Ioc呢？理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来深入分析一下：\n<!-- more -->\n- **谁控制谁，控制什么**：传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对象的创建；谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。\n\n- **为何是反转，哪些方面反转了**：有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。\n\n用图例说明一下，传统程序设计如下图，都是主动去创建相关对象然后再组合起来：\n![](/img/2013/12/spring3-chuangtongyingyong.jpg)\n\n当有了IoC/DI的容器后，在客户端类中不再主动去创建这些对象了，如下图所示:\n![](/img/2013/12/spring3-iocyingyong.jpg)\n\n#**IoC能做什么**\n\nIoC不是一种技术，只是一种`思想`，一个重要的面向对象编程的法则，它能指导我们如何设计出`松耦合、更优良`的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IoC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。\n\n其实IoC对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IoC/DI思想中，应用程序就变成被动的了，被动的等待IoC容器来创建并注入它所需要的资源了。\nIoC很好的体现了面向对象设计法则之一——好莱坞法则：“别找我们，我们找你”；即由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。\n \n##**IoC和DI**\n\n`DI—Dependency Injection`，即“依赖注入”：是组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。\n \n理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来深入分析一下：\n \n- 谁依赖于谁：当然是某个容器管理对象依赖于IoC容器；“被注入对象的对象”依赖于“依赖对象”；\n- 为什么需要依赖：容器管理对象需要IoC容器来提供对象需要的外部资源；\n- 谁注入谁：很明显是IoC容器注入某个对象，也就是注入“依赖对象”；\n- 注入了什么：就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。\n \nIoC和DI由什么关系呢？其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IoC 而言，“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”。","mtime":1386553762000,"source":"_posts/重温spring3-理解Ioc基础概念.md"},"r8v1rj3y7nwp1n1n":{"_id":"r8v1rj3y7nwp1n1n","content":"title: 重温spring3-理解Ioc基础\ndate: 2013-12-09 09:33:13\ncategories:  Spring3\ntags: [spring3,Ioc]\n---\n##**IoC是什么**\n\n`Ioc—Inversion of Control`，即“控制反转”，不是什么技术，而是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。如何理解好Ioc呢？理解好Ioc的关键是要明确“`谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了`”，那我们来深入分析一下：\n<!-- more -->\n- **谁控制谁，控制什么**：传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对象的创建；谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。\n\n- **为何是反转，哪些方面反转了**：有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。\n\n用图例说明一下，传统程序设计如下图，都是主动去创建相关对象然后再组合起来：\n![](/img/2013/12/spring3-chuangtongyingyong.jpg)\n\n当有了IoC/DI的容器后，在客户端类中不再主动去创建这些对象了，如下图所示:\n![](/img/2013/12/spring3-iocyingyong.jpg)\n\n#**IoC能做什么**\n\nIoC不是一种技术，只是一种`思想`，一个重要的面向对象编程的法则，它能指导我们如何设计出`松耦合、更优良`的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IoC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。\n\n其实IoC对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IoC/DI思想中，应用程序就变成被动的了，被动的等待IoC容器来创建并注入它所需要的资源了。\nIoC很好的体现了面向对象设计法则之一——好莱坞法则：“别找我们，我们找你”；即由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。\n \n##**IoC和DI**\n\n`DI—Dependency Injection`，即“依赖注入”：是组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。\n \n理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来深入分析一下：\n \n- 谁依赖于谁：当然是某个容器管理对象依赖于IoC容器；“被注入对象的对象”依赖于“依赖对象”；\n- 为什么需要依赖：容器管理对象需要IoC容器来提供对象需要的外部资源；\n- 谁注入谁：很明显是IoC容器注入某个对象，也就是注入“依赖对象”；\n- 注入了什么：就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。\n \nIoC和DI由什么关系呢？其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IoC 而言，“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”。","mtime":1386553831000,"source":"_posts/重温spring3-理解Ioc基础.md"},"bhy38cmsevj2yr0v":{"_id":"bhy38cmsevj2yr0v","content":"title: 重温spring3-IoC容器基本原理\ndate: 2013-12-09 09:51:47\ncategories: Spring3\ntags: [spring3,IoC容器]\n---\n##**IoC容器的概念**\n\n`IoC容器`就是具有`依赖注入`功能的容器，IoC容器负责实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。应用程序无需直接在代码中new相关的对象，应用程序由IoC容器进行组装。在Spring中BeanFactory是IoC容器的实际代表者。\n\nSpring IoC容器如何知道哪些是它管理的对象呢？这就需要配置文件，Spring IoC容器通过读取配置文件中的配置元数据，通过元数据对应用中的各个对象进行实例化及装配。一般使用基于xml配置文件进行配置元数据，而且Spring与配置文件完全解耦的，可以使用其他任何可能的方式进行配置元数据，比如注解、基于java文件的、基于属性文件的配置都可以。\n<!-- more -->\n那Spring IoC容器管理的对象叫什么呢？\n\n##**Bean的概念**\n\n由IoC容器管理的那些组成你应用程序的对象我们就叫它`Bean`， Bean就是*由Spring容器初始化、装配及管理的对象*，除此之外，bean就与应用程序中的其他对象没有什么区别了。那IoC怎样确定如何实例化Bean、管理Bean之间的依赖关系以及管理Bean呢？这就需要配置元数据，在Spring中由BeanDefinition代表，后边会详细介绍，配置元数据指定如何实例化Bean、如何组装Bean等。概念知道的差不多了，让我们来做个简单的例子。\n\n##**Hello World实例**\n\n本实例基于Maven创建。\n\n配置pom.xml，导入spring所需的jar。通过spring-core、springwebmvc、spring-orm即可获得12个spring包。\n\n{%codeblock lang:xml%}\n<dependency>\n\t<groupId>org.springframework</groupId>\n\t<artifactId>spring-core</artifactId>\n\t<version>3.2.5.RELEASE</version>\n</dependency>\n<dependency>\n\t<groupId>org.springframework</groupId>\n\t<artifactId>spring-webmvc</artifactId>\n\t<version>3.2.5.RELEASE</version>\n</dependency>\n<dependency>\n\t<groupId>org.springframework</groupId>\n\t<artifactId>spring-orm</artifactId>\n\t<version>3.2.5.RELEASE</version>\n</dependency>  \n{%endcodeblock%}\n\n![](/img/2013/12/spring3-hello-jar.jpg)\n\n项目框架搭建完毕，开始编写代码。\n\n首先定义一个\"sayHello\"的接口\n\n{%codeblock lang:java%}\npackage com.hanfneg.app.dao;\n\npublic interface HelloApi {\n\tpublic void sayHello();\n}\n{%endcodeblock%}\n\n实现接口的方法，输出打印信息。\n\n{%codeblock lang:java%}\npackage com.hanfneg.app.dao;\n\npublic class HelloApiImpl implements HelloApi{\n\n\t@Override\n\tpublic void sayHello() {\n\t\tSystem.out.println(\"你好，我在学习IoC\");\n\t}\n\n}\n{%endcodeblock%}\n\n接口和实现都开发好了，那如何使用Spring IoC容器来管理它们呢？这就需要配置文件，让IoC容器知道要管理哪些对象。让我们来看下配置文件helloworld.xml（放到src/main/resources目录下）：\n\n{%codeblock lang:xml%}\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txmlns:context=\"http://www.springframework.org/schema/context\" xmlns:jdbc=\"http://www.springframework.org/schema/jdbc\"  \n\txmlns:jee=\"http://www.springframework.org/schema/jee\" xmlns:tx=\"http://www.springframework.org/schema/tx\"\n\txmlns:jpa=\"http://www.springframework.org/schema/data/jpa\"\n\txsi:schemaLocation=\"\n\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd\n\t\thttp://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd\n\t\thttp://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd\n\t\thttp://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd\n\t\thttp://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd\"\n\t\t>\n\t\t\n\t<!-- id 表示你这个组件的名字，class表示组件类 -->  \n\t<bean id=\"hello\" class=\"com.hanfneg.app.dao.HelloApiImpl\"></bean>  \n\t\t\n</beans>\n{%endcodeblock%}\n\n现在万一具备，那如何获取IoC容器并完成我们需要的功能呢？首先应该实例化一个IoC容器，然后从容器中获取需要的对象，然后调用接口完成我们需要的功能，代码示例如下：\n\n{%codeblock lang:java%}\npackage com.hanfneg.app.test;\n\nimport org.junit.Test;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport com.hanfneg.app.dao.HelloApi;\n\npublic class HelloTest {\n\t\n\t@Test\n\tpublic void testHelloWorld(){\n\t\t //1、读取配置文件实例化一个IoC容器  \n\t\tApplicationContext context = new ClassPathXmlApplicationContext(\"classpath:helloworld.xml\");\n\t\t //2、从容器中获取Bean，注意此处完全“面向接口编程，而不是面向实现”  \n\t\tHelloApi helloApi = context.getBean(\"hello\",HelloApi.class);\n\t\t //3、执行业务逻辑  \n\t\thelloApi.sayHello();\n\t}\n}\n\n{%endcodeblock%}\n\n执行测试代码结果：\n\n\t2013-12-9 10:20:26 org.springframework.context.support.AbstractApplicationContext prepareRefresh\n\t信息: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@148662: startup date [Mon Dec 09 10:20:26 CST 2013]; root of context hierarchy\n\t2013-12-9 10:20:26 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\n\t信息: Loading XML bean definitions from class path resource [helloworld.xml]\n\t2013-12-9 10:20:27 org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons\n\t信息: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@126c6ea: defining beans [hello]; root of factory hierarchy\n\t你好，我在学习IoC\n\n说明程序是正确的。\n\n自此一个完整的Spring Hello World已完成，是不是很简单，让我们深入理解下容器和Bean吧。\n\n##**详解IoC容器**\n\n在Spring Ioc容器的代表就是`org.springframework.beans`包中的`BeanFactory`接口，BeanFactory接口提供了IoC容器最基本功能；而`org.springframework.context`包下的`ApplicationContext`接口扩展了BeanFactory，还提供了与`Spring AOP集成`、`国际化处理`、`事件传播`及`提供不同层次的context实现`(如针对web应用的WebApplicationContext)。简单说， BeanFactory提供了IoC容器最基本功能，而 ApplicationContext 则增加了更多支持企业级功能支持。ApplicationContext完全继承BeanFactory，因而BeanFactory所具有的语义也适用于ApplicationContext。\n\n容器实现一览：\n\n- **XmlBeanFactory**：BeanFactory实现，提供基本的IoC容器功能，可以从classpath或文件系统等获取资源；\n{%codeblock lang:java%}\nFile file = new File(\"fileSystemConfig.xml\");\nResource resource = new FileSystemResource(file);\nBeanFactory beanFactory = new XmlBeanFactory(resource);\n\nResource resource = new ClassPathResource(\"classpath.xml\");                 \nBeanFactory beanFactory = new XmlBeanFactory(resource);\n{%endcodeblock%}\n\n- **ClassPathXmlApplicationContext**：ApplicationContext实现，从classpath获取配置文件；\n{%codeblock lang:java%}\nBeanFactory beanFactory = new ClassPathXmlApplicationContext(\"classpath.xml\");\n{%endcodeblock%}\n\n- **FileSystemXmlApplicationContext**：ApplicationContext实现，从文件系统获取配置文件。\n{%codeblock lang:java%}\nBeanFactory beanFactory = new FileSystemXmlApplicationContext(\"fileSystemConfig.xml\");\n{%endcodeblock%}\n\nApplicationContext接口获取Bean方法简介：\n\n- `Object getBean(String name)` 根据名称返回一个Bean，客户端需要自己进行类型转换；\n- `T getBean(String name, Class<T> requiredType)` 根据名称和指定的类型返回一个Bean，客户端无需自己进行类型转换，如果类型转换失败，容器抛出异常；\n- `T getBean(Class<T> requiredType)` 根据指定的类型返回一个Bean，客户端无需自己进行类型转换，如果没有或有多于一个Bean存在容器将抛出异常；\n- `Map<String, T> getBeansOfType(Class<T> type)` 根据指定的类型返回一个键值为名字和值为Bean对象的 Map，如果没有Bean对象存在则返回空的Map。\n\n让我们来看下IoC容器到底是如何工作。在此我们以xml配置方式来分析一下：\n\n1.准备配置文件：就像前边Hello World配置文件一样，在配置文件中声明Bean定义也就是为Bean配置元数据。\n2.由IoC容器进行解析元数据： IoC容器的Bean Reader读取并解析配置文件，根据定义生成BeanDefinition配置元数据对象，IoC容器根据BeanDefinition进行实例化、配置及组装Bean。\n3.实例化IoC容器：由客户端实例化容器，获取需要的Bean。\n \n整个过程是不是很简单，执行过程如下图，其实IoC容器很容易使用，主要是如何进行Bean定义。下一章我们详细介绍定义Bean。\n\n![](/img/2013/12/spring3-iocrongqi.jpg)\n\n\n##**小结**\n\n除了测试程序的代码外，也就是程序入口，所有代码都没有出现Spring任何组件，而且所有我们写的代码没有实现框架拥有的接口，因而能非常容易的替换掉Spring，是不是非入侵。\n客户端代码完全面向接口编程，无需知道实现类，可以通过修改配置文件来更换接口实现，客户端代码不需要任何修改。是不是低耦合。\n如果在开发初期没有真正的实现，我们可以模拟一个实现来测试，不耦合代码，是不是很方便测试。\nBean之间几乎没有依赖关系，是不是很容易重用。\n\n\n\n","mtime":1386556767000,"source":"_posts/重温spring3-ioC容器基本原理.md"},"nzwq3qy5d59dlr95":{"_id":"nzwq3qy5d59dlr95","content":"title: 重温spring3-理解IoC基础\ndate: 2013-12-09 09:33:13\ncategories:  Spring3\ntags: [spring3,Ioc]\n---\n##**IoC是什么**\n\n`Ioc—Inversion of Control`，即“控制反转”，不是什么技术，而是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。如何理解好Ioc呢？理解好Ioc的关键是要明确“`谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了`”，那我们来深入分析一下：\n<!-- more -->\n- **谁控制谁，控制什么**：传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对象的创建；谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。\n\n- **为何是反转，哪些方面反转了**：有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。\n\n用图例说明一下，传统程序设计如下图，都是主动去创建相关对象然后再组合起来：\n![](/img/2013/12/spring3-chuangtongyingyong.jpg)\n\n当有了IoC/DI的容器后，在客户端类中不再主动去创建这些对象了，如下图所示:\n![](/img/2013/12/spring3-iocyingyong.jpg)\n\n#**IoC能做什么**\n\nIoC不是一种技术，只是一种`思想`，一个重要的面向对象编程的法则，它能指导我们如何设计出`松耦合、更优良`的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IoC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。\n\n其实IoC对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IoC/DI思想中，应用程序就变成被动的了，被动的等待IoC容器来创建并注入它所需要的资源了。\nIoC很好的体现了面向对象设计法则之一——好莱坞法则：“别找我们，我们找你”；即由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。\n \n##**IoC和DI**\n\n`DI—Dependency Injection`，即“依赖注入”：是组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。\n \n理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来深入分析一下：\n \n- 谁依赖于谁：当然是某个容器管理对象依赖于IoC容器；“被注入对象的对象”依赖于“依赖对象”；\n- 为什么需要依赖：容器管理对象需要IoC容器来提供对象需要的外部资源；\n- 谁注入谁：很明显是IoC容器注入某个对象，也就是注入“依赖对象”；\n- 注入了什么：就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。\n \nIoC和DI由什么关系呢？其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IoC 而言，“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”。","mtime":1386553914000,"source":"_posts/重温spring3-理解IoC基础.md"},"ptaqwqdxsf2mfgti":{"_id":"ptaqwqdxsf2mfgti","content":"title: 重温spring3-IoC配置\ndate: 2013-12-09 10:44:02\ncategories: Spring3\ntags: [Spring3,IoC配置]\n---\n##**XML配置的结构**\n\n一般配置结构如下：\n\n{%codeblock lang:xml%}\n<beans>  \n    <import resource=”resource1.xml”/>  \n    <bean id=”bean1”class=””></bean>  \n    <bean id=”bean2”class=””></bean>  \n<bean name=”bean2”class=””></bean>  \n    <alias alias=\"bean3\" name=\"bean2\"/>  \n    <import resource=”resource2.xml”/>  \n</beans>  \n{%endcodeblock%}\n<!-- more -->\n说明：\n\n1.`<bean>`标签主要用来进行Bean定义；\n2.`alias`用于定义Bean别名的；\n3.`import`用于导入其他配置文件的Bean定义，这是为了加载多个配置文件，当然也可以把这些配置文件构造为一个数组`(new String[] {“config1.xml”, config2.xml})`传给ApplicationContext实现进行加载多个配置文件，那一个更适合由用户决定；这两种方式都是通过调用Bean Definition Reader 读取Bean定义，内部实现没有任何区别。`<import>`标签可以放在`<beans>`下的任何位置，没有顺序关系。\n\n##**Bean的配置**\n\nSpring IoC容器目的就是管理Bean，这些Bean将根据配置文件中的Bean定义进行创建，而Bean定义在容器内部由BeanDefinition对象表示，该定义主要包含以下信息：\n\n- 全限定类名（FQN）：用于定义Bean的实现类;\n- Bean行为定义：这些定义了Bean在容器中的行为；包括作用域（单例、原型创建）、是否惰性初始化及生命周期等；\n- Bean创建方式定义：说明是通过构造器还是工厂方法创建Bean；\n- Bean之间关系定义：即对其他bean的引用，也就是依赖关系定义，这些引用bean也可以称之为同事bean 或依赖bean，也就是依赖注入。\n\nBean定义只有“全限定类名”在当使用构造器或静态工厂方法进行实例化bean时是必须的，其他都是可选的定义。难道Spring只能通过配置方式来创建Bean吗？回答当然不是，某些SingletonBeanRegistry接口实现类实现也允许将那些非BeanFactory创建的、已有的用户对象注册到容器中，这些对象必须是共享的，比如使用DefaultListableBeanFactory 的registerSingleton() 方法。不过建议采用元数据定义。\n\n##**Bean的命名**\n\n每个Bean可以有一个或多个id（或称之为标识符或名字），在这里我们把第一个id称为“标识符”，其余id叫做“别名”；这些id在IoC容器中`必须唯一`。如何为Bean指定id呢，有以下几种方式；\n\n1.不指定id，只配置必须的`全限定类名`，由IoC容器为其`生成`一个标识，客户端必须通过接口“T getBean(Class<T> requiredType)”获取Bean；\n\n{%codeblock lang:xml%}\n<bean class=\"com.hanfneg.app.dao.HelloApiImpl\"></bean>  \n{%endcodeblock%}\n\n测试代码：\n{%codeblock lang:java%}\n@Test\npublic void testHelloWord1(){\n\tBeanFactory beanFactory =  \n\t\t\t   new ClassPathXmlApplicationContext(\"classpath:helloworld.xml\");  \n\t// 根据类型获取bean\n\tHelloApi helloApi = beanFactory.getBean(HelloApi.class);\n\thelloApi.sayHello();\n}\n{%endcodeblock%}\n或者\n{%codeblock lang:java%}\n@Test\npublic void testHelloWord1(){\n\tApplicationContext context = new ClassPathXmlApplicationContext(\"classpath:helloworld.xml\");\n\t// 根据类型获取bean\n\tHelloApi helloApi = context.getBean(HelloApi.class);\n\thelloApi.sayHello();\n}\n{%endcodeblock%}\n\n2.指定id，必须在Ioc容器中唯一；\n\n代码请看helloworld实例。\n\n3.指定name，这样name就是“标识符”，必须在Ioc容器中唯一。\n\n{%codeblock lang:xml%}\n<bean name=\"hello\" class=\"com.hanfneg.app.dao.HelloApiImpl\"></bean>  \n{%endcodeblock%}\n\n测试代码和指定id一样。\n\n4.指定id和name，id就是标识符，而name就是别名，必须在Ioc容器中唯一。\n\n{%codeblock lang:xml%}\n<bean id=\"hello1\" name=\"hello2\" class=\"com.hanfneg.app.dao.HelloApiImpl\"></bean>  \n<!-- 如果id和name一样，IoC容器能检测到，并消除冲突 -->  \n<bean id=\"hello\" name=\"hello\" class=\"com.hanfneg.app.dao.HelloApiImpl\"></bean>  \n{%endcodeblock%}\n\n\n5.指定多个name，多个name用“，”、“；”、“ ”分割，第一个被用作标识符，其他的（alias1、alias2、alias3）是别名，所有标识符也必须在Ioc容器中唯一；\n{%codeblock lang:xml%}\n<bean name=” bean1;alias11,alias12;alias13 alias14”  \n      class=” cn.javass.spring.chapter2.helloworld.HelloImpl”/>     \n<!-- 当指定id时，name指定的标识符全部为别名 -->  \n<bean id=\"bean2\" name=\"alias21;alias22\"  \nclass=\"cn.javass.spring.chapter2.helloworld.HelloImpl\"/>         \n{%endcodeblock%}\n\n6.使用<alias>标签指定别名，别名也必须在IoC容器中唯一\n{%codeblock lang:xml%}\n<bean name=\"bean\" class=\"cn.javass.spring.chapter2.helloworld.HelloImpl\"/>  \n<alias alias=\"alias1\" name=\"bean\"/>  \n<alias alias=\"alias2\" name=\"bean\"/>  \n{%endcodeblock%}     \n\n从定义来看，name或id如果指定它们中的一个时都作为“标识符”，那为什么还要有id和name同时存在呢？这是因为当使用基于XML的配置元数据时，在XML中id是一个真正的XML id属性，因此当其他的定义来引用这个id时就体现出id的好处了，可以利用XML解析器来验证引用的这个id是否存在，从而更早的发现是否引用了一个不存在的bean，而使用name，则可能要在真正使用bean时才能发现引用一个不存在的bean。\n \nBean命名约定：Bean的命名遵循XML命名规范，但最好符合Java命名规范，由“字母、数字、下划线组成“，而且应该养成一个良好的命名习惯， 比如采用“驼峰式”，即第一个单词首字母开始，从第二个单词开始首字母大写开始，这样可以增加可读性。\n\n##**实例化Bean**\n\nSpring IoC容器如何实例化Bean呢？传统应用程序可以通过new和反射方式进行实例化Bean。而Spring IoC容器则需要根据Bean定义里的配置元数据使用反射机制来创建Bean。在Spring IoC容器中根据Bean定义创建Bean主要有以下几种方式：\n\n1.**使用构造器实例化Bean**：这是最简单的方式，`Spring IoC`容器即能使用默认空构造器也能使用有参数构造器两种方式创建Bean，如以下方式指定要创建的Bean类型：\n \n使用空构造器进行定义，使用此种方式，class属性指定的类必须有空构造器\n{%codeblock lang:xml%}\n<bean name=\"bean1\" class=\"cn.javass.spring.chapter2.HelloImpl2\"/>  \n{%endcodeblock%}  \n使用有参数构造器进行定义，使用此中方式，可以使用< constructor-arg >标签指定构造器参数值，其中index表示位置，value表示常量值，也可以指定引用，指定引用使用ref来引用另一个Bean定义，后边会详细介绍：\n{%codeblock lang:xml%}\n<bean name=\"bean2\" class=\"cn.javass.spring.chapter2.HelloImpl2\">  \n<!-- 指定构造器参数 -->  \n     <constructor-arg index=\"0\" value=\"Hello Spring!\"/>  \n</bean>  \n{%endcodeblock%}  \n\n知道如何配置了，让我们做个例子的例子来实践一下吧：\n（1）准备Bean class(HelloImpl2.java)，该类有一个空构造器和一个有参构造器：\n{%codeblock lang:java%}\npackage com.hanfneg.app.dao;\n\npublic class HelloImpl2 implements HelloApi {\n\n\tprivate String message;\n\n\t//无参构造函数\n\tpublic HelloImpl2() {\n\t\tthis.message = \"Hello\";\n\t}\n\n\t//有参构造函数\n\tpublic HelloImpl2(String message) {\n\t\tthis.message = message;\n\t}\n\n\t@Override\n\tpublic void sayHello() {\n\t\tSystem.out.println(message);  \n\t}\n\n}\n{%endcodeblock%} \n\n在配置文件(resources/helloword.xml)配置Bean定义，如下所示：\n\n{%codeblock lang:xml%}\n<!--使用默认构造参数-->  \n<bean name=\"bean1\" class=\"com.hanfneg.app.dao.HelloImpl2\"/>  \n\n<!--使用有参数构造参数-->     \n<bean name=\"bean2\" class=\"com.hanfneg.app.dao.HelloImpl2\">  \n\t<!-- 指定构造器参数 -->  \n    <constructor-arg index=\"0\" value=\"Hello Spring!\"/>  \n</bean>  \n{%endcodeblock%} \n\n配置完了，让我们写段测试代码（InstantiatingContainerTest）来看下是否工作吧：\n\n{%codeblock lang:java%}\n@Test\npublic void testHelloWord2(){\n\tApplicationContext context = new ClassPathXmlApplicationContext(\"classpath:helloworld.xml\");\n\t\n\tHelloApi helloApi1 = context.getBean(\"bean1\",HelloApi.class);\n\thelloApi1.sayHello();\n\tHelloApi helloApi2 = context.getBean(\"bean2\",HelloApi.class);\n\thelloApi2.sayHello();\n}\n{%endcodeblock%} \n\n输出结果：\n\n\t2013-12-9 11:34:37 org.springframework.context.support.AbstractApplicationContext prepareRefresh\n\t信息: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@1fe88d: startup date [Mon Dec 09 11:34:37 CST 2013]; root of context hierarchy\n\t2013-12-9 11:34:37 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\n\t信息: Loading XML bean definitions from class path resource [helloworld.xml]\n\t2013-12-9 11:34:38 org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons\n\t信息: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@1d709a5: defining beans [hello,bean1,bean2]; root of factory hierarchy\n\tHello\n\tHello Spring!\n\n\n2.使用`静态工厂`方式实例化Bean，使用这种方式除了指定必须的class属性，还要指定factory-method属性来指定实例化Bean的方法，而且使用静态工厂方法也允许指定方法参数，spring IoC容器将调用此属性指定的方法来获取Bean，配置如下所示：\n{%codeblock lang:java%}\npackage com.hanfneg.app.dao;\npublic class HelloApiStaticFactory {  \n    //工厂方法  \n       public static HelloApi newInstance(String message) {  \n              //返回需要的Bean实例  \n           return new HelloImpl2(message);  \n}  \n} \n{%endcodeblock%} \n\n静态工厂写完了，配置Bean定义：\n\n{%codeblock lang:xml%}\n<!-- 使用静态工厂方法 -->  \n<bean id=\"bean3\" class=\"com.hanfneg.app.dao.HelloApiStaticFactory\" factory-method=\"newInstance\">  \n     <constructor-arg index=\"0\" value=\"Hello Spring!\"/>  \n</bean> \n{%endcodeblock%} \n配置完了，写段测试代码来测试一下吧，InstantiatingBeanTest：\n{%codeblock lang:java%}\n@Test  \npublic void testInstantiatingBeanByStaticFactory() {  \n       //使用静态工厂方法  \n       BeanFactory beanFactory =  \nnew ClassPathXmlApplicationContext(\"classpath:helloworld.xml\");  \n       HelloApi bean3 = beanFactory.getBean(\"bean3\", HelloApi.class);  \n       bean3.sayHello();  \n} \n{%endcodeblock%} \n\n\n3.使用实例工厂方法实例化Bean，使用这种方式不能指定class属性，此时必须使用factory-bean属性来指定工厂Bean，factory-method属性指定实例化Bean的方法，而且使用实例工厂方法允许指定方法参数，方式和使用构造器方式一样，配置如下：\n\n实例工厂类代码（HelloApiInstanceFactory.java）如下：\n{%codeblock lang:java%}    \npackage cn.javass.spring.chapter2;  \npublic class HelloApiInstanceFactory {  \npublic HelloApi newInstance(String message) {  \n          return new HelloImpl2(message);  \n   }  \n}  \n{%endcodeblock%}    \n\n让我们在配置文件(helloworld.xml)配置Bean定义：\n \n{%codeblock lang:xml%}  \n<!—1、定义实例工厂Bean -->  \n<bean id=\"beanInstanceFactory\"  \nclass=\"com.hanfneg.app.dao.HelloApiInstanceFactory\"/>  \n<!—2、使用实例工厂Bean创建Bean -->  \n<bean id=\"bean4\"  \nfactory-bean=\"beanInstanceFactory\"  \n     factory-method=\"newInstance\">  \n <constructor-arg index=\"0\" value=\"Hello Spring!\"></constructor-arg>  \n</bean>  \n{%endcodeblock%} \n\n测试代码InstantiatingBeanTest：\n \n{%codeblock lang:java%}    \n@Test  \npublic void testInstantiatingBeanByInstanceFactory() {  \n//使用实例工厂方法  \n       BeanFactory beanFactory =  \nnew ClassPathXmlApplicationContext(\"classpath:helloworld.xml\");  \n       HelloApi bean4 = beanFactory.getBean(\"bean4\", HelloApi.class);  \n       bean4.sayHello();  \n}  \n{%endcodeblock%}  \n\n通过以上例子我们已经基本掌握了如何实例化Bean了，大家是否注意到？这三种方式只是配置不一样，从获取方式看完全一样，没有任何不同。这也是Spring IoC的魅力，Spring IoC帮你创建Bean，我们只管使用就可以了，是不是很简单。\n\n##**小结**\n\n到此我们已经讲完了Spring IoC基础部分，包括IoC容器概念，如何实例化容器，Bean配置、命名及实例化，Bean获取等等。不知大家是否注意到到目前为止，我们只能通过简单的实例化Bean，没有涉及Bean之间关系。接下来一章让我们进入配置Bean之间关系章节，也就是依赖注入。\n","mtime":1386565723000,"source":"_posts/重温spring3-ioc配置.md"},"s35q41nsrd1l0s37":{"_id":"s35q41nsrd1l0s37","content":"title: 重温sprin3-DI配置\ndate: 2013-12-09 13:14:06\ncategories: Spring3\ntags: [Spring3,DI配置]\n---\n##**依赖和依赖注入**\n\n传统应用程序设计中所说的依赖一般指“类之间的关系”，那先让我们复习一下类之间的关系：\n\n- **泛化**：表示类与类之间的继承关系、接口与接口之间的继承关系；\n- **实现**：表示类对接口的实现；\n- **依赖**：当类与类之间有使用关系时就属于依赖关系，不同于关联关系，依赖不具有“拥有关系”，而是一种“相识关系”，只在某个特定地方（比如某个方法体内）才有关系。\n- **关联**：表示类与类或类与接口之间的依赖关系，表现为“拥有关系”；具体到代码可以用实例变量来表示；\n- **聚合**：属于是关联的特殊情况，体现部分-整体关系，是一种弱拥有关系；整体和部分可以有不一样的生命周期；是一种弱关联；\n- **组合**：属于是关联的特殊情况，也体现了体现部分-整体关系，是一种强“拥有关系”；整体与部分有相同的生命周期，是一种强关联；\n<!-- more -->\nSpring IoC容器的依赖有两层含义：`Bean依赖容器`和`容器注入Bean的依赖资源`：\n\n- **Bean依赖容器**：也就是说Bean要依赖于容器，这里的依赖是指容器负责创建Bean并管理Bean的生命周期，正是由于由容器来控制创建Bean并注入依赖，也就是控制权被反转了，这也正是IoC名字的由来，此处的有依赖是指Bean和容器之间的依赖关系。\n\n- **容器注入Bean的依赖资源**：容器负责注入Bean的依赖资源，依赖资源可以是Bean、外部文件、常量数据等，在Java中都反映为对象，并且由容器负责组装Bean之间的依赖关系，此处的依赖是指Bean之间的依赖关系，可以认为是传统类与类之间的“关联”、“聚合”、“组合”关系。\n \n为什么要应用依赖注入，应用依赖注入能给我们带来哪些好处呢？\n\n- **动态替换Bean依赖对象，程序更灵活**：替换Bean依赖对象，无需修改源文件：应用依赖注入后，由于可以采用配置文件方式实现，从而能随时动态的替换Bean的依赖对象，无需修改java源文件；\n- **更好实践面向接口编程，代码更清晰**：在Bean中只需指定依赖对象的接口，接口定义依赖对象完成的功能，通过容器注入依赖实现；\n- **更好实践优先使用对象组合，而不是类继承**：因为IoC容器采用注入依赖，也就是组合对象，从而更好的实践对象组合。\n\n采用对象组合，Bean的功能可能由几个依赖Bean的功能组合而成，其Bean本身可能只提供少许功能或根本无任何功能，全部委托给依赖Bean，对象组合具有动态性，能更方便的替换掉依赖Bean，从而改变Bean功能；\n而如果采用类继承，Bean没有依赖Bean，而是采用继承方式添加新功能，，而且功能是在编译时就确定了，不具有动态性，而且采用类继承导致Bean与子Bean之间高度耦合，难以复用。\n\n- **增加Bean可复用性**：依赖于对象组合，Bean更可复用且复用更简单；\n- **降低Bean之间耦合**：由于我们完全采用面向接口编程，在代码中没有直接引用Bean依赖实现，全部引用接口，而且不会出现显示的创建依赖对象代码，而且这些依赖是由容器来注入，很容易替换依赖实现类，从而降低Bean与依赖之间耦合；\n- **代码结构更清晰**：要应用依赖注入，代码结构要按照规约方式进行书写，从而更好的应用一些最佳实践，因此代码结构更清晰。\n \n从以上我们可以看出，其实依赖注入只是一种装配对象的手段，设计的类结构才是基础，如果设计的类结构不支持依赖注入，Spring IoC容器也注入不了任何东西，从而从根本上说“`如何设计好类结构才是关键，依赖注入只是一种装配对象手段`”。\n\n前边IoC一章我们已经了解了Bean依赖容器，那容器如何注入Bean的依赖资源，Spring IoC容器注入依赖资源主要有以下两种基本实现方式：\n\n- **构造器注入**：就是容器实例化Bean时注入那些依赖，通过在在Bean定义中指定构造器参数进行注入依赖，包括实例工厂方法参数注入依赖，但静态工厂方法参数不允许注入依赖；\n- **setter注入**：通过setter方法进行注入依赖；\n- **方法注入**：能通过配置方式替换掉Bean方法，也就是通过配置改变Bean方法 功能。\n \n我们已经知道注入实现方式了，接下来让我们来看看具体配置吧。\n\n##**构造器注入**\n\n使用构造器注入通过配置构造器参数实现，构造器参数就是依赖。除了构造器方式，还有静态工厂、实例工厂方法可以进行构造器注入。如图所示：\n![](/img/2013/12/spring3-di-shilihua.jpg)\n\n构造器注入可以根据参数索引注入、参数类型注入或Spring3支持的参数名注入，但参数名注入是有限制的，需要使用在编译程序时打开调试模式（即在编译时使用“`javac –g:vars`”在class文件中生成变量调试信息，默认是不包含变量调试信息的，从而能获取参数名字，否则获取不到参数名字）或在构造器上使用`@ConstructorProperties（java.beans.ConstructorProperties）`注解来指定参数名。\n\n首先让我们准备测试构造器类HelloImpl3.java，该类只有一个包含两个参数的构造器：\n{%codeblock lang:java%}    \npackage cn.javass.spring.chapter3.helloworld;  \npublic class HelloImpl3 implements HelloApi {  \n    private String message;  \nprivate int index;  \n//@java.beans.ConstructorProperties({\"message\", \"index\"})  \n    public HelloImpl3(String message, int index) {  \n        this.message = message;  \n        this.index = index;  \n    }  \n    @Override  \n    public void sayHello() {  \n        System.out.println(index + \":\" + message);  \n    }  \n}  \n{%endcodeblock%}\n\n1.根据参数索引注入，使用标签“`<constructor-arg index=\"1\" value=\"1\"/>`”来指定注入的依赖，其中“`index`”表示索引，从0开始，即第一个参数索引为0，“`value`”来指定注入的常量值。\n![](/img/2013/12/spring3-di-canshuleixing.jpg)\n\n2.根据参数类型进行注入，使用标签“`<constructor-arg type=\"java.lang.String\" value=\"Hello World!\"/>`”来指定注入的依赖，其中“`type`”表示需要匹配的参数类型，可以是基本类型也可以是其他类型，如“`int`”、“`java.lang.String`”，“`value`”来指定注入的常量值。\n![](/img/2013/12/spring3-di-xiandingm.jpg)\n\n3.根据参数名进行注入，使用标签“``<constructor-arg name=\"message\" value=\"Hello World!\"/>`”来指定注入的依赖，其中“`name`”表示需要匹配的参数名字，“`value`”来指定注入的常量值，配置方式如下：\n![](/img/2013/12/spring3-canshuming.jpg)\n\n让我们来用具体的例子来看一下构造器注入怎么使用吧。\n\n（1）首先准备Bean类，在此我们就使用“HelloImpl3”这个类。\n（2）有了Bean类，接下来要进行Bean定义配置，我们需要配置三个Bean来完成上述三种依赖注入测试，其中Bean ”byIndex”是通过索引注入依赖；Bean ”byType”是根据类型进行注入依赖；Bean ”byName”是根据参数名字进行注入依赖。\n\n{%codeblock lang:xml%} \n<!-- 通过构造器参数索引方式依赖注入 -->  \n<bean id=\"byIndex\" class=\"com.hanfneg.app.dao.HelloImpl3\">  \n<constructor-arg index=\"0\" value=\"Hello World!\"/>  \n    <constructor-arg index=\"1\" value=\"1\"/>  \n</bean>  \n\n<!-- 通过构造器参数类型方式依赖注入 -->  \n<bean id=\"byType\" class=\"com.hanfneg.app.dao.HelloImpl3\">  \n   <constructor-arg type=\"java.lang.String\" value=\"Hello World!\"/>  \n   <constructor-arg type=\"int\" value=\"2\"/>  \n</bean>  \n\n<!-- 通过构造器参数名称方式依赖注入 -->  \n<bean id=\"byName\" class=\"com.hanfneg.app.dao.HelloImpl3\">  \n   <constructor-arg name=\"message\" value=\"Hello World!\"/>  \n   <constructor-arg name=\"index\" value=\"3\"/>  \n</bean> \n{%endcodeblock%}\n\n测试代码：\n{%codeblock lang:java%} \n@Test\npublic void testConstructorDependencyInject(){\n\t BeanFactory beanFactory =  \n\t\t\t\tnew ClassPathXmlApplicationContext(\"classpath:helloworld.xml\"); \n\t//获取根据参数索引依赖注入的Bean  \n\t HelloApi byIndex = beanFactory.getBean(\"byIndex\", HelloApi.class);  \n\t byIndex.sayHello();  \n\t //获取根据参数类型依赖注入的Bean  \n\t HelloApi byType = beanFactory.getBean(\"byType\", HelloApi.class);  \n\t byType.sayHello();  \n\t //获取根据参数名字依赖注入的Bean  \n\t HelloApi byName = beanFactory.getBean(\"byName\", HelloApi.class);  \n\t byName.sayHello(); \t \n}\n{%endcodeblock%}\n\n通过以上测试我们已经会基本的构造器注入配置了。\n\n##**setter注入**\n\nsetter注入，是通过在通过构造器、静态工厂或实例工厂实例好Bean后，通过调用Bean类的setter方法进行注入依赖，如图3-3所示：\n![](/img/2013/12/spring3-di-setter1.jpg)\n\nsetter注入方式只有一种根据setter名字进行注入：\n![](/img/2013/12/spring3-di-setter2.jpg)\n\n通过实例说明;\n{%codeblock lang:java%}\npackage com.hanfneg.app.dao;\npublic class HelloImpl4 implements HelloApi {  \n    private String message;  \n    private int index;  \n    //setter方法  \n    public void setMessage(String message) {  \n        this.message = message;  \n    }  \n    public void setIndex(int index) {  \n        this.index = index;  \n    }  \n    @Override  \n    public void sayHello() {  \n        System.out.println(index + \":\" + message);  \n    }  \n} \n{%endcodeblock%}\n\n测试代码：都是差不得，大同小异。\n{%codeblock lang:java%}\n@Test  \n\tpublic void testSetterDependencyInject() {  \n\t    BeanFactory beanFactory =  \n\tnew ClassPathXmlApplicationContext(\"classpath:helloworld.xml\");  \n\t   HelloApi bean = beanFactory.getBean(\"bean\", HelloApi.class);  \n\t    bean.sayHello();  \n\t}\n{%endcodeblock%}\n\n知道如何配置了，但Spring如何知道setter方法？如何将值注入进去的呢？其实方法名是要遵守约定的，setter注入的方法名要遵循“`JavaBean getter/setter`方法命名约定”：\n \n**JavaBean**：是本质就是一个POJO类，但具有一下限制：\n- 该类必须要有公共的无参构造器，如public HelloImpl4() {}；\n- 属性为private访问级别，不建议public，如private String message;\n- 属性必要时通过一组setter（修改器）和getter（访问器）方法来访问；\n- setter方法，以“set” 开头，后跟首字母大写的属性名，如“setMesssage”,简单属性一般只有一个方法参数，方法返回值通常为“void”;\n- getter方法，一般属性以“get”开头，对于boolean类型一般以“is”开头，后跟首字母大写的属性名，如“getMesssage”，“isOk”；\n- 还有一些其他特殊情况，比如属性有连续两个大写字母开头，如“URL”,则setter/getter方法为：“setURL”和“getURL”，其他一些特殊情况请参看“Java Bean”命名规范。\n\n##**注入集合、数组和字典**\n\nSpring不仅能注入简单类型数据，还能注入集合（Collection、无序集合Set、有序集合List）类型、数组(Array)类型、字典(Map)类型数据、Properties类型数据。\n\n##**引用其它Bean**\n\n上边章节已经介绍了注入常量、集合等基本数据类型和集合数据类型，本小节将介绍注入依赖Bean及注入内部Bean。\n\n引用其他Bean的步骤与注入常量的步骤一样，可以通过构造器注入及setter注入引用其他Bean，只是引用其他Bean的注入配置稍微变化了一下：可以将“`<constructor-arg index=\"0\" value=\"Hello World!\"/>`”和“`<property name=\"message\" value=\"Hello World!\"/>`”中的value属性替换成bean属性，其中bean属性指定配置文件中的其他Bean的id或别名。另一种是把`<value>`标签替换为`<.ref bean=”beanName”>`，bean属性也是指定配置文件中的其他Bean的id或别名。\n\n\n内容好多 直接看文献吧\n\n##**参考文献**\n1.[DI 之 3.1 DI的配置使用](http://jinnianshilongnian.iteye.com/blog/1415277)\n","mtime":1386570705000,"source":"_posts/重温sprin3-di配置.md"},"k97gaitbwixq11x7":{"_id":"k97gaitbwixq11x7","content":"title: 重温Spring3-DI后续\ndate: 2013-12-09 14:36:14\ncategories: Spring3\ntags: [Spring3,延迟初始化]\n---\n##**延迟初始化Bean**\n\n延迟初始化也叫做惰性初始化，指不提前初始化Bean，而是只有在真正使用时才创建及初始化Bean。\n\n配置方式很简单只需在`<bean>`标签上指定 “`lazy-init`” 属性值为“`true`”即可延迟初始化Bean。\n\nSpring容器会在创建容器时提前初始化“`singleton`”作用域的Bean，“singleton”就是单例的意思即整个容器每个Bean只有一个实例，后边会详细介绍。Spring容器预先初始化Bean通常能帮助我们提前发现配置错误，所以如果没有什么情况建议开启，除非有某个Bean可能需要加载很大资源，而且很可能在整个应用程序生命周期中很可能使用不到，可以设置为延迟初始化。\n<!-- more -->\n延迟初始化的Bean通常会在第一次使用时被初始化；或者在被非延迟初始化Bean作为依赖对象注入时在会随着初始化该Bean时被初始化，因为在这时使用了延迟初始化Bean。\n\n容器管理初始化Bean消除了编程实现延迟初始化，完全由容器控制，只需在需要延迟初始化的Bean定义上配置即可，比编程方式更简单，而且是无侵入代码的。\n \n{%codeblock lang:java%}\n<bean id=\"helloApi\"  \nclass=\"cn.javass.spring.chapter2.helloworld.HelloImpl\"  \nlazy-init=\"true\"/>  \n{%endcodeblock%}\n\n##**使用depends-on**\n\ndepends-on是指指定Bean初始化及销毁时的顺序，使用depends-on属性指定的Bean要先初始化完毕后才初始化当前Bean，由于只有“singleton”Bean能被Spring管理销毁，所以当指定的Bean都是“singleton”时，使用depends-on属性指定的Bean要在指定的Bean之后销毁。\n\n##**自动装配**\n\n自动装配就是指由Spring来自动地注入依赖对象，无需人工参与。\n\n目前Spring3.0支持“no”、“byName ”、“byType”、“constructor”四种自动装配，默认是“no”指不支持自动装配的，其中Spring3.0已不推荐使用之前版本的“autodetect”自动装配，推荐使用Java 5+支持的（@Autowired）注解方式代替；如果想支持“autodetect”自动装配，请将schema改为“spring-beans-2.5.xsd”或去掉。\n\n自动装配的好处是减少构造器注入和setter注入配置，减少配置文件的长度。自动装配通过配置`<bean>`标签的“autowire”属性来改变自动装配方式。接下来让我们挨着看下配置的含义。\n\n一、default：表示使用默认的自动装配，默认的自动装配需要在`<beans>`标签中使用default-autowire属性指定，其支持“no”、“byName ”、“byType”、“constructor”四种自动装配，如果需要覆盖默认自动装配，请继续往下看；\n\n二、no：意思是不支持自动装配，必须明确指定依赖。\n\n三、byName：通过设置Bean定义属性autowire=\"byName\"，意思是根据名字进行自动装配，只能用于setter注入。比如我们有方法“setHelloApi”，则“byName”方式Spring容器将查找名字为helloApi的Bean并注入，如果找不到指定的Bean，将什么也不注入。\n\n四、“byType”：通过设置Bean定义属性autowire=\"byType\"，意思是指根据类型注入，用于setter注入，比如如果指定自动装配方式为“byType”，而“setHelloApi”方法需要注入HelloApi类型数据，则Spring容器将查找HelloApi类型数据，如果找到一个则注入该Bean，如果找不到将什么也不注入，如果找到多个Bean将优先注入`<bean>`标签“primary”属性为true的Bean，否则抛出异常来表明有个多个Bean发现但不知道使用哪个。\n\n五、“constructor”：通过设置Bean定义属性autowire=\"constructor\"，功能和“byType”功能一样，根据类型注入构造器参数，只是用于构造器注入方式。\n\n六、autodetect：自动检测是使用“constructor”还是“byType”自动装配方式，已不推荐使用。如果Bean有空构造器那么将采用“byType”自动装配方式，否则使用“constructor”自动装配方式。此处要把3.0的xsd替换为2.5的xsd，否则会报错。\n\n自动装配我们已经介绍完了，自动装配能带给我们什么好处呢？首先，自动装配确实减少了配置文件的量；其次， “byType”自动装配能在相应的Bean更改了字段类型时自动更新，即修改Bean类不需要修改配置，确实简单了。\n \n自动装配也是有缺点的，最重要的缺点就是没有了配置，在查找注入错误时非常麻烦，还有比如基本类型没法完成自动装配，所以可能经常发生一些莫名其妙的错误，在此我推荐大家不要使用该方式，最好是指定明确的注入方式，或者采用最新的Java5+注解注入方式。所以大家在使用自动装配时应该考虑自己负责项目的复杂度来进行衡量是否选择自动装配方式。\n\n自动装配注入方式能和配置注入方式一同工作吗？当然可以，大家只需记住配置注入的数据会覆盖自动装配注入的数据。\n大家是否注意到对于采用自动装配方式时如果没找到合适的的Bean时什么也不做，这样在程序中总会莫名其妙的发生一些空指针异常，而且是在程序运行期间才能发现，有没有办法能在提前发现这些错误呢？接下来就让我来看下依赖检查吧。\n\n##**参考文献**\n1.[更多DI的知识](http://jinnianshilongnian.iteye.com/blog/1415461)\n","mtime":1386573576000,"source":"_posts/重温spring3-di后续.md"},"gpco14lwa2rylit1":{"_id":"gpco14lwa2rylit1","content":"title: 重温spring3-DI配置\ndate: 2013-12-09 13:14:06\ncategories: Spring3\ntags: [Spring3,DI配置]\n---\n##**依赖和依赖注入**\n\n传统应用程序设计中所说的依赖一般指“类之间的关系”，那先让我们复习一下类之间的关系：\n\n- **泛化**：表示类与类之间的继承关系、接口与接口之间的继承关系；\n- **实现**：表示类对接口的实现；\n- **依赖**：当类与类之间有使用关系时就属于依赖关系，不同于关联关系，依赖不具有“拥有关系”，而是一种“相识关系”，只在某个特定地方（比如某个方法体内）才有关系。\n- **关联**：表示类与类或类与接口之间的依赖关系，表现为“拥有关系”；具体到代码可以用实例变量来表示；\n- **聚合**：属于是关联的特殊情况，体现部分-整体关系，是一种弱拥有关系；整体和部分可以有不一样的生命周期；是一种弱关联；\n- **组合**：属于是关联的特殊情况，也体现了体现部分-整体关系，是一种强“拥有关系”；整体与部分有相同的生命周期，是一种强关联；\n<!-- more -->\nSpring IoC容器的依赖有两层含义：`Bean依赖容器`和`容器注入Bean的依赖资源`：\n\n- **Bean依赖容器**：也就是说Bean要依赖于容器，这里的依赖是指容器负责创建Bean并管理Bean的生命周期，正是由于由容器来控制创建Bean并注入依赖，也就是控制权被反转了，这也正是IoC名字的由来，此处的有依赖是指Bean和容器之间的依赖关系。\n\n- **容器注入Bean的依赖资源**：容器负责注入Bean的依赖资源，依赖资源可以是Bean、外部文件、常量数据等，在Java中都反映为对象，并且由容器负责组装Bean之间的依赖关系，此处的依赖是指Bean之间的依赖关系，可以认为是传统类与类之间的“关联”、“聚合”、“组合”关系。\n \n为什么要应用依赖注入，应用依赖注入能给我们带来哪些好处呢？\n\n- **动态替换Bean依赖对象，程序更灵活**：替换Bean依赖对象，无需修改源文件：应用依赖注入后，由于可以采用配置文件方式实现，从而能随时动态的替换Bean的依赖对象，无需修改java源文件；\n- **更好实践面向接口编程，代码更清晰**：在Bean中只需指定依赖对象的接口，接口定义依赖对象完成的功能，通过容器注入依赖实现；\n- **更好实践优先使用对象组合，而不是类继承**：因为IoC容器采用注入依赖，也就是组合对象，从而更好的实践对象组合。\n\n采用对象组合，Bean的功能可能由几个依赖Bean的功能组合而成，其Bean本身可能只提供少许功能或根本无任何功能，全部委托给依赖Bean，对象组合具有动态性，能更方便的替换掉依赖Bean，从而改变Bean功能；\n而如果采用类继承，Bean没有依赖Bean，而是采用继承方式添加新功能，，而且功能是在编译时就确定了，不具有动态性，而且采用类继承导致Bean与子Bean之间高度耦合，难以复用。\n\n- **增加Bean可复用性**：依赖于对象组合，Bean更可复用且复用更简单；\n- **降低Bean之间耦合**：由于我们完全采用面向接口编程，在代码中没有直接引用Bean依赖实现，全部引用接口，而且不会出现显示的创建依赖对象代码，而且这些依赖是由容器来注入，很容易替换依赖实现类，从而降低Bean与依赖之间耦合；\n- **代码结构更清晰**：要应用依赖注入，代码结构要按照规约方式进行书写，从而更好的应用一些最佳实践，因此代码结构更清晰。\n \n从以上我们可以看出，其实依赖注入只是一种装配对象的手段，设计的类结构才是基础，如果设计的类结构不支持依赖注入，Spring IoC容器也注入不了任何东西，从而从根本上说“`如何设计好类结构才是关键，依赖注入只是一种装配对象手段`”。\n\n前边IoC一章我们已经了解了Bean依赖容器，那容器如何注入Bean的依赖资源，Spring IoC容器注入依赖资源主要有以下两种基本实现方式：\n\n- **构造器注入**：就是容器实例化Bean时注入那些依赖，通过在在Bean定义中指定构造器参数进行注入依赖，包括实例工厂方法参数注入依赖，但静态工厂方法参数不允许注入依赖；\n- **setter注入**：通过setter方法进行注入依赖；\n- **方法注入**：能通过配置方式替换掉Bean方法，也就是通过配置改变Bean方法 功能。\n \n我们已经知道注入实现方式了，接下来让我们来看看具体配置吧。\n\n##**构造器注入**\n\n使用构造器注入通过配置构造器参数实现，构造器参数就是依赖。除了构造器方式，还有静态工厂、实例工厂方法可以进行构造器注入。如图所示：\n![](/img/2013/12/spring3-di-shilihua.jpg)\n\n构造器注入可以根据参数索引注入、参数类型注入或Spring3支持的参数名注入，但参数名注入是有限制的，需要使用在编译程序时打开调试模式（即在编译时使用“`javac –g:vars`”在class文件中生成变量调试信息，默认是不包含变量调试信息的，从而能获取参数名字，否则获取不到参数名字）或在构造器上使用`@ConstructorProperties（java.beans.ConstructorProperties）`注解来指定参数名。\n\n首先让我们准备测试构造器类HelloImpl3.java，该类只有一个包含两个参数的构造器：\n{%codeblock lang:java%}    \npackage cn.javass.spring.chapter3.helloworld;  \npublic class HelloImpl3 implements HelloApi {  \n    private String message;  \nprivate int index;  \n//@java.beans.ConstructorProperties({\"message\", \"index\"})  \n    public HelloImpl3(String message, int index) {  \n        this.message = message;  \n        this.index = index;  \n    }  \n    @Override  \n    public void sayHello() {  \n        System.out.println(index + \":\" + message);  \n    }  \n}  \n{%endcodeblock%}\n\n1.根据参数索引注入，使用标签“`<constructor-arg index=\"1\" value=\"1\"/>`”来指定注入的依赖，其中“`index`”表示索引，从0开始，即第一个参数索引为0，“`value`”来指定注入的常量值。\n![](/img/2013/12/spring3-di-canshuleixing.jpg)\n\n2.根据参数类型进行注入，使用标签“`<constructor-arg type=\"java.lang.String\" value=\"Hello World!\"/>`”来指定注入的依赖，其中“`type`”表示需要匹配的参数类型，可以是基本类型也可以是其他类型，如“`int`”、“`java.lang.String`”，“`value`”来指定注入的常量值。\n![](/img/2013/12/spring3-di-xiandingm.jpg)\n\n3.根据参数名进行注入，使用标签“``<constructor-arg name=\"message\" value=\"Hello World!\"/>`”来指定注入的依赖，其中“`name`”表示需要匹配的参数名字，“`value`”来指定注入的常量值，配置方式如下：\n![](/img/2013/12/spring3-canshuming.jpg)\n\n让我们来用具体的例子来看一下构造器注入怎么使用吧。\n\n（1）首先准备Bean类，在此我们就使用“HelloImpl3”这个类。\n（2）有了Bean类，接下来要进行Bean定义配置，我们需要配置三个Bean来完成上述三种依赖注入测试，其中Bean ”byIndex”是通过索引注入依赖；Bean ”byType”是根据类型进行注入依赖；Bean ”byName”是根据参数名字进行注入依赖。\n\n{%codeblock lang:xml%} \n<!-- 通过构造器参数索引方式依赖注入 -->  \n<bean id=\"byIndex\" class=\"com.hanfneg.app.dao.HelloImpl3\">  \n<constructor-arg index=\"0\" value=\"Hello World!\"/>  \n    <constructor-arg index=\"1\" value=\"1\"/>  \n</bean>  \n\n<!-- 通过构造器参数类型方式依赖注入 -->  \n<bean id=\"byType\" class=\"com.hanfneg.app.dao.HelloImpl3\">  \n   <constructor-arg type=\"java.lang.String\" value=\"Hello World!\"/>  \n   <constructor-arg type=\"int\" value=\"2\"/>  \n</bean>  \n\n<!-- 通过构造器参数名称方式依赖注入 -->  \n<bean id=\"byName\" class=\"com.hanfneg.app.dao.HelloImpl3\">  \n   <constructor-arg name=\"message\" value=\"Hello World!\"/>  \n   <constructor-arg name=\"index\" value=\"3\"/>  \n</bean> \n{%endcodeblock%}\n\n测试代码：\n{%codeblock lang:java%} \n@Test\npublic void testConstructorDependencyInject(){\n\t BeanFactory beanFactory =  \n\t\t\t\tnew ClassPathXmlApplicationContext(\"classpath:helloworld.xml\"); \n\t//获取根据参数索引依赖注入的Bean  \n\t HelloApi byIndex = beanFactory.getBean(\"byIndex\", HelloApi.class);  \n\t byIndex.sayHello();  \n\t //获取根据参数类型依赖注入的Bean  \n\t HelloApi byType = beanFactory.getBean(\"byType\", HelloApi.class);  \n\t byType.sayHello();  \n\t //获取根据参数名字依赖注入的Bean  \n\t HelloApi byName = beanFactory.getBean(\"byName\", HelloApi.class);  \n\t byName.sayHello(); \t \n}\n{%endcodeblock%}\n\n通过以上测试我们已经会基本的构造器注入配置了。\n\n##**setter注入**\n\nsetter注入，是通过在通过构造器、静态工厂或实例工厂实例好Bean后，通过调用Bean类的setter方法进行注入依赖，如图3-3所示：\n![](/img/2013/12/spring3-di-setter1.jpg)\n\nsetter注入方式只有一种根据setter名字进行注入：\n![](/img/2013/12/spring3-di-setter2.jpg)\n\n通过实例说明;\n{%codeblock lang:java%}\npackage com.hanfneg.app.dao;\npublic class HelloImpl4 implements HelloApi {  \n    private String message;  \n    private int index;  \n    //setter方法  \n    public void setMessage(String message) {  \n        this.message = message;  \n    }  \n    public void setIndex(int index) {  \n        this.index = index;  \n    }  \n    @Override  \n    public void sayHello() {  \n        System.out.println(index + \":\" + message);  \n    }  \n} \n{%endcodeblock%}\n\n测试代码：都是差不得，大同小异。\n{%codeblock lang:java%}\n@Test  \n\tpublic void testSetterDependencyInject() {  \n\t    BeanFactory beanFactory =  \n\tnew ClassPathXmlApplicationContext(\"classpath:helloworld.xml\");  \n\t   HelloApi bean = beanFactory.getBean(\"bean\", HelloApi.class);  \n\t    bean.sayHello();  \n\t}\n{%endcodeblock%}\n\n知道如何配置了，但Spring如何知道setter方法？如何将值注入进去的呢？其实方法名是要遵守约定的，setter注入的方法名要遵循“`JavaBean getter/setter`方法命名约定”：\n \n**JavaBean**：是本质就是一个POJO类，但具有一下限制：\n- 该类必须要有公共的无参构造器，如public HelloImpl4() {}；\n- 属性为private访问级别，不建议public，如private String message;\n- 属性必要时通过一组setter（修改器）和getter（访问器）方法来访问；\n- setter方法，以“set” 开头，后跟首字母大写的属性名，如“setMesssage”,简单属性一般只有一个方法参数，方法返回值通常为“void”;\n- getter方法，一般属性以“get”开头，对于boolean类型一般以“is”开头，后跟首字母大写的属性名，如“getMesssage”，“isOk”；\n- 还有一些其他特殊情况，比如属性有连续两个大写字母开头，如“URL”,则setter/getter方法为：“setURL”和“getURL”，其他一些特殊情况请参看“Java Bean”命名规范。\n\n##**注入集合、数组和字典**\n\nSpring不仅能注入简单类型数据，还能注入集合（Collection、无序集合Set、有序集合List）类型、数组(Array)类型、字典(Map)类型数据、Properties类型数据。\n\n##**引用其它Bean**\n\n上边章节已经介绍了注入常量、集合等基本数据类型和集合数据类型，本小节将介绍注入依赖Bean及注入内部Bean。\n\n引用其他Bean的步骤与注入常量的步骤一样，可以通过构造器注入及setter注入引用其他Bean，只是引用其他Bean的注入配置稍微变化了一下：可以将“`<constructor-arg index=\"0\" value=\"Hello World!\"/>`”和“`<property name=\"message\" value=\"Hello World!\"/>`”中的value属性替换成bean属性，其中bean属性指定配置文件中的其他Bean的id或别名。另一种是把`<value>`标签替换为`<.ref bean=”beanName”>`，bean属性也是指定配置文件中的其他Bean的id或别名。\n\n\n内容好多 直接看文献吧\n\n##**参考文献**\n1.[DI 之 3.1 DI的配置使用](http://jinnianshilongnian.iteye.com/blog/1415277)\n","mtime":1386570999000,"source":"_posts/重温spring3-di配置.md"},"cixbxzb0f3myizp9":{"_id":"cixbxzb0f3myizp9","content":"title: 重温spring3-AOP基础\ndate: 2013-12-09 15:23:59\ncategories: Spring3\ntags: [spring,AOP]\n---\n##**AOP是什么**\n\n考虑这样一个问题：需要对系统中的某些业务做日志记录，比如支付系统中的支付业务需要记录支付相关日志，对于支付系统可能相当复杂，比如可能有自己的支付系统，也可能引入第三方支付平台，面对这样的支付系统该如何解决呢？\n<!-- more -->\n传统解决方案：\n\n1.日志部分提取公共类`LogUtils`，定义“`longPayBegin`”方法用于记录支付开始日志，“`logPayEnd`”用于记录支付结果：\n![](/img/2013/12/spring3-aop-logutils.jpg)\n\n2.支付部分，定义`IPayService`接口并定义支付方法“`pay`”，并定义了两个实现：“`PointPayService`”表示积分支付，“`RMBPayService`”表示人民币支付；并且在每个支付实现中支付逻辑和记录日志：\n![](/img/2013/12/spring3-aop-playservice.jpg)\n\n3.支付实现很明显有重复代码，这个重复很明显可以使用模板设计模式消除重复：\n![](/img/2013/12/spring3-aop-playservice2.jpg)\n\n4.到此我们设计了一个可以复用的接口；但大家觉得这样记录日志会很好吗，有没有更好的解决方案？\n如果对积分支付方式添加统计功能，比如在支付时记录下用户总积分数、当前消费的积分数，那我们该如何做呢？直接修改源代码添加日志记录，这完全违背了面向对象最重要的原则之一：开闭原则（对扩展开放，对修改关闭）？\n\n更好的解决方案：在我们的支付组件中由于使用了日志组件，即日志模块横切于支付组件，在传统程序设计中很难将日志组件分离出来，即不耦合我们的支付组件；因此面向方面编程AOP就诞生了，它能分离我们的组件，使组件完全不耦合:\n\n1）采用面向方面编程后，我们的支付组件看起来如下所示，代码中不再有日志组件的任何东西；\n\n![](/img/2013/12/spring-aop-playservice.jpg)\n\n2）所以日志相关的提取到一个切面中，AOP实现者会在合适的时候将日志功能织入到我们的支付组件中去，从而完全解耦支付组件和日志组件。\n![](/img/2013/12/spring3-aop-logaspect.jpg)\n\n看到这大家可能不是很理解，没关系，先往下看。\n \n \n> 面向方面编程(AOP)：也可称为面向切面编程，是一种编程范式，提供从另一个角度来考虑程序结构从而完善面向对象编程(OOP)。\n \n在进行OOP开发时，都是基于对组件（比如类）进行开发，然后对组件进行组合，OOP最大问题就是无法解耦组件进行开发，比如我们上边举例，而AOP就是为了克服这个问题而出现的，它来进行这种耦合的分离。\n\nAOP为开发者提供一种进行横切关注点（比如日志关注点横切了支付关注点）分离并织入的机制，把横切关注点分离，然后通过某种技术织入到系统中，从而无耦合的完成了我们的功能。\n\n##**能干什么**\n\nAOP主要用于横切关注点分离和织入，因此需要理解横切关注点和织入：\n- 关注点：可以认为是所关注的任何东西，比如上边的支付组件；\n- 关注点分离：将问题细化从而单独部分，即可以理解为不可再分割的组件，如上边的日志组件和支付组件；\n- 横切关注点：一个组件无法完成需要的功能，需要其他组件协作完成，如日志组件横切于支付组件；\n- 织入：横切关注点分离后，需要通过某种技术将横切关注点融合到系统中从而完成需要的功能，因此需要织入，织入可能在编译期、加载期、运行期等进行。\n\n横切关注点可能包含很多，比如非业务的：日志、事务处理、缓存、性能统计、权限控制等等这些非业务的基础功能；还可能是业务的：如某个业务组件横切于多个模块。如图6-1\n![](/img/2013/12/spring3-aop-hengqiedian.jgp)\n\n传统支付形式，流水方式：\n![](/img/2013/12/spring3-aop-zhifu1.jpg)\n\n面向切面方式，先将横切关注点分离，再将横切关注点织入到支付系统中：\n![](/img/2013/12/spring3-aop-zhifu2.jpg)\n\n\nAOP能干什么：\n- 用于横切关注点的分离和织入横切关注点到系统；比如上边提到的日志等等；\n- 完善OOP；\n- 降低组件和模块之间的耦合性；\n- 使系统容易扩展；\n- 而且由于关注点分离从而可以获得组件的更好复用。\n\n##**基本概念**\n\n在进行AOP开发前，先熟悉几个概念：\n\n- **连接点（`Jointpoint`）**：表示需要在程序中插入横切关注点的扩展点，连接点可能是类初始化、方法执行、方法调用、字段调用或处理异常等等，Spring只支持方法执行连接点，在AOP中表示为“在哪里干”；\n- **切入点（`Pointcut`）**：选择一组相关连接点的模式，即可以认为连接点的集合，Spring支持perl5正则表达式和AspectJ切入点模式，Spring默认使用AspectJ语法，在AOP中表示为“在哪里干的集合”；\n- **通知（`Advice`）**：在连接点上执行的行为，通知提供了在AOP中需要在切入点所选择的连接点处进行扩展现有行为的手段；包括前置通知（before advice）、后置通知(after advice)、环绕通知（around advice），在Spring中通过代理模式实现AOP，并通过拦截器模式以环绕连接点的拦截器链织入通知；在AOP中表示为“干什么”；\n- **方面/切面（`Aspect`）**：横切关注点的模块化，比如上边提到的日志组件。可以认为是通知、引入和切入点的组合；在Spring中可以使用Schema和@AspectJ方式进行组织实现；在AOP中表示为“在哪干和干什么集合”；\n- **引入（`inter-type declaration`）**：也称为内部类型声明，为已有的类添加额外新的字段或方法，Spring允许引入新的接口（必须对应一个实现）到所有被代理对象（目标对象）, 在AOP中表示为“干什么（引入什么）”；\n- **目标对象（`Target Object`）**：需要被织入横切关注点的对象，即该对象是切入点选择的对象，需要被通知的对象，从而也可称为“被通知对象”；由于Spring AOP 通过代理模式实现，从而这个对象永远是被代理对象，在AOP中表示为“对谁干”；\n- **AOP代理（`AOP Proxy`）**：AOP框架使用代理模式创建的对象，从而实现在连接点处插入通知（即应用切面），就是通过代理来对目标对象应用切面。在Spring中，AOP代理可以用JDK动态代理或CGLIB代理实现，而通过拦截器模型应用切面。\n- **织入（`Weaving`）**：织入是一个过程，是将切面应用到目标对象从而创建出AOP代理对象的过程，织入可以在编译期、类装载期、运行期进行。\n\n在AOP中，通过切入点选择目标对象的连接点，然后在目标对象的相应连接点处织入通知，而切入点和通知就是切面（横切关注点），而在目标对象连接点处应用切面的实现方式是通过AOP代理对象，如图6-2所示。\n\n![](/img/2013/12/spring3-aop-gainian.jpg)\n\n接下来再让我们具体看看Spring有哪些通知类型：\n\n- **前置通知（`Before Advice`）**:在切入点选择的连接点处的方法之前执行的通知，该通知不影响正常程序执行流程（除非该通知抛出异常，该异常将中断当前方法链的执行而返回）。\n- **后置通知（`After Advice`）**:在切入点选择的连接点处的方法之后执行的通知，包括如下类型的后置通知：\n- **后置返回通知（`After returning Advice`）**:在切入点选择的连接点处的方法正常执行完毕时执行的通知，必须是连接点处的方法没抛出任何异常正常返回时才调用后置通知。\n- **后置异常通知（`After throwing Advice`）**: 在切入点选择的连接点处的方法抛出异常返回时执行的通知，必须是连接点处的方法抛出任何异常返回时才调用异常通知。\n- **后置最终通知（`After finally Advice`）**: 在切入点选择的连接点处的方法返回时执行的通知，不管抛没抛出异常都执行，类似于Java中的finally块。\n- **环绕通知（`Around Advices`）**：环绕着在切入点选择的连接点处的方法所执行的通知，环绕通知可以在方法调用之前和之后自定义任何行为，并且可以决定是否执行连接点处的方法、替换返回值、抛出异常等等。\n\n各种通知类型在UML序列图中的位置如图6-3所示：\n\n![](/img/2013/12/spring3-aop-tongzhi.jpg)\n\n##**AOP代理**\n\nAOP代理就是AOP框架通过代理模式创建的对象，Spring使用JDK动态代理或CGLIB代理来实现，Spring缺省使用JDK动态代理来实现，从而任何接口都可别代理，如果被代理的对象实现不是接口将默认使用CGLIB代理，不过CGLIB代理当然也可应用到接口。\n \n> AOP代理的目的就是将切面织入到目标对象。\n \n概念都将完了，接下来让我们看一下AOP的 HelloWorld!吧。\n\n##**参考文献**\n1.[AOP 之 6.1 AOP基础](http://jinnianshilongnian.iteye.com/blog/1418596)","mtime":1386577230000,"source":"_posts/重温spring3-aop基础.md"},"0fnkzejky0hm5gre":{"_id":"0fnkzejky0hm5gre","content":"title: 重温spring3-AOP的HelloWorld\ndate: 2013-12-09 16:30:52\ncategories: Spring3\ntags: [Spring,AOP]\n---\n##**定义目标类**\n\n定义目标接口：\n\n{%codeblock lang:java%}\npackage com.hanfeng.app.service;\npublic interface IHelloWorldService {  \n    public void sayHello();  \n}  \n{%endcodeblock%}\n<!-- more -->\n实现接口类：\n{%codeblock lang:java%}\npackage com.hanfeng.app.service;\npublic class HelloWorldService implements IHelloWorldService {  \n    @Override  \n    public void sayHello() {  \n        System.out.println(\"============Hello World!\");  \n    }  \n} \n{%endcodeblock%}\n\n  注：在日常开发中最后将业务逻辑定义在一个专门的service包下，而实现定义在service包下的impl包中，服务接口以IXXXService形式，而服务实现就是XXXService，这就是规约设计，见名知义。当然可以使用公司内部更好的形式，只要大家都好理解就可以了。\n\n##**定义切面支持类**\n\n有了目标类，该定义切面了，切面就是通知和切入点的组合，而切面是通过配置方式定义的，因此这定义切面前，我们需要定义切面支持类，切面支持类提供了通知实现：\n{%codeblock lang:java%}\npackage com.hanfeng.app.aop;\n\npublic class HelloWorldAspect {\n\t// 前置通知\n\tpublic void beforeAdvice() {\n\t\tSystem.out.println(\"===========before advice\");\n\t}\n\n\t// 后置最终通知\n\tpublic void afterFinallyAdvice() {\n\t\tSystem.out.println(\"===========after finally advice\");\n\t}\n}\n{%endcodeblock%}\n\n##**在XML中进行配置**\n\n有了通知实现，那就让我们来配置切面吧：\n\n1. 配置目标类：\n\n{%codeblock lang:xml%}\n<bean id=\"helloWorldService\" class=\"com.hanfeng.app.service.HelloWorldService\" />\n{%endcodeblock%}\n\n2.配置切面\n{%codeblock lang:xml%}\n<bean id=\"aspect\" class=\"com.hanfeng.app.aop.HelloWorldAspect\"/>  \n<aop:config>  \n<aop:pointcut id=\"pointcut\" expression=\"execution(* com.hanfeng..*.*(..))\"/>  \n    <aop:aspect ref=\"aspect\">  \n        <aop:before pointcut-ref=\"pointcut\" method=\"beforeAdvice\"/>  \n        <aop:after pointcut=\"execution(* com.hanfeng..*.*(..))\" method=\"afterFinallyAdvice\"/>  \n    </aop:aspect>  \n</aop:config>  \n{%endcodeblock%}\n\n切入点使用`<aop:config>`标签下的`<aop:pointcut>`配置，`expression`属性用于定义切入点模式，默认是AspectJ语法，“`execution(* cn.javass..*.*(..))`”表示匹配`com.hanfeng`包及子包下的任何方法执行。\n \n切面使用`<aop:config>`标签下的`<aop:aspect>`标签配置，其中“`ref`”用来引用切面支持类的方法。\n \n前置通知使用`<aop:aspect>`标签下的`<aop:before>`标签来定义，`pointcut-ref`属性用于引用切入点`Bean`，而`method`用来引用切面通知实现类中的方法，该方法就是通知实现，即在目标类方法执行之前调用的方法。\n \n最终通知使用`<aop:aspect>`标签下的`<aop:after >`标签来定义，切入点除了使用`pointcut-ref`属性来引用已经存在的切入点，也可以使用`pointcut`属性来定义，如`pointcut=\"execution(* com.hanfeng..*.*(..))`\"，`method`属性同样是指定通知实现，即在目标类方法执行之后调用的方法。\n\n3.测试程序\n\n测试类非常简单，调用被代理Bean跟调用普通Bean完全一样，Spring AOP将为目标对象创建AOP代理，具体测试代码如下：\n\n{%codeblock lang:java%}\n@Test\npublic void testHelloworld() {\n\tApplicationContext ctx = new ClassPathXmlApplicationContext(\n\t\t\t\"classpath:helloworld.xml\");\n\tIHelloWorldService helloworldService = ctx.getBean(\"helloWorldService\",\n\t\t\tIHelloWorldService.class);\n\thelloworldService.sayHello();\n}\n{%endcodeblock%}\n\n该测试将输出如下如下内容：\n\n\t2013-12-9 16:45:45 org.springframework.context.support.AbstractApplicationContext prepareRefresh\n\t信息: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@cf2c80: startup date [Mon Dec 09 16:45:45 CST 2013]; root of context hierarchy\n\t2013-12-9 16:45:45 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\n\t信息: Loading XML bean definitions from class path resource [helloworld.xml]\n\t2013-12-9 16:45:46 org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons\n\t信息: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@1342ba4: defining beans [hello,bean1,bean2,bean3,byIndex,byType,byName,bean,helloWorldService,aspect,org.springframework.aop.config.internalAutoProxyCreator,pointcut,org.springframework.aop.aspectj.AspectJPointcutAdvisor#0,org.springframework.aop.aspectj.AspectJPointcutAdvisor#1]; root of factory hierarchy\n\t===========before advice\n\t============Hello World!\n\t===========after finally advice\n\n从输出我们可以看出：前置通知在切入点选择的连接点（方法）之前允许，而后置通知将在连接点（方法）之后执行，具体生成AOP代理及执行过程如图6-4所示。\n![](/img/2013/12/spring3-aop-guocheng.jpg)\n\n##**参考文献**\n1.[AOP 之 6.2 AOP的HelloWorld](http://jinnianshilongnian.iteye.com/blog/1418597)\n","mtime":1386579982000,"source":"_posts/重温spring3-aop的helloworld.md"},"6wfa3w1rcyqq517j":{"_id":"6wfa3w1rcyqq517j","content":"title: springside4笔记5-整合shiro\ndate: 2013-12-10 10:46:48\ncategories: SpringSide4\ntags: [Spring,SpringSide4,shiro]\n---\n##**web.xml**\n\n首先是在web.xml加入shiro配置。\n\n代码：\n{%codeblock lang:xml%}\n<!-- 配置Shiro过滤器,先让Shiro过滤系统接收到的请求 -->  \n<!-- 这里filter-name必须对应applicationContext.xml中定义的<bean id=\"shiroFilter\"/> -->  \n<!-- 使用[/*]匹配所有请求,保证所有的可控请求都经过Shiro的过滤 -->  \n<!-- 通常会将此filter-mapping放置到最前面(即其他filter-mapping前面),以保证它是过滤器链中第一个起作用的 -->  \n<filter>\n\t<filter-name>shiroFilter</filter-name>\n\t<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\n\t<init-param>\n\t  <!-- 该值缺省为false,表示生命周期由SpringApplicationContext管理,设置为true则表示由ServletContainer管理 -->  \n\t\t<param-name>targetFilterLifecycle</param-name>\n\t\t<param-value>true</param-value>\n\t</init-param>\n</filter>\n<filter-mapping>\n\t<filter-name>shiroFilter</filter-name>\n\t<url-pattern>/*</url-pattern>\n</filter-mapping>\n{%endcodeblock%}\n<!-- more -->\n\n##**applicationContext-shiro.xml**\n\n该配置文件主要是对Shiro安全配置。\n{%codeblock lang:xml%}\n<!-- Shiro's main business-tier object for web-enabled applications -->\n<bean id=\"securityManager\" class=\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\">\n\t<property name=\"realm\" ref=\"shiroDbRealm\" />\n\t<property name=\"cacheManager\" ref=\"shiroEhcacheManager\" />\n</bean>\n{%endcodeblock%}\n\n继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java\n\n{%codeblock lang:xml%}\n<!-- 項目自定义的Realm, 所有accountService依赖的dao都需要用depends-on声明 -->\n<bean id=\"shiroDbRealm\" class=\"org.springside.examples.quickstart.service.account.ShiroDbRealm\" depends-on=\"userDao,taskDao\">\n\t<property name=\"accountService\" ref=\"accountService\"/>\n</bean>\n{%endcodeblock%}\n\n用户授权信息Cache, 采用EhCache\n\n{%codeblock lang:xml%}\n<!-- 用户授权信息Cache, 采用EhCache -->\n<bean id=\"shiroEhcacheManager\" class=\"org.apache.shiro.cache.ehcache.EhCacheManager\">\n\t<property name=\"cacheManagerConfigFile\" value=\"classpath:ehcache/ehcache-shiro.xml\"/>\n</bean>\n{%endcodeblock%}\n\n配置Shiro过滤器\n\n{%codeblock lang:xml%}\n<!-- Shiro Filter -->\n<bean id=\"shiroFilter\" class=\"org.apache.shiro.spring.web.ShiroFilterFactoryBean\">\n\t<property name=\"securityManager\" ref=\"securityManager\" />\n\t<property name=\"loginUrl\" value=\"/login\" />\n\t<property name=\"successUrl\" value=\"/\" />\n\t<property name=\"filterChainDefinitions\">\n\t\t<value>\n\t\t\t/login = authc\n\t\t\t/logout = logout\n\t\t\t/static/** = anon\n\t\t\t/api/** = anon\n\t\t\t/register/** = anon\n\t\t\t/admin/** = roles[admin]\n\t\t\t/** = user\n\t\t</value>\n\t</property>\n</bean>\n{%endcodeblock%}\n\n{%codeblock lang:xml%}\n<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->\n<bean id=\"lifecycleBeanPostProcessor\" class=\"org.apache.shiro.spring.LifecycleBeanPostProcessor\"/>\n{%endcodeblock%}\n\n\n","mtime":1386644981000,"source":"_posts/springside4笔记5-整合shiro.md"},"q9gvskvobxh5oi88":{"_id":"q9gvskvobxh5oi88","content":"title: 重温spring3-JDBC支持\ndate: 2013-12-10 09:42:32\ncategories: Spring3\ntags: [spring3,jdbc]\n---\n##**JDBC回顾**\n\n传统应用程序开发中，需要编写如此代码：\n\n{%codeblock lang:java%}\n@Test  \npublic void test() throws Exception {  \n    Connection conn = null;  \n    PreparedStatement pstmt = null;  \n    try {  \n      conn = getConnection();              //1.获取JDBC连接  \n                                       //2.声明SQL  \n      String sql = \"select * from INFORMATION_SCHEMA.SYSTEM_TABLES\";  \n      pstmt = conn.prepareStatement(sql);    //3.预编译SQL  \n      ResultSet rs = pstmt.executeQuery();   //4.执行SQL  \n      process(rs);                       //5.处理结果集  \n      closeResultSet(rs);                 //5.释放结果集  \n      closeStatement(pstmt);              //6.释放Statement  \n      conn.commit();                    //8.提交事务  \n    } catch (Exception e) {  \n      //9.处理异常并回滚事务  \n      conn.rollback();  \n      throw e;  \n    } finally {  \n      //10.释放JDBC连接，防止JDBC连接不关闭造成的内存泄漏  \n      closeConnection(conn);  \n    }  \n}  \n{%endcodeblock%}\n<!-- more -->\n 以上代码片段具有冗长、重复、容易忘记某一步骤从而导致出错、显示控制事务、显示处理受检查异常等等。\n\n有朋友可能重构出自己的一套JDBC模板，从而能简化日常开发，但自己开发的JDBC模板不够通用，而且对于每一套JDBC模板实现都差不多，从而导致开发人员必须掌握每一套模板。\n\nSpring JDBC提供了一套JDBC抽象框架，用于简化JDBC开发，而且如果各个公司都使用该抽象框架，开发人员首先减少了学习成本，直接上手开发，如图7-1所示。\n![](/img/2013/12/spring-jdbc-duibi.jpg)\n\n##**Spring对JDBC的支持**\n\nSpring通过抽象JDBC访问并提供一致的API来简化JDBC编程的工作量。我们只需要声明SQL、调用合适的Spring JDBC框架API、处理结果集即可。事务由Spring管理，并将JDBC受查异常转换为Spring一致的非受查异常，从而简化开发。\n\nSpring主要提供`JDBC模板方式`、`关系数据库对象化方式`和`SimpleJdbc方式`三种方式来简化JDBC编程，这三种方式就是Spring JDBC的工作模式：\n\n- **JDBC模板方式**：Spring JDBC框架提供以下几种模板类来简化JDBC编程，实现GoF模板设计模式，将可变部分和非可变部分分离，可变部分采用回调接口方式由用户来实现：如`JdbcTemplate`、`NamedParameterJdbcTemplate`、`SimpleJdbcTemplate`。\n- **关系数据库操作对象化方式**：Spring JDBC框架提供了将关系数据库操作对象化的表示形式，从而使用户可以采用面向对象编程来完成对数据库的访问；如`MappingSqlQuery`、`SqlUpdate`、`SqlCall`、`SqlFunction`、`StoredProcedure`等类。这些类的实现一旦建立即可重用并且是线程安全的。\n- **SimpleJdbc方式**：Spring JDBC框架还提供了SimpleJdbc方式来简化JDBC编程，`SimpleJdbcInsert`、 `SimpleJdbcCall`用来简化数据库表插入、存储过程或函数访问。\n\nSpring JDBC还提供了一些强大的工具类，如DataSourceUtils来在必要的时候手工获取数据库连接等。\n\n##**Spring的JDBC架构**\n\nSpring JDBC抽象框架由四部分组成：`datasource`、`support`、`core`、`object`。如图7-2所示。\n \n ![](/img/2013/12/spring3-jdbc-jiagou.jpg)\n\n- **support包**：提供将JDBC异常转换为DAO非检查异常转换类、一些工具类如JdbcUtils等。\n- **datasource包**：提供简化访问JDBC 数据源（javax.sql.DataSource实现）工具类，并提供了一些DataSource简单实现类从而能使从这些DataSource获取的连接能自动得到Spring管理事务支持。\n- **core包**：提供JDBC模板类实现及可变部分的回调接口，还提供SimpleJdbcInsert等简单辅助类。\n- **object包**：提供关系数据库的对象表示形式，如MappingSqlQuery、SqlUpdate、SqlCall、SqlFunction、StoredProcedure等类，该包是基于core包JDBC模板类实现。","mtime":1386640301000,"source":"_posts/重温spring3-jdbc支持.md"},"xqvgkehplw1aakcl":{"_id":"xqvgkehplw1aakcl","content":"title: 重温spring3-JDBC模板类\ndate: 2013-12-10 09:55:19\ncategories: Spring3\ntags: [Spring3,JDBC,模板类]\n---\n##**概述**\n\n`Spring JDBC`抽象框架core包提供了JDBC模板类，其中`JdbcTemplate`是core包的核心类，所以其他模板类都是基于它封装完成的，JDBC模板类是第一种工作模式。\n \nJdbcTemplate类通过模板设计模式帮助我们消除了冗长的代码，只做需要做的事情（即可变部分），并且帮我们做哪些固定部分，如连接的创建及关闭。\n <!-- more -->\nJdbcTemplate类对可变部分采用回调接口方式实现，如`ConnectionCallback`通过回调接口返回给用户一个连接，从而可以使用该连接做任何事情、`StatementCallback`通过回调接口返回给用户一个Statement，从而可以使用该Statement做任何事情等等，还有其他一些回调接口如图7-3所示。\n![](/img/2013/12/spring3-jdbc-mubanlei.jpg)\n\nSpring除了提供JdbcTemplate核心类，还提供了基于JdbcTemplate实现的`NamedParameterJdbcTemplate`类用于支持命名参数绑定、 `SimpleJdbcTemplate`类用于支持Java5+的可变参数及自动装箱拆箱等特性。\n\n##**传统JDBC编程替代方案**\n\n前边我们已经使用过传统JDBC编程方式，接下来让我们看下Spring JDBC框架提供的更好的解决方案。\n\n在使用JdbcTemplate模板类时必须通过DataSource获取数据库连接，Spring JDBC提供了DriverManagerDataSource实现，它通过包装“`DriverManager.getConnection`”获取数据库连接，","mtime":1386641348000,"source":"_posts/重温spring3-jdbc模板类.md"},"zs4lbg5hoxd5oyff":{"_id":"zs4lbg5hoxd5oyff","content":"title: Win7 64 bit 安装 Oracle 11gR2\ndate: 2013-12-10 16:00:34\ncategories: 程序人生\ntags: [Oracle 11g R2,win7 64Bit,Oracle 安装]\n---\n\n最近准备学习Oracle，因为机器是win7 64 Bit，所以就去官网下载64bit的oracle。\n\n我下载的版本是：Oracle 11g R2 64 Bit\n\n官网地址：[http://www.oracle.com/technetwork/database/enterprise-edition/downloads/index.html](http://www.oracle.com/technetwork/database/enterprise-edition/downloads/index.html)\n\n下载2个压缩包：`win64_11gR2_database_1of2` 和 `win64_11gR2_database_2of2`\n\n可以从我的百度网盘下载，速度很快。\n\n链接: [http://pan.baidu.com/s/1pbC7L](http://pan.baidu.com/s/1pbC7L) 密码: `itfs`<!-- more -->\n\n1. 解压`win64_11gR2_database_1of2` 和 `win64_11gR2_database_2of2`到同一个文件夹，即合并。\n\n2. 进入解压合并后的文件夹，右键击`setup.exe`选择以管理员运行程序，启动安装。\n![](/img/2013/12/win764-install-oracle1.jpg)\n\n3.在出现的“配置安全更新”窗口中，取消“我希望通过My Oracle Support接受安全更新”，单击“下一步”：\n![](/img/2013/12/win764-install-oracle2.jpg)\n\n不需要提供邮件，不然会出现错误信息`[INS-08109] 验证状态 'getOCMDetails' 的输入时出现意外错误。`。一般没必要。\n\n4.在“安装选项”窗口中，选择“创建和配置数据库”，单击“下一步”： \n![](/img/2013/12/win764-install-oracle3.jpg)\n\n5.在“系统类”窗口中，选择“桌面类”，单击“下一步”：\n![](/img/2013/12/win764-install-oracle4.jpg)\n\n6.在“典型安装”窗口中，选择Oracle的基目录，选择“企业版”和“默认值”并输入统一的密码为：`Oracle11g`，单击“下一步”： \n![](/img/2013/12/win764-install-oracle5.jpg)\n\n7.在“先决条件检查”窗口中，单击“下一步”： \n![](/img/2013/12/win764-install-oracle6.jpg)\n\n8.在“概要”窗口中，单击“完成”，即可进行安装： \n![](/img/2013/12/win764-install-oracle7.jpg)\n\n9.出现的安装过程如下：\n![](/img/2013/12/win764-install-oracle8.jpg)\n\n10.数据库创建完成后，会出现如下“Database Configuration Assistant”界面： \n![](/img/2013/12/win764-install-oracle9.jpg)\n\n11.选择“口令管理”，查看并修改以下用户：\n- 普通管理员：SYSTEM（密码：manager）\n- 超级管理员：SYS（密码：change_on_install）\n修改完成后，单击“确定”。\n\n12.在“完成”窗口中，单击“关闭”即可。 \n![](/img/2013/12/win764-install-oracle10.jpg)\n\n13.通过下面这个地址即可进入oracle登陆界面：\nEnterprise Manager Database Control URL - (orcl) :\nhttps://localhost:1158/em\n![](/img/2013/12/win764-install-oracle11.jpg)\n\n\n##**安装PL/SQL Developer**\n\n1.下载 instantclient-basic-win32-11.2.0.1.0.zip \n\n2.解压到D:\\app\\目录\n\n3.拷贝数据库安装根目录下的一个目录`D:\\Oracle\\app\\hanfeng\\product\\11.2.0\\dbhome_1\\NETWORK`到Oracle客户端目录下`D:\\Oracle\\app\\hanfeng\\product\\instantclient_11_2`\n\n4.安装 PL/SQL Developer，在perference->Connection里面设置`OCI Library`和`Oracle_Home`，例如本机设置为：\n- Oracle Home ：`D:\\Oracle\\app\\hanfeng\\product\\instantclient_11_2`\n- OCI Library ：`D:\\Oracle\\app\\hanfeng\\product\\instantclient_11_2\\oci.dll`\n\n5.添加环境变量\n\n系统变量中添加2个：\n第一个是指向TNS文件所在目录的，这个目录是你安装的64位版本Oracle的TNS文件所在目录。TNS文件就是保存了连接信息的文件。\n\n\tTNS_ADMIN  值： E:\\app\\hanfeng\\product\\11.2.0\\dbhome_1\\NETWORK\\ADMIN\n\n第二个是指定数据库使用的编码。如果不设置成以下值，那么连接上数据库后，你看到的所有中文的内容将会是乱码，都是一堆问号。\n\n\tNLS_LANG  值：SIMPLIFIED CHINESE_CHINA.ZHS16GBK\n\n启动 PL/SQL Developer即可。\n\n\n\n\n\n\n\n\n\n\n\n\n","mtime":1386666760000,"source":"_posts/win7-64-bit-安装-oracle-11gr2.md"},"290ghx98bpgi3cca":{"_id":"290ghx98bpgi3cca","content":"title: 1.PHP概述\ndate: 2013-12-11 12:23:22\ncategories: PHP5\ntags: [php5,php学习]\n---\n##**PHP简介：**\n\n`PHP`，是英文超级文本预处理语言`Hypertext Preprocessor`的缩写。PHP 是一种`HTML`内嵌式的语言，是一种在服务器端执行的嵌入HTML文档的脚本语言，语言的风格有类似于C语言，被广泛的运用。PHP 独特的语法混合了 C、Java、Perl 以及 PHP 自创的语法。它可以比 CGI或者Perl更快速的执行动态网页。用PHP做出的动态页面与其他的编程语言相比，PHP是将程序嵌入到HTML文档中去执行，执行效率比完全生成HTML标记的CGI要高许多；PHP还可以执行编译后代码，编译可以达到加密和优化代码运行，使代码运行更快。PHP具有非常强大的功能，所有的CGI的功能PHP都能实现，而且支持几乎所有流行的数据库以及操作系统。最重要的是PHP可以用C、C++进行程序的扩展！\n<!-- more -->\n##**PFP的发展：**\n\nPHP原始为`Personal Home Page`的缩写，现已经正名为 \"`PHP: Hypertext Preprocessor`\"的缩写，注意不是“`Hypertext Preprocessor`”的缩写，这种将名称放到定义中的写法被称作递归缩写。PHP于19 94年由Rasmus Lerdorf创建，刚刚开始是Rasmus Lerdorf 为了要维护个人网页而制作的一个简单的用Perl语言编写的程序。最初这些工具程序用来显示 Rasmus Lerdorf 的个人履历，以及统计网页流量。后来又用C语言重新编写，包括可以访问数据库。他将这些程序和一些表单直译器整合起来，称为 PHP/FI。PHP/FI 可以和数据库连接，产生简单的动态网页程序。在1995年早期以Personal Home Page Tools (PHP Tools) 开始对外发表第一个版本，Lerdorf写了一些介绍此程序的文档，并且发布了PHP1.0。在这早期的版本中，提供了访客留言本、访客计数器等简单的功能。\n\n以后越来越多的网站使用了PHP，并且强烈要求增加一些特性，比如循环语句和数组变量等等，在新的成员加入开发行列之后，Rasmus Lerdorf 在1995年6月8日将 PHP/FI 公开发布，希望可以透过社群来加速程序开发与寻找错误。这个发布的版本命名为 PHP 2，已经有今日 PHP 的一些雏型，像是类似 Perl 的变量命名方式、表单处理功能、以及嵌入到 HTML 中执行的能力。程序语法上也类似 Perl，有较多的限制，不过更简单、更有弹性。PHP/FI加入了对mySQL的支持，从此建立了PHP在动态网页开发上的地位。到了1996年底，有15000个网站使用 PHP/FI；在1997年，任职于 Technion IIT 公司的两个以色列程序设计师：Zeev Suraski 和 Andi Gutmans，重写了 PHP 的剖析器，成为 PHP 3 的基础，而 PHP 也在这个时候改称为PHP: Hypertext Preprocessor.[5]。\n\n经过几个月测试，开发团队在1997年11月发布了 PHP/FI 2，随后就开始 PHP 3 的开放测试，最后在1998年6月正式发布 PHP 3。Zeev Suraski 和 Andi Gutmans 在PHP3 发布后开始改写 PHP 的核心，这个在1999年发布的剖析器称为 Zend Engine[7]，他们也在以色列的 Ramat Gan 成立了 Zend Technologies 来管理 PHP 的开发。在2000年5月22日，以Zend Engine 1.0为基础的PHP 4正式发布，2004年7月13日则发布了PHP 5，PHP 5则使用了第二代的Zend Engine[5]。PHP包含了许多新特色，像是强化的面向对象功能、引入PDO（PHP Data Objects，一个存取数据库的延伸函数库）、以及许多效能上的增强。目前PHP 4已经不会继续更新，以鼓励用户转移到PHP 5。2008年PHP 5成为了PHP唯一的有在开发的PHP版本。将来的PHP 5.3将会加入Late static binding和一些其他的功能强化。PHP 6 的开发也正在进行中，主要的改进有移除register_globals、magic quotes 和 Safe mode的功能。\n\n##**PHP的特性：**\n\nPHP的特性包括：\n\n1.开放的源代码：所有的PHP源代码事实上都可以得到。\n2.PHP是免费的。和其它技术相比，PHP本身免费。\n3.php的快捷性 程序开发快，运行快，技术本身学习快。嵌入于HTML：因为PHP可以被嵌入于HTML语言，它相对于其他语言，编辑简单，实用性强，更适合初学者。\n4.跨平台性强：由于PHP是运行在服务器端的脚本,可以运行在UNIX、LINUX、WINDOWS下。\n5.效率高：PHP消耗相当少的系统资源。\n6.图像处理：用PHP动态创建图像。\n7.面向对象：在php4,php5 中，面向对象方面都有了很大的改进，现在php完全可以用来开发大型商业程序。\n8.专业专注：PHP支持脚本语言为主，同为类C语言。","mtime":1386736040000,"source":"_posts/1php概述.md"},"ao6lh2jgkh1hte0d":{"_id":"ao6lh2jgkh1hte0d","content":"title: 2.LAMP网站开发组合\ndate: 2013-12-11 12:37:15\ncategories: PHP5\ntags: [php5,LAMP,网站开发组合]\n---\n##**概述：**\n\n　**LAMP**（`Linux-Apache-MySQL-PHP`）网站架构是目前国际流行的Web框架，该框架包括：`Linux操作系统`，`Apache网络服务器`，`MySQL数据库`，Perl、PHP或者Python编程语言，所有组成产品均是开源软件，是国际上成熟的架构框架，很多流行的商业应用都是采取这个架构，和Java/J2EE架构相比，LAMP具有Web资源丰富、轻量、快速开发等特点，微软的.NET架构相比，LAMP具有通用、跨平台、高性能、低价格的优势，因此LAMP无论是性能、质量还是价格都是企业搭建网站的首选平台。\n\n<!-- more -->\n\n##**Linux操作系统**\n\nLinux操作系统有很多个不同的发行版，如`Red Hat Enterprise Linux`、`SUSE Linux Enterprice`、`Debian`、`Ubuntu`、`CentOS`、`Fedora\t等，每一个发行版都有自己的特色，比如RHEL的稳定，Ubuntu的易用，基于稳定性和性能的考虑，操作系统选择CentOS（Community ENTerprise Operating System）是一个理想的方案。\n\nCentOS（Community ENTerprise Operating System）是Linux发行版之一，是RHEL/Red Hat Enterprise Linux的精简免费版，和RHEL为同样的源代码，不过，RHEL和SUSE LE等企业版，提供的升级服务均是收费升级，无法免费在线升级，因此要求免费的高度稳定性的服务器可以用CentOS替代Red Hat Enterprise Linux使用。\n<!-- more -->\nLAMP在组合就是在Linux操作系统上配置Apache服务器、Mysql服务器、PHP应用程序服务器，组成强大的web开发平台。\n##**Apache网络服务器**\n\nApache HTTP Server是Apache软件基金会的一个开放源代码的网页服务器，可以在大多数电脑操作系统中运行，由于其跨平台和安全性。被广泛使用，是最流行的Web服务器端软件之一。它快速、可靠并且可通过简单的API扩充，将Perl／Python等解释器编译到服务器中。\n\n官网：[http://www.apache.org/](http://www.apache.org/)\n##**MySQL数据库**\n\nMySQL是一个关系型数据库管理系统，由瑞典MySQL AB公司开发，目前属于Oracle公司。MySQL是一种关联数据库管理系统，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。MySQL所使用的SQL语言是用于访问数据库的最常用标准化语言。MySQL软件采用了双授权政策，它分为`社区版`和`商业版`，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择MySQL作为网站数据库。由于其社区版的性能卓越，搭配PHP和Apache可组成良好的开发环境。\n\n官网：[http://dev.mysql.com/downloads/](http://dev.mysql.com/downloads/)\n##**PHP编程语言**\nPHP（全称：PHP：Hypertext Preprocessor，即“PHP：超文本预处理器”）是一种开源的通用计算机脚本语言，尤其适用于网络开发并可嵌入HTML中使用。PHP的语法借鉴吸收了C语言、Java和Perl等流行计算机语言的特点，易于一般程序员学习。PHP的主要目标是允许网络开发人员快速编写动态页面，但PHP也被用于其他很多领域。\n\nPHP最初是由勒多夫在1995年开始开发的。而现在PHP的标准由PHP Group和开放源代码社区维护。PHP以PHP License作为许可协议，不过因为这个协议限制了PHP名称的使用，所以和开放源代码许可协议GPL不兼容\n\nPHP的应用范围相当广泛，尤其是在网页程序的开发上。一般来说PHP大多运行在网页服务器上，通过运行PHP代码来产生用户浏览的网页。PHP可以在多数的服务器和操作系统上运行，而且使用PHP完全是免费的。根据2007年4月的统计数据，PHP已经被安装在超过2000万个网站和100万台服务器上。\n\n官网：[http://php.net/](http://php.net/)\n\n","mtime":1386737346000,"source":"_posts/2lamp网站开发组合.md"},"3syprxm1ptr34z2i":{"_id":"3syprxm1ptr34z2i","content":"title: 3.PHP开发环境\ndate: 2013-12-11 12:50:39\ncategories: PHP5\ntags: [PHP5,开发环境]\n---\n为了快速学习PHP，就不准备自己缓慢的去搭建一个完善的开发环境，直接使用集成环境哈。\n\n目前网上PHP集成环境主要有AppServ、WAMP、XAMPP等。这些都差不多吧，我使用的是WAMP集成环境。\n\n下载官网：[http://www.wampserver.com/en/](http://www.wampserver.com/en/)\n<!-- more -->\n安装步骤很简单，一键下去就可以啦。不懂得自行google。\n\n启动WAMP，查看右键任务栏的图标是否为绿色，绿色表示启动成功。在浏览器输入`http://localhost/`,出现如下页面，表示安装成功。\n![](/img/2013/12/php5-pic2.jpg)\n\n通过phpinfo()函数测试PHP环境是否可以正常运行。如下图，表示环境正常，可以进行下一步开发了。\n![](/img/2013/12/php5-pic1.jpg)\n\nphpinfo()函数作用是输出有关PHP当前状态的大部分信息内容，包括关于PHP的编译和扩展信息、php版本、服务器信息和环境、php环境、php当前所安装的扩展模块、操作系统信息、路径、主要的和本地配置选项的值、HTTP头信息和PHP的许可。\n\n启用PHPMyAdmin的HTTP身份验证。\n\n修改config.inc.php文件。\n\n\t$cfg['Servers'][$i]['auth_type'] = 'cookie';\n\n更改为\n\n\t$cfg['Servers'][$i]['auth_type'] = 'cookie';\n\n这样登陆phpMyAdmin就需要输入账号和密码进行验证。\n\n修改phpMyAdmin默认的空密码为：`123456`\n\n\tupdate user set password=password('123456') where User='root'\n\n然后在修改config.inc.php文件\n\n\t$cfg['Servers'][$i]['AllowNoPassword'] = true;\n更改为\n\n\t$cfg['Servers'][$i]['AllowNoPassword'] = false;\n\n这样就完成了环境的配置过程。\n","mtime":1386738931000,"source":"_posts/3php开发环境.md"},"vve4utc5yfl3ruf8":{"_id":"vve4utc5yfl3ruf8","content":"title: 4.PHP基础-基本语法\ndate: 2013-12-11 13:18:50\ncategories: PHP5\ntags: [PHP5,基础语法]\n---\n##**推荐在线教程：**\n\n1.官方手册：[http://php.net/manual/zh/index.php](http://php.net/manual/zh/index.php)\n\n2.PHP之道：[http://wulijun.github.io/php-the-right-way/](http://wulijun.github.io/php-the-right-way/)\n\n##**PHP语法标记**\n\n用`<?php`来表示PHP标识符的起始，然后放入PHP语句并通过加上一个终止标识符`?>`来退出PHP模式。\n\nPHP输入嵌入式脚本语言，可以嵌入到HTML中和HTML一起使用。\n\n当PHP解析一个文件时，会寻找开始和结束的标记，标记告诉PHP开始和停止解释其中的代码。标记之外的代码会被PHP解析器忽略。\n\n该风格是标准风格的标记，属于XML风格，推荐使用，规范化代码格式，其他可以忽略。\n<!-- more -->\n\n##**指令分割符`;`**\n\nPHP语句分为2种：\n\n1.在程序中使用结构定义语句，例如流程控制、函数定义、类定义等，是用来定义结构程序使用的语句，在结构定义语句后面不能使用分号作为结束。\n2.在程序中使用功能执行语句，例如变量的声明、内容的输出、函数的调用等，是用来在程序中执行某些特定功能的语句，这些语句也称为指令，需要使用分号结束。\n\n##**程序注释**\n\n1.多行注释：以`/*`开始和以`*/`结束,可以注释多行代码。注释无法嵌套使用。\n\n2.单行注释：以`//`开始即可。\n\n如下：\n{%codeblock lang:php%}\n<?php\n\t/*\n\techo \"这是多行注释内容\";\n\t*/\n\n\t//这是单行注释内容\n?>\n{%endcodeblock%}\n\n##**变量**\n\n变量就是用于临时存储值得容器。PHP中最基本的数据存储单元式变量和常量，可以存储不同的类型的数据。另PHP脚本语言是一种弱类型检查的语言，变量或常量的数据类型是由程序的上下文决定。\n\n1.声明变量\n\nPHP特性之一：不要求在使用变量之前声明变量。\n\nPHP中声明变量必须使用美元符号“`$`”后面跟着变量名来表示，使用赋值操作符(=)给一个变量赋值。\n{%codeblock lang:php%}\n<?php\n\t$a = 100;\n\t$b = \"string\";\n\t$c = true;\n\t$d = 99.99;\n\n\t$key1 = $a; //声明变量$key1,并将$a变量的值赋给他\n?>\n{%endcodeblock%}\n\n声明的变量有一定的使用范围，即定义的上下文背景。大部分变量如果不是在函数里面声明，只有在声明处到文件结束的一个单独的范围使用。\n\n在变量的使用范围周期内，我们可以借助`unset()`函数释放指定的变量，使用`isset()`函数检测变量释放设置和使用`empty()`函数检查一个变量是否为空。\n{%codeblock lang:php%}\n<?php\n\t$var = \"0\";\n\tif (empty($var)) {\n\t\techo \"这是空值\";\n\t}\n\n\tif (isset($var)) {\n\t\techo \"变量已经设置\";\n\t}\n\n\tunset($var);\n\n\tif (isset($var)) {\n\t\techo \"变量已经设置\";\n\t}\n?>\n{%endcodeblock%}\n\n\t如果empty()函数的参数是非空或非零的值，则empty()返回false。\n\n2.变量命名\n\n变量名严格区分大小写，内置结构和关键字以及用户自定义的类名和函数名都不区分大小写。\n\n变量名由字母或下划线开通，后面跟上任意数量的字母、数字、或则下划线。 一定不要以数字开通、中间不可以使用空格或点分开。\n\n变量名不能使用系统定义的（关键字），这些是PHP语言组成部分，不能作为常量、函数名、类名。\n\n变量名内容要有一定含义，让阅读者和开发者能够理解变量的意思，通常由1个或多个英文单词组成。1个单词情况下全部使用小写作为变量名。多个单词则首个单词全部小写，以后每个单词首字母采用大写风格。\n\n3.可变变量\n\n即一个变量的变量名可以动态地设置和使用。一个普通的变量通过声明来设置，一个可变变量获取了一个普通变量的值作为这个可变变量的变量名。\n{%codeblock lang:php%}\n<?php\n\t$hi = \"hello\";\n\t$$hi = \"world\";\n\n\techo \"$hi $hello\";\n\techo \"$hi ${$hi}\";\n?>\n{%endcodeblock%}\n\n4.变量的引用赋值\n\n传值赋值：当一个变量的值赋予另外一个变量时，改变其中一个变量的值，将不会影响到另外一个变量。\n\n引用赋值：即新的变量简单引用原始变量。改变任何一个变量，其他都会影响。\n\n使用引用赋值，简单将一个“`&`”符号加到将要赋值的变量前。\n{%codeblock lang:php%}\n<?php\n\t$foo = \"原始\";\n\t$bar = &$foo;\n\n\techo \"$foo\\n\";\n\techo \"$bar\";\n\n\t$bar = \"改变bar\";\n\techo \"$foo\\n\";\n\techo \"$bar\";\n\n\t$foo =\"改变foo\";\n\techo \"$foo\\n\";\n\techo \"$bar\";\n\n?>\n{%endcodeblock%}\n\n\n##**变量类型**\n\n4种标量类型：boolean（布尔型）、integer（整型）、float（浮点型，也称为double）、String（字符串）\n\n2种符合类型：Array（数组）、Object（对象）\n\n2种特殊类型：resource（资源）、NULL\n\n变量的类型不是由程序员设定，而是PHP根据变量使用的上下文在运行时决定。想查看某个表达式的值和类型，可以使用函数`var_dump()`。\n{%codeblock lang:php%}\n<?php\n\t$foo = \"原始\";\n\t$bool = true;\n\t$int = 15;\n\n\tvar_dump($foo);\n\tvar_dump($bool);\n\tvar_dump($int);\n?>\n{%endcodeblock%}\n\n输出结果：\n\n\tstring '原始' (length=6)\n\tboolean true\n\tint 15\n\n1.boolean（布尔型）\n\nboolean表达了`TRUE`和`FALSE`,即`真`和`假`。\n\n任何类型的值，PHP都会自动转换成布尔型的值。\n\n以下值被认为FALSE，其他的所有值都认为TRUE。\n- 布尔值FALSE\n- 整型值0为假，-1和其他非零值被认为TRUE\n- 浮点值0.0\n- 恐怖字符串和字符串“0”\n- 没有成员变量的数组\n- 没有单元的对象\n- 特殊类型NULL\n\n2.integer（整型）\n\n用于存储整数，可以使用正负号，可以使用十进制数、可以使用十六进制数、可以使用八进制数。\n整型数值最大使用范围和平台有关。\n\n3.float/double(浮点型)\n\n即包含小数部分的数，通常用来表示整数无法表示的数据。\n\n4.String（字符串）\n\n- 单引号（''）\n- 双引号(\"\")\n- 定界符(<<<)\n\n5.Array（数组）\n\n可以存放多个数据，且可以存入任何类型的数据。稍后详解\n\n6.Object（对象）\n\n一个对象类型的变量，是由一组属性值和一组方法构成。稍后详解\n\n7.Resource（资源类型）\n\n保存了到外部资源的一个引用。资源是通过专门的函数来建立和使用。使用资源类型变量保存有为打开文件、数据库连接、图形画布区域等特殊句柄。并由程序员创建、使用和释放。任何资源在不需要的时候都应该被及时释放，如果忘记释放，系统自动启用垃圾回收机制，避免内存耗尽。\n\n8. NULL\n\n表示一个变量没有值。NULL不表示空格，也不表示零，也不表示空字符串。不区分大小写。\n\n9.伪类型\n\n在一些函数中，一个参数可以接受多种类型的数据，还可以接受别的函数作为回调函数使用。\n\n- mined\n- number\n- callback\n\n##**数据类型转换**\n\n分为自动转换和强制转换。\n\n强制转换，在要转换的变量之前加上用括号起来的目标类型，也可以使用具体的转换函数，即intval()、flaot()和strval()等\n\n浮点型转换为整型将自动舍弃小数部分，只保留整数部分。\n\n##**常量**\n\n一般用于一些数据计算中固定的数值。常量作用域是全局的，可以在脚本的任何地方声明和访问到常量。\n\nPHP通过使用`define()`函数来定义常量，命名方式和变量类似，但是常量签名不需要加上美元符号(\"`$`\").\n\n\t格式：boolean define(string name,mixed value[,bool case_insensitive]);\n\n第一个参数为字符串类型的常量名，第二个参数为常量的值或表达式，第三个可选，case_insensitive设为true则常数会定义成不区分大小写。预设是区分大小写的。\n\n\n常量与变量区别：\n\n- 常量签名没有美元符号\n- 常量只能用defin()函数定义，不能通过赋值语句\n- 常量可以不用理会变量范围的规则而在任何地方定义和使用\n- 常量一旦定义不能被重新定义或取消定义，只到脚本运行结束自动释放\n- 常量值只能是标量（boolean、integer、float、string）\n\n系统预定义常量：\n\n- `PHP_OS`:执行PHP解析的操作系统名称\n- `PHP_VERSION`:当前PHP服务器版本\n- `TRUE`:\n- `FALSE`:\n- `NULL`:\n- `DIRECTORY_SEPARATOR`:根据操作系统决定目录的分隔符\n- `PATH_SEPARATOR`:根据操作系统决定环境变量的目录列表分割符\n- `E_ERROR`:错误，导致PHP脚本运行终止\n- `E_WARNING`:警告：不会导致PHP脚本运行终止\n- `E_PARSE`:解析错误，由程序解析器报告\n- `E_NOTICE`:非关键的错误\n- `M_PI`：数学中的π\n\n\nPHP中魔术常量：\n\n根据使用位置而改变。\n\n- `__FILE__`:当前的文件名》》在哪个文件中使用就代表哪个文件名称\n- `__LINE__`:当前行数》》在代码的那行使用就代表哪行的行号\n- `__FUNCTION__`:当前的函数名》》\n- `__CLASS__`:当前的类名\n- `__METHOD__`:当前对象的方法名\n\n\n##**运算符**\n\n1.算数运算符\n\n+、-、*、/、%、++、--\n\n2. 字符串运算符\n\n仅有一个（“`.`”），也称为连接运算符。是个二元运算符，返回其左右参数连接后的字符串。\n\n3.赋值运算符\n\n=、+=、-=、*=、/=、%=、.=、\n\n4.比较运算符\n\n>、<、>=、<=、==、===、<>or!=\n\n5.逻辑运算符\n\nand或&&、or或||、not 或！、xor\n\n6.位运算符\n\n&、|、^、~、<<、>>\n\n7.其他运算符\n\n?:、``、@、=>、_>、instanceof\n\n8.运算符优先级\n\n\n\n\n\n\n\n","mtime":1386746911000,"source":"_posts/4php基础-基本语法.md"},"9xahx2fs5mg1ds9p":{"content":"title: 7PHP基础-数组与数据结构\ndate: 2013-12-11 16:18:46\ncategories: PHP5\ntags: [PHP5,数组,数据结构]\n---\n##**数组定义**\n\n两种方法：\n\n- 直接为数组元素赋值即可声明数组\n\n{%codeblock lang:php%}\n<?php\n\t$info[0] = 1;\n\t$info[1] = \"zhangsan\";\n\t$info[2] = \"fuzhou\";\n\t$info[3] = \"13599552233\";\n\t$info[4] = \"123@qq.com\";\n?>\n{%endcodeblock%}\n\n- 使用array()函数声明数组\n\n{%codeblock lang:php%}\n<?php\n\t$arrayName = array(1,\"zhangsan\",\"fuzhou\",\"456465465\",\"465@qq.com\");\n?>\n{%endcodeblock%}\n<!--more -->\n\n##**数组遍历**\n\n1.使用for循环\n\n2.使用foreach\n\n##**预定义数组**\n\n1.服务器遍历：$_SERVER\n2.环境变量：$_ENV\n3.URLGET变量：$_GET\n4.HTTPPOST变量：$_POST\n5.request变量：$_REQUEST\n6.HTTP文件上传变量：$_FILE\n7.HTTPCOOKIES:$_COOKIE\n8.SESSION：$_SESSION\n9.Global：$GLOBALS\n\n##**数组相关处理函数**\n\n\n\n","mtime":1386751348000,"source":"_posts/7php基础-数组与数据结构.md","_id":"9xahx2fs5mg1ds9p"},"hjsst6pf44n14s1y":{"content":"title: 6.PHP基础-函数应用\ndate: 2013-12-11 15:44:13\ncategories: PHP5\ntags: [PHP5,函数应用]\n---\n##**自定义函数**\n\n1.函数声明\n\n格式：\n{%codeblock lang:php%}\nfunction 函数名([参数1,参数2,...参数n]){\n\t函数体;\n\treturn 返回值;\n}\n{%endcodeblock%}\n<!--more-->\n2.函数调用\n\n不管是自定义函数还是系统函数，如果函数不被调用，就不会执行。只要在需要使用函数的位置，使用函数名称和参数列表进行调用。函数被调用后开始执行函数体中的代码，执行完毕返回到调用的位置继续向下执行。\n\n格式：\n{%codeblock lang:php%}\n<?php\n\ttable();\n\n\tfunction table(){\n\n\t}\n\n\ttable();\n?>\n{%endcodeblock%}\n\n3.函数参数\n\n参数列表由0个、1个或多个参数组成。每个参数是一个表达式，用逗号分隔。\n\n4.函数返回值\n\n函数执行后的结果返回给调用者。\n\n##**PHP变量的范围**\n\n大部分PHP变量只有一个单独的使用范围，也包含include和require引入的文件。\n\n1.局部变量\n\n内部变量，是在函数内部声明的变量，其作用域仅限于函数内部，离开该函数后使用这个变量就是非法。\n\n2.全局变量\n\n外部变量，是在函数外部定义的，其作用域从变量定义开始到本程序文件的末尾。全局变量不会自动设置为可用。在php中，由于函数可用视为单独的程序片段，所以局部变量会覆盖全局变量的能见度，因此在函数中并无法直接调用全局变量。\n\n若要使用全局变量，必须利用global关键字定义目标变量，以告诉函数主体此变量为全局变量。\n\n{%codeblock lang:php%}\n<?php\n\t$one = 200;\n\t$two = 100;\n\n\tfunction demo(){\n\t\tglobal $one,$two;\n\n\t\techo \"....\";\n\t}\n\t\n?>\n{%endcodeblock%}\n\n还可以使用特殊的PHP自定义$GLOBALS数组。\n<?php\n\t$one = 200;\n\t$two = 100;\n\n\tfunction demo(){\n\t\t$GLOBALS['two'] = $GLOBALS['two'] + $GLOBALS['one'];\n\n\t\techo \"....\";\n\t}\n\t\n?>\n{%endcodeblock%}\n\n\n3.静态变量\n\n使用关键字`static`。\n\n\n##**声明及应用各种形式的PHP函数**\n\n1.常规参数的函数，即实参和形参的个数相等。\n\n2.伪类型参数函数\n\n3.引用参数函数\n\n\tvoid funName(array &arg)\n\n4.默认参数的函数\n\n定义函数时声明了参数，调用时函数没有指定参数或少指定参数，就会使用参数的默认值，默认值必须是常量表达式。\n\n5.可变个数参数的函数\n\n6.回调函数\n\n7.递归函数\n\n\n","mtime":1386749831000,"source":"_posts/6php基础-函数应用.md","_id":"hjsst6pf44n14s1y"},"hjsa0wvoycckhj8l":{"content":"title: 5PHP基础-流程控制\ndate: 2013-12-11 15:31:06\ncategories: PHP5\ntags: [PHP5基础,流程控制]\n---\n因为拥有JAVA基础，所以流程控制结构就粗略飞下。\n\n##**分支结构**\n\n- 单一条件分支结构（if）\n- 双向条件分支结构(else从句)\n- 多向条件分支结构(else if从句)\n- 多向条件分支结构(switch从句)\n\n##**循环结构**\n\n- while语句\n- do\n- for语句\n\n##**特殊的流程控制语句**\n\n- break语句\n- continue语句\n- exit语句\n\n\n","mtime":1386747710000,"source":"_posts/5php基础-流程控制.md","_id":"hjsa0wvoycckhj8l"},"rf2yxilg6p63uh70":{"content":"title: 8PHP基础-面向对象\ndate: 2013-12-11 16:43:28\ncategories: PHP5\ntags: [php5,面向对象]\n---\n##**抽象一个类**\n1.类的声明\n\n格式：\n\n\t[修饰关键字] class 类名{\n\t\t类中成员;\n\t}\n\n例子：\n\n\tclass Person{\n\t\t成员属性：\n\t\t\t姓名、性别、年龄、身高、体重、电话、住址等\n\t\t成员方法：\n\t\t\t说话、学习、吃饭、开车等\n\t}\n\n<!-- more -->\n2.成员属性\n\n在类中直接声明变量就称为成员变量，可以声明多个变量，每个变量存储不同的属性信息。\n{%codeblock lang:php%}\nclass Person{\n\t\tvar $name;\n\t\tvar $age;\n\t\tvar $sex;\n\t}\n{%endcodeblock%}\n\n3.成员方法\n\n在对象中需要声明一些可以操作本对象成员属性的一些方法，来完成对象的一些行为。在类中直接声明的函数称为成员方法，可以在类中声明多个函数。\n{%codeblock lang:php%}\nclass Person{\n\tfunction say(){\n\t//...\n\t}\n\n\tprivate function run(){\n\t//...\n\t}\n}\n{%endcodeblock%}\n\n\n##**通过类实例化对象**\n\n面向对象程序的单位就是对象，对象时通过类的实例化出来的。\n\n1.实例化对象\n\n使用new关键字并在后面加上一个和类名同名的方法。\n\n{%codeblock lang:php%}\n<?php\nclass Person{\n\tvar $name;\n\tvar $age;\n\n\tfunction say(){\n\t//...\n\t}\n\n\tprivate function run(){\n\t//...\n\t}\n}\n\n\t//实例化对象\n\t$p1 = new Person();\n\t$p2 = new Person();\n\n?>\n{%endcodeblock%}\n\n2.对象类型在内存中的分配\n\n3.对象成员的访问\n\n{%codeblock lang:php%}\n<?php\n\n\t//初始化赋值\n\t$p1->name = \"zhangsan\";\n\n\t//访问\n\techo \"$p1->name\";\n\t$p1->say();\n?>\n{%endcodeblock%}\n\n","mtime":1386752548000,"source":"_posts/8php基础-面向对象.md","_id":"rf2yxilg6p63uh70"}}}